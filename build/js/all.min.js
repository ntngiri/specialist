var specialist=angular.module("specialist",["ngRoute","specialist.droope"]).config(["$routeProvider","$locationProvider",function(l,t){l.when("/",{templateUrl:"./build/html/main.html",controller:"mainController"}).when("/search",{templateUrl:"./build/html/search.html",controller:"SearchCtrl"}).when("/doctorPortal",{templateUrl:"./build/html/doctorPortal.html",controller:"doctorPortalCtrl"}).when("/ques",{templateUrl:"./build/html/quesans.html"}).when("/docSignup",{templateUrl:"./build/html/docSignup.html",controller:"docSignupCtrl"}),t.html5Mode(!0)}]);
specialist.factory("dataService",["$http",function(t){return{getFullDoctorList:function(){return t.get("http://0.0.0.0:8080/doctor/list").then(function(t){return t.data})}}}]);
specialist.controller("docSignupCtrl",["$scope",function(r){r.secForm=!1,r.firstForm=!0;var s={};r.bringSecondForm=function(){s.name=r.fname+" "+r.lname,r.email==r.confEmail?s.email=r.email:r.email_err=!0,r.pass==r.confPass?s.password=r.pass:r.pass_err=!0,r.pass_err||r.email_err||(r.secForm=!0,r.firstForm=!1)}}]);
specialist.controller("doctorPortalCtrl",["$scope",function(o){}]);
angular.module("specialist.tagit",[]).directive("tagIt",function(){return{restrict:"EA",scope:{tags:"=",remove:"&"},template:'<div><ul class="tags"><li  class="tagit" ng-repeat="tag in tags "><span class="tagText">{{::tag.name}}</span><a  ng-click="remove({idx:tag.id})" class="dCross" href="javascript:;">x</a></li></ul></div>',link:function(e,t,a,i){}}}),angular.module("specialist.listing",[]).directive("ngRepeatDoneNotification",function(){return function(e,t,a){e.$parent.multiSelect||e.selectedId&&0!=e.selectedId.length&&e.$last&&!e.$parent.firstReapet&&(e.$parent.firstReapet=1,e.callback({item:{id:e.selectedId[0],name:e.data[e.idHash.indexOf(e.selectedId[0])].name,allSelected:e.selectedId,checked:null,first:!0}}))}}).directive("listing",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{data:"=",tupleCount:"@",selectedId:"=",maxHeight:"@",callback:"&listingCallback",multiSelect:"@",filterName:"=",active:"="},template:'<ul><li ng-repeat="item in data" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)" ng-class="{active:item.active, notSelectable:item.notSelectable}"><input ng-if="multiSelect == \'true\' && !item.notSelectable" type="checkbox" ng-model=item.checked>{{selectedName}}<div style="display:inline-block; width:auto;" ng-transclude></div></li></ul>',link:function(e,t,a,i){e.firstReapet=0,e.selObj={},e.idHash=[],e.data&&e.data.forEach(function(t){e.idHash.push(t.id)}),e.$on("select",function(t,a,i){var c;c=i?e.data[e.idHash.indexOf(i)]:e.data[e.active],e.checkItem({item:c})}),e.$on("deSelect",function(e,t){}),e.isActive=function(a){if(e.active<t.find("li").length)return e.active===a;e.active=0},e.checkItem=function(t){e.attr=a,t.item.notSelectable||(e.checkSelection(t),e.callback({item:{id:t.item.id,name:t.item.name,allSelected:e.selectedId,checked:t.item.checked}}))},e.checkSelection=function(t){var a=t.item.id;if(e.selectedId=e.selectedId||[],e.attr.multiSelect){var i=e.selectedId.indexOf(a);i==-1?(e.selectedId.push(a),e.selObj[a]=t.item.name,t.item.checked=!0):(e.selectedId.splice(i,1),delete e.selObj[a],t.item.checked=!1)}else e.selectedId=[],e.selectedId.push(a)}}}}),angular.module("specialist.droope",["specialist.listing","specialist.tagit"]).directive("droope",["$document",function(e){return{scope:{option:"=",callback:"&droopeCallback",data:"=",selectedId:"=",api:"="},restrict:"E",template:'<div class="ddwn"><div class="DDwrap"><ul class="DDsearch"><li class="frst" style="float: none;"><div class="DDinputWrap"><span class="ddIcon srchTxt" ng-click="showDrop()"></span><input type="text" ng-click="showDrop()" id="" class="srchTxt" autocomplete="off" style="color: rgb(68, 68, 68);" ng-model="selectedName"></div></li></ul></div><div class="dd_dwn" ng-show="show"><listing tuplecount="10" multi-select="{{option.multiselect}}" active="activeIndex" selected-id ="selectedId" listing-callback="listingCallback(item)" data="data" filter-name="selectedName"><div><span>{{$parent.item.name}}</span></div></listing></div></div>',replace:!0,transclude:!0,compile:function(t,a){var c={fieldAttr:{placeholder:"Enter your Values"}};return function(t,a,l,s){t.activeIndex=0,a.find("input").on("keydown",function(e){switch(e.which){case 8:""==t.selectedName&&(t.show=!0),t.$digest();break;case 9:t.blurOut();break;case 13:e.stopPropagation(),t.$broadcast("select",this),t.$digest();break;case 38:t.data[t.activeIndex].active=!1,t.activeIndex--,t.data[t.activeIndex].active=!0,t.$digest();break;case 40:t.data[t.activeIndex].active=!1,t.activeIndex++,t.data[t.activeIndex].active=!0,t.$digest()}}),t.options=angular.merge(c,t.option),t.tags=[],a.find("input").attr(t.options.fieldAttr),t.api={resetDroope:function(){t.selectedName="",t.selectedId=[]},selectItem:function(e){Object.prototype.toString.call(e),t.$broadcast("select",this,e)}},t.listingCallback=function(e){var a={id:e.id,name:e.name};t.tagUpdate(a,e.checked)},t.tagUpdate=function(e,a){if(t.option.multiselect)if(a)t.tags.push(e);else{var i=t.tags.indexOf(e);t.tags.splice(i,1)}else t.selectedName=e.name,t.show=!1,t.callback({item:e});event&&event.stopPropagation()},t.showDrop=function(){t.lastSelected=t.selectedName,t.selectedName="",t.show=!0},t.removeAllTags=function(){if(t.tags=[],t.option.multiselect)for(i=0;i<t.selectedId.length;i++){var e=t.data.indexOf(t.selectedId[i]);t.data[e].checked=!1}else t.selectedName=""},t.blurOut=function(){var e={id:"",name:t.selectedName,checked:"no"};t.listingCallback(e)},e.on("click",function(e){angular.element(e.target).hasClass("srchTxt")||(t.show=!1,""==t.selectedName&&(t.selectedName=t.lastSelected)),t.$apply()})}}}}]);
specialist.controller("mainController",["$scope",function(n){var a=[{name:"Delhi"},{name:"Noida"},{name:"Gurgaon"}];n.options={},n.options={data:a,multiselect:!0,maxHeight:250},n.data=[{name:"Delhi"},{name:"Noida"},{name:"Gurgaon"}],n.selectedId=[],n.onClickFunc=function(n){console.log(n)},n.api={}}]);
specialist.controller("SearchCtrl",["$scope","dataService",function(o,t){t.getFullDoctorList().then(function(t){console.log(t),o.doctorList=t})}]);
//# sourceMappingURL=data:application/json;base64,
