var specialist = angular.module('specialist', ['ui.router']).config(['$stateProvider', '$locationProvider', '$urlRouterProvider', function ($stateProvider, $locationProvider, $urlRouterProvider) {
	$urlRouterProvider.otherwise('/');
	$stateProvider.state('home', {
		url: '/',
		templateUrl: './build/html/main.html',
		controller: 'mainController'
	}).state('search', {
		url: '/search',
		templateUrl: './build/html/search.html',
		controller: 'SearchCtrl'
	}).state('doctorPortal', {
		url: '/doctorPortal',
		templateUrl: './build/html/doctorPortal.html',
		controller: 'doctorPortalCtrl'
	}).state('ques', {
		url: '/ques',
		templateUrl: './build/html/quesans.html'
	}).state('docSignup', {
		url: '/docSignup',
		templateUrl: './build/html/docSignup.html',
		controller: 'docSignupCtrl'
	}).state('doctorProfile', {
		url: '/doctorProfile',
		templateUrl: './build/html/docProfile.html',
		controller: 'docProfileCtrl',
		abstract: true
	}).state('doctorProfile.dashboard', {
		url: '',
		templateUrl: './build/html/docprofileDashboard.html'
	}).state('doctorProfile.faq', {
		url: '/faq',
		templateUrl: './build/html/docFaq.html'
	}).state('doctorProfile.plans', {
		url: '/plans',
		templateUrl: './build/html/docPlans.html'
	}).state('doctorProfile.profile', {
		url: '/profile',
		templateUrl: './build/html/docUserProfile.html'
	});
	$locationProvider.html5Mode(true);
}]);
//angular.module("ui.rCalendar.tpls", ["../template/rcalendar/calender.html","../template/rcalendar/day.html","../template/rcalendar/month.html","../template/rcalendar/week.html"]);
//angular.module('ui.rCalendar', [])
specialist.constant('calendarConfig', {
    formatDay: 'dd',
    formatDayHeader: 'EEE',
    formatDayTitle: 'MMMM dd, yyyy',
    formatWeekTitle: 'MMMM yyyy, Week w',
    formatMonthTitle: 'MMMM yyyy',
    formatWeekViewDayHeader: 'EEE d',
    formatHourColumn: 'ha',
    calendarMode: 'month',
    showWeeks: false,
    showEventDetail: true,
    startingDay: 0,
    eventSource: null,
    queryMode: 'local'
}).controller('ui.rCalendar.CalendarController', ['$scope', '$attrs', '$parse', '$interpolate', '$log', 'dateFilter', 'calendarConfig', function ($scope, $attrs, $parse, $interpolate, $log, dateFilter, calendarConfig) {
    'use strict';

    var self = this,
        ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

    // Configuration attributes
    angular.forEach(['formatDay', 'formatDayHeader', 'formatDayTitle', 'formatWeekTitle', 'formatMonthTitle', 'formatWeekViewDayHeader', 'formatHourColumn', 'showWeeks', 'showEventDetail', 'startingDay', 'eventSource', 'queryMode'], function (key, index) {
        self[key] = angular.isDefined($attrs[key]) ? index < 7 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key]) : calendarConfig[key];
    });

    $scope.$parent.$watch($attrs.eventSource, function (value) {
        self.onEventSourceChanged(value);
    });

    $scope.calendarMode = $scope.calendarMode || calendarConfig.calendarMode;
    if (angular.isDefined($attrs.initDate)) {
        self.currentCalendarDate = $scope.$parent.$eval($attrs.initDate);
    }
    if (!self.currentCalendarDate) {
        self.currentCalendarDate = new Date();
        if ($attrs.ngModel && !$scope.$parent.$eval($attrs.ngModel)) {
            $parse($attrs.ngModel).assign($scope.$parent, self.currentCalendarDate);
        }
    }

    self.init = function (ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;

        ngModelCtrl.$render = function () {
            self.render();
        };
    };

    self.render = function () {
        if (ngModelCtrl.$modelValue) {
            var date = new Date(ngModelCtrl.$modelValue),
                isValid = !isNaN(date);

            if (isValid) {
                this.currentCalendarDate = date;
            } else {
                $log.error('"ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
            }
            ngModelCtrl.$setValidity('date', isValid);
        }
        this.refreshView();
    };

    self.refreshView = function () {
        if (this.mode) {
            this.range = this._getRange(this.currentCalendarDate);
            this._refreshView();
            this.rangeChanged();
        }
    };

    // Split array into smaller arrays
    self.split = function (arr, size) {
        var arrays = [];
        while (arr.length > 0) {
            arrays.push(arr.splice(0, size));
        }
        return arrays;
    };

    self.onEventSourceChanged = function (value) {
        self.eventSource = value;
        if (self._onDataLoaded) {
            self._onDataLoaded();
        }
    };

    $scope.move = function (direction) {
        var step = self.mode.step,
            currentCalendarDate = self.currentCalendarDate,
            year = currentCalendarDate.getFullYear() + direction * (step.years || 0),
            month = currentCalendarDate.getMonth() + direction * (step.months || 0),
            date = currentCalendarDate.getDate() + direction * (step.days || 0),
            firstDayInNextMonth;

        currentCalendarDate.setFullYear(year, month, date);
        if ($scope.calendarMode === 'month') {
            firstDayInNextMonth = new Date(year, month + 1, 1);
            if (firstDayInNextMonth.getTime() <= currentCalendarDate.getTime()) {
                self.currentCalendarDate = new Date(firstDayInNextMonth - 24 * 60 * 60 * 1000);
            }
        }
        ngModelCtrl.$setViewValue(self.currentCalendarDate);
        self.refreshView();
    };

    self.move = function (direction) {
        $scope.move(direction);
    };

    self.rangeChanged = function () {
        if (self.queryMode === 'local') {
            if (self.eventSource && self._onDataLoaded) {
                self._onDataLoaded();
            }
        } else if (self.queryMode === 'remote') {
            if ($scope.rangeChanged) {
                $scope.rangeChanged({
                    startTime: this.range.startTime,
                    endTime: this.range.endTime
                });
            }
        }
    };

    function overlap(event1, event2) {
        return !(event1.endIndex <= event2.startIndex || event2.endIndex <= event1.startIndex);
    }

    function calculatePosition(events) {
        var i,
            j,
            len = events.length,
            maxColumn = 0,
            col,
            isForbidden = new Array(len);

        for (i = 0; i < len; i += 1) {
            for (col = 0; col < maxColumn; col += 1) {
                isForbidden[col] = false;
            }
            for (j = 0; j < i; j += 1) {
                if (overlap(events[i], events[j])) {
                    isForbidden[events[j].position] = true;
                }
            }
            for (col = 0; col < maxColumn; col += 1) {
                if (!isForbidden[col]) {
                    break;
                }
            }
            if (col < maxColumn) {
                events[i].position = col;
            } else {
                events[i].position = maxColumn++;
            }
        }
    }

    function calculateWidth(orderedEvents) {
        var cells = new Array(24),
            event,
            index,
            i,
            j,
            len,
            eventCountInCell,
            currentEventInCell;

        //sort by position in descending order, the right most columns should be calculated first
        orderedEvents.sort(function (eventA, eventB) {
            return eventB.position - eventA.position;
        });
        for (i = 0; i < 24; i += 1) {
            cells[i] = {
                calculated: false,
                events: []
            };
        }
        len = orderedEvents.length;
        for (i = 0; i < len; i += 1) {
            event = orderedEvents[i];
            index = event.startIndex;
            while (index < event.endIndex) {
                cells[index].events.push(event);
                index += 1;
            }
        }

        i = 0;
        while (i < len) {
            event = orderedEvents[i];
            if (!event.overlapNumber) {
                var overlapNumber = event.position + 1;
                event.overlapNumber = overlapNumber;
                var eventQueue = [event];
                while (event = eventQueue.shift()) {
                    index = event.startIndex;
                    while (index < event.endIndex) {
                        if (!cells[index].calculated) {
                            cells[index].calculated = true;
                            if (cells[index].events) {
                                eventCountInCell = cells[index].events.length;
                                for (j = 0; j < eventCountInCell; j += 1) {
                                    currentEventInCell = cells[index].events[j];
                                    if (!currentEventInCell.overlapNumber) {
                                        currentEventInCell.overlapNumber = overlapNumber;
                                        eventQueue.push(currentEventInCell);
                                    }
                                }
                            }
                        }
                        index += 1;
                    }
                }
            }
            i += 1;
        }
    }

    self.placeEvents = function (orderedEvents) {
        calculatePosition(orderedEvents);
        calculateWidth(orderedEvents);
    };

    self.placeAllDayEvents = function (orderedEvents) {
        calculatePosition(orderedEvents);
    };
}]).directive('calendar', function () {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './build/html/calender.html',
        scope: {
            calendarMode: '=',
            rangeChanged: '&',
            eventSelected: '&',
            timeSelected: '&'
        },
        require: ['calendar', '?^ngModel'],
        controller: 'ui.rCalendar.CalendarController',
        link: function (scope, element, attrs, ctrls) {
            var calendarCtrl = ctrls[0],
                ngModelCtrl = ctrls[1];

            if (ngModelCtrl) {
                calendarCtrl.init(ngModelCtrl);
            }

            scope.$on('changeDate', function (event, direction) {
                calendarCtrl.move(direction);
            });

            scope.$on('eventSourceChanged', function (event, value) {
                calendarCtrl.onEventSourceChanged(value);
            });
        }
    };
}).directive('monthview', ['dateFilter', function (dateFilter) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './build/html/month.html',
        require: ['^calendar', '?^ngModel'],
        link: function (scope, element, attrs, ctrls) {
            var ctrl = ctrls[0],
                ngModelCtrl = ctrls[1];
            scope.showWeeks = ctrl.showWeeks;
            scope.showEventDetail = ctrl.showEventDetail;

            ctrl.mode = {
                step: { months: 1 }
            };

            function getDates(startDate, n) {
                var dates = new Array(n),
                    current = new Date(startDate),
                    i = 0;
                current.setHours(12); // Prevent repeated dates because of timezone bug
                while (i < n) {
                    dates[i++] = new Date(current);
                    current.setDate(current.getDate() + 1);
                }
                return dates;
            }

            scope.select = function (selectedDate) {
                var rows = scope.rows;
                if (rows) {
                    var currentCalendarDate = ctrl.currentCalendarDate;
                    var currentMonth = currentCalendarDate.getMonth();
                    var currentYear = currentCalendarDate.getFullYear();
                    var selectedMonth = selectedDate.getMonth();
                    var selectedYear = selectedDate.getFullYear();
                    var direction = 0;
                    if (currentYear === selectedYear) {
                        if (currentMonth !== selectedMonth) {
                            direction = currentMonth < selectedMonth ? 1 : -1;
                        }
                    } else {
                        direction = currentYear < selectedYear ? 1 : -1;
                    }

                    ctrl.currentCalendarDate = selectedDate;
                    if (ngModelCtrl) {
                        ngModelCtrl.$setViewValue(selectedDate);
                    }
                    if (direction === 0) {
                        for (var row = 0; row < 6; row += 1) {
                            for (var date = 0; date < 7; date += 1) {
                                var selected = ctrl.compare(selectedDate, rows[row][date].date) === 0;
                                rows[row][date].selected = selected;
                                if (selected) {
                                    scope.selectedDate = rows[row][date];
                                }
                            }
                        }
                    } else {
                        ctrl.refreshView();
                    }

                    if (scope.timeSelected) {
                        scope.timeSelected({ selectedTime: selectedDate });
                    }
                }
            };

            ctrl._refreshView = function () {
                var startDate = ctrl.range.startTime,
                    date = startDate.getDate(),
                    month = (startDate.getMonth() + (date !== 1 ? 1 : 0)) % 12,
                    year = startDate.getFullYear() + (date !== 1 && month === 0 ? 1 : 0);

                var days = getDates(startDate, 42);
                for (var i = 0; i < 42; i++) {
                    days[i] = angular.extend(createDateObject(days[i], ctrl.formatDay), {
                        secondary: days[i].getMonth() !== month
                    });
                }

                scope.labels = new Array(7);
                for (var j = 0; j < 7; j++) {
                    scope.labels[j] = dateFilter(days[j].date, ctrl.formatDayHeader);
                }

                var headerDate = new Date(year, month, 1);
                scope.$parent.title = dateFilter(headerDate, ctrl.formatMonthTitle);
                scope.rows = ctrl.split(days, 7);

                if (scope.showWeeks) {
                    scope.weekNumbers = [];
                    var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,
                        numWeeks = scope.rows.length;
                    for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
                        scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
                    }
                }
            };

            function createDateObject(date, format) {
                return {
                    date: date,
                    label: dateFilter(date, format),
                    selected: ctrl.compare(date, ctrl.currentCalendarDate) === 0,
                    current: ctrl.compare(date, new Date()) === 0
                };
            }

            function compareEvent(event1, event2) {
                if (event1.allDay) {
                    return 1;
                } else if (event2.allDay) {
                    return -1;
                } else {
                    return event1.startTime.getTime() - event2.startTime.getTime();
                }
            }

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    oneDay = 86400000,
                    eps = 0.001,
                    row,
                    date,
                    hasEvent = false;

                if (rows.hasEvent) {
                    for (row = 0; row < 6; row += 1) {
                        for (date = 0; date < 7; date += 1) {
                            if (rows[row][date].hasEvent) {
                                rows[row][date].events = null;
                                rows[row][date].hasEvent = false;
                            }
                        }
                    }
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);
                    var st;
                    var et;

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            st = utcStartTime;
                            et = utcEndTime;
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            st = startTime;
                            et = endTime;
                        }
                    }

                    var timeDiff;
                    var timeDifferenceStart;
                    if (eventStartTime <= st) {
                        timeDifferenceStart = 0;
                    } else {
                        timeDiff = eventStartTime - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (eventStartTime.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceStart = timeDiff / oneDay;
                    }

                    var timeDifferenceEnd;
                    if (eventEndTime >= et) {
                        timeDiff = et - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (et.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceEnd = timeDiff / oneDay;
                    } else {
                        timeDiff = eventEndTime - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (eventEndTime.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceEnd = timeDiff / oneDay;
                    }

                    var index = Math.floor(timeDifferenceStart);
                    var eventSet;
                    while (index < timeDifferenceEnd - eps) {
                        var rowIndex = Math.floor(index / 7);
                        var dayIndex = Math.floor(index % 7);
                        rows[rowIndex][dayIndex].hasEvent = true;
                        eventSet = rows[rowIndex][dayIndex].events;
                        if (eventSet) {
                            eventSet.push(event);
                        } else {
                            eventSet = [];
                            eventSet.push(event);
                            rows[rowIndex][dayIndex].events = eventSet;
                        }
                        index += 1;
                    }
                }

                for (row = 0; row < 6; row += 1) {
                    for (date = 0; date < 7; date += 1) {
                        if (rows[row][date].hasEvent) {
                            hasEvent = true;
                            rows[row][date].events.sort(compareEvent);
                        }
                    }
                }
                rows.hasEvent = hasEvent;

                var findSelected = false;
                for (row = 0; row < 6; row += 1) {
                    for (date = 0; date < 7; date += 1) {
                        if (rows[row][date].selected) {
                            scope.selectedDate = rows[row][date];
                            findSelected = true;
                            break;
                        }
                    }
                    if (findSelected) {
                        break;
                    }
                }
            };

            ctrl.compare = function (date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    firstDayOfMonth = new Date(year, month, 1),
                    difference = ctrl.startingDay - firstDayOfMonth.getDay(),
                    numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference,
                    startDate = new Date(firstDayOfMonth),
                    endDate;

                if (numDisplayedFromPreviousMonth > 0) {
                    startDate.setDate(-numDisplayedFromPreviousMonth + 1);
                }

                endDate = new Date(startDate);
                endDate.setDate(endDate.getDate() + 42);

                return {
                    startTime: startDate,
                    endTime: endDate
                };
            };

            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
                var time = checkDate.getTime();
                checkDate.setMonth(0); // Compare with Jan 1
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            }

            ctrl.refreshView();
        }
    };
}]).directive('weekview', ['dateFilter', '$timeout', function (dateFilter, $timeout) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './build/html/week.html',
        require: '^calendar',
        link: function (scope, element, attrs, ctrl) {
            scope.formatWeekViewDayHeader = ctrl.formatWeekViewDayHeader;
            scope.formatHourColumn = ctrl.formatHourColumn;

            $timeout(function () {
                updateScrollGutter();
            });

            ctrl.mode = {
                step: { days: 7 }
            };

            function updateScrollGutter() {
                var children = element.children();
                var allDayEventBody = children[1].children[1];
                var allDayEventGutterWidth = allDayEventBody.offsetWidth - allDayEventBody.clientWidth;
                var normalEventBody = children[2];
                var normalEventGutterWidth = normalEventBody.offsetWidth - normalEventBody.clientWidth;
                var gutterWidth = allDayEventGutterWidth || normalEventGutterWidth || 0;
                if (gutterWidth > 0) {
                    scope.gutterWidth = gutterWidth;
                    if (allDayEventGutterWidth <= 0) {
                        scope.allDayEventGutterWidth = gutterWidth;
                    } else {
                        scope.allDayEventGutterWidth = 0;
                    }
                    if (normalEventGutterWidth <= 0) {
                        scope.normalGutterWidth = gutterWidth;
                    } else {
                        scope.normalGutterWidth = 0;
                    }
                }
            }

            function getDates(startTime, n) {
                var dates = new Array(n),
                    current = new Date(startTime),
                    i = 0;
                current.setHours(12); // Prevent repeated dates because of timezone bug
                while (i < n) {
                    dates[i++] = {
                        date: new Date(current)
                    };
                    current.setDate(current.getDate() + 1);
                }
                return dates;
            }

            function createDateObjects(startTime) {
                var times = [],
                    row,
                    time,
                    currentHour = startTime.getHours(),
                    currentDate = startTime.getDate();

                for (var hour = 0; hour < 24; hour += 1) {
                    row = [];
                    for (var day = 0; day < 7; day += 1) {
                        time = new Date(startTime.getTime());
                        time.setHours(currentHour + hour);
                        time.setDate(currentDate + day);
                        row.push({
                            time: time
                        });
                    }
                    times.push(row);
                }
                return times;
            }

            scope.select = function (selectedTime) {
                if (scope.timeSelected) {
                    scope.timeSelected({ selectedTime: selectedTime });
                }
            };

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    dates = scope.dates,
                    oneHour = 3600000,
                    oneDay = 86400000,

                //add allday eps
                eps = 0.016,
                    eventSet,
                    allDayEventInRange = false,
                    normalEventInRange = false,
                    day,
                    hour;

                if (rows.hasEvent) {
                    for (day = 0; day < 7; day += 1) {
                        for (hour = 0; hour < 24; hour += 1) {
                            if (rows[hour][day].events) {
                                rows[hour][day].events = null;
                            }
                        }
                    }
                    rows.hasEvent = false;
                }

                if (dates.hasEvent) {
                    for (day = 0; day < 7; day += 1) {
                        if (dates[day].events) {
                            dates[day].events = null;
                        }
                    }
                    dates.hasEvent = false;
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            allDayEventInRange = true;

                            var allDayStartIndex;
                            if (eventStartTime <= utcStartTime) {
                                allDayStartIndex = 0;
                            } else {
                                allDayStartIndex = Math.floor((eventStartTime - utcStartTime) / oneDay);
                            }

                            var allDayEndIndex;
                            if (eventEndTime >= utcEndTime) {
                                allDayEndIndex = Math.ceil((utcEndTime - utcStartTime) / oneDay);
                            } else {
                                allDayEndIndex = Math.ceil((eventEndTime - utcStartTime) / oneDay);
                            }

                            var displayAllDayEvent = {
                                event: event,
                                startIndex: allDayStartIndex,
                                endIndex: allDayEndIndex
                            };

                            eventSet = dates[allDayStartIndex].events;
                            if (eventSet) {
                                eventSet.push(displayAllDayEvent);
                            } else {
                                eventSet = [];
                                eventSet.push(displayAllDayEvent);
                                dates[allDayStartIndex].events = eventSet;
                            }
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            normalEventInRange = true;

                            var timeDiff;
                            var timeDifferenceStart;
                            if (eventStartTime <= startTime) {
                                timeDifferenceStart = 0;
                            } else {
                                timeDiff = eventStartTime - startTime - (eventStartTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceStart = timeDiff / oneHour;
                            }

                            var timeDifferenceEnd;
                            if (eventEndTime >= endTime) {
                                timeDiff = endTime - startTime - (endTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceEnd = timeDiff / oneHour;
                            } else {
                                timeDiff = eventEndTime - startTime - (eventEndTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceEnd = timeDiff / oneHour;
                            }

                            var startIndex = Math.floor(timeDifferenceStart);
                            var endIndex = Math.ceil(timeDifferenceEnd - eps);
                            var startRowIndex = startIndex % 24;
                            var dayIndex = Math.floor(startIndex / 24);
                            var endOfDay = dayIndex * 24;
                            var endRowIndex;

                            do {
                                endOfDay += 24;
                                if (endOfDay <= endIndex) {
                                    endRowIndex = 24;
                                } else {
                                    endRowIndex = endIndex % 24;
                                }
                                var displayEvent = {
                                    event: event,
                                    startIndex: startRowIndex,
                                    endIndex: endRowIndex
                                };
                                eventSet = rows[startRowIndex][dayIndex].events;
                                if (eventSet) {
                                    eventSet.push(displayEvent);
                                } else {
                                    eventSet = [];
                                    eventSet.push(displayEvent);
                                    rows[startRowIndex][dayIndex].events = eventSet;
                                }
                                startRowIndex = 0;
                                dayIndex += 1;
                            } while (endOfDay < endIndex);
                        }
                    }
                }

                if (normalEventInRange) {
                    for (day = 0; day < 7; day += 1) {
                        var orderedEvents = [];
                        for (hour = 0; hour < 24; hour += 1) {
                            if (rows[hour][day].events) {
                                orderedEvents = orderedEvents.concat(rows[hour][day].events);
                            }
                        }
                        if (orderedEvents.length > 0) {
                            rows.hasEvent = true;
                            ctrl.placeEvents(orderedEvents);
                        }
                    }
                }

                if (allDayEventInRange) {
                    var orderedAllDayEvents = [];
                    for (day = 0; day < 7; day += 1) {
                        if (dates[day].events) {
                            orderedAllDayEvents = orderedAllDayEvents.concat(dates[day].events);
                        }
                    }
                    if (orderedAllDayEvents.length > 0) {
                        dates.hasEvent = true;
                        ctrl.placeAllDayEvents(orderedAllDayEvents);
                    }
                }

                $timeout(function () {
                    updateScrollGutter();
                });
            };

            ctrl._refreshView = function () {
                var firstDayOfWeek = ctrl.range.startTime,
                    dates = getDates(firstDayOfWeek, 7),
                    weekNumberIndex,
                    weekFormatPattern = 'w',
                    title;

                scope.rows = createDateObjects(firstDayOfWeek);
                scope.dates = dates;
                weekNumberIndex = ctrl.formatWeekTitle.indexOf(weekFormatPattern);
                title = dateFilter(firstDayOfWeek, ctrl.formatWeekTitle);
                if (weekNumberIndex !== -1) {
                    title = title.replace(weekFormatPattern, getISO8601WeekNumber(firstDayOfWeek));
                }
                scope.$parent.title = title;
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    date = currentDate.getDate(),
                    day = currentDate.getDay(),
                    firstDayOfWeek = new Date(year, month, date - day),
                    endTime = new Date(year, month, date - day + 7);

                return {
                    startTime: firstDayOfWeek,
                    endTime: endTime
                };
            };

            //This can be decomissioned when upgrade to Angular 1.3
            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
                var time = checkDate.getTime();
                checkDate.setMonth(0); // Compare with Jan 1
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            }

            ctrl.refreshView();
        }
    };
}]).directive('dayview', ['dateFilter', '$timeout', function (dateFilter, $timeout) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './build/html/day.html',
        require: '^calendar',
        link: function (scope, element, attrs, ctrl) {
            scope.formatHourColumn = ctrl.formatHourColumn;

            $timeout(function () {
                updateScrollGutter();
            });

            ctrl.mode = {
                step: { days: 1 }
            };

            function updateScrollGutter() {
                var children = element.children();
                var allDayEventBody = children[0].children[1];
                var allDayEventGutterWidth = allDayEventBody.offsetWidth - allDayEventBody.clientWidth;
                var normalEventBody = children[1];
                var normalEventGutterWidth = normalEventBody.offsetWidth - normalEventBody.clientWidth;
                var gutterWidth = allDayEventGutterWidth || normalEventGutterWidth || 0;
                if (gutterWidth > 0) {
                    if (allDayEventGutterWidth <= 0) {
                        scope.allDayEventGutterWidth = gutterWidth;
                    } else {
                        scope.allDayEventGutterWidth = 0;
                    }
                    if (normalEventGutterWidth <= 0) {
                        scope.normalGutterWidth = gutterWidth;
                    } else {
                        scope.normalGutterWidth = 0;
                    }
                }
            }

            function createDateObjects(startTime) {
                var rows = [],
                    time,
                    currentHour = startTime.getHours(),
                    currentDate = startTime.getDate();

                for (var hour = 0; hour < 24; hour += 1) {
                    time = new Date(startTime.getTime());
                    time.setHours(currentHour + hour);
                    time.setDate(currentDate);
                    rows.push({
                        time: time
                    });
                }
                return rows;
            }

            scope.select = function (selectedTime) {
                if (scope.timeSelected) {
                    scope.timeSelected({ selectedTime: selectedTime });
                }
            };

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    allDayEvents = [],
                    oneHour = 3600000,
                    eps = 0.016,
                    eventSet,
                    normalEventInRange = false,
                    hour;

                if (rows.hasEvent) {
                    for (hour = 0; hour < 24; hour += 1) {
                        if (rows[hour].events) {
                            rows[hour].events = null;
                        }
                    }
                    rows.hasEvent = false;
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            allDayEvents.push({
                                event: event
                            });
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            normalEventInRange = true;
                        }

                        var timeDiff;
                        var timeDifferenceStart;
                        if (eventStartTime <= startTime) {
                            timeDifferenceStart = 0;
                        } else {
                            timeDiff = eventStartTime - startTime - (eventStartTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceStart = timeDiff / oneHour;
                        }

                        var timeDifferenceEnd;
                        if (eventEndTime >= endTime) {
                            timeDiff = endTime - startTime - (endTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceEnd = timeDiff / oneHour;
                        } else {
                            timeDiff = eventEndTime - startTime - (eventEndTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceEnd = timeDiff / oneHour;
                        }

                        var startIndex = Math.floor(timeDifferenceStart);
                        var endIndex = Math.ceil(timeDifferenceEnd - eps);

                        var displayEvent = {
                            event: event,
                            startIndex: startIndex,
                            endIndex: endIndex
                        };

                        eventSet = rows[startIndex].events;
                        if (eventSet) {
                            eventSet.push(displayEvent);
                        } else {
                            eventSet = [];
                            eventSet.push(displayEvent);
                            rows[startIndex].events = eventSet;
                        }
                    }
                }

                if (normalEventInRange) {
                    var orderedEvents = [];
                    for (hour = 0; hour < 24; hour += 1) {
                        if (rows[hour].events) {
                            orderedEvents = orderedEvents.concat(rows[hour].events);
                        }
                    }
                    if (orderedEvents.length > 0) {
                        rows.hasEvent = true;
                        ctrl.placeEvents(orderedEvents);
                    }
                }

                scope.allDayEvents = allDayEvents;

                $timeout(function () {
                    updateScrollGutter();
                });
            };

            ctrl._refreshView = function () {
                var startingDate = ctrl.range.startTime;

                scope.rows = createDateObjects(startingDate);
                scope.allDayEvents = [];
                scope.dates = [startingDate];
                scope.$parent.title = dateFilter(startingDate, ctrl.formatDayTitle);
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    date = currentDate.getDate(),
                    startTime = new Date(year, month, date),
                    endTime = new Date(year, month, date + 1);

                return {
                    startTime: startTime,
                    endTime: endTime
                };
            };

            ctrl.refreshView();
        }
    };
}]);
angular.module("template/rcalendar/calendar.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/calendar.html", "<div ng-switch=\"calendarMode\">\n" + "    <div class=\"row calendar-navbar\">\n" + "        <div class=\"nav-left col-xs-2\">\n" + "            <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"move(-1)\"><i\n" + "                    class=\"glyphicon glyphicon-chevron-left\"></i></button>\n" + "        </div>\n" + "        <div class=\"calendar-header col-xs-8\">{{title}}</div>\n" + "        <div class=\"nav-right col-xs-2\">\n" + "            <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"move(1)\"><i\n" + "                    class=\"glyphicon glyphicon-chevron-right\"></i></button>\n" + "        </div>\n" + "    </div>\n" + "    <dayview ng-switch-when=\"day\"></dayview>\n" + "    <monthview ng-switch-when=\"month\"></monthview>\n" + "    <weekview ng-switch-when=\"week\"></weekview>\n" + "</div>\n" + "");
}]);

angular.module("template/rcalendar/day.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/day.html", "<div>\n" + "    <div class=\"dayview-allday-table\">\n" + "        <div class=\"dayview-allday-label\">\n" + "            all day\n" + "        </div>\n" + "        <div class=\"dayview-allday-content-wrapper\">\n" + "            <table class=\"table table-bordered dayview-allday-content-table\">\n" + "                <tbody>\n" + "                <tr>\n" + "                    <td class=\"calendar-cell\" ng-class=\"{'calendar-event-wrap':allDayEvents}\"\n" + "                        ng-style=\"{height: 25*allDayEvents.length+'px'}\">\n" + "                        <div ng-repeat=\"displayEvent in allDayEvents\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{top: 25*$index+'px',width: '100%',height:'25px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </td>\n" + "                    <td ng-if=\"allDayEventGutterWidth>0\" class=\"gutter-column\"\n" + "                        ng-style=\"{width:allDayEventGutterWidth+'px'}\"></td>\n" + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "    <div class=\"scrollable\" style=\"height: 400px\">\n" + "        <table class=\"table table-bordered table-fixed\">\n" + "            <tbody>\n" + "            <tr ng-repeat=\"tm in rows track by $index\">\n" + "                <td class=\"calendar-hour-column text-center\">\n" + "                    {{tm.time | date: formatHourColumn}}\n" + "                </td>\n" + "                <td class=\"calendar-cell\" ng-click=\"select(tm.time)\">\n" + "                    <div ng-class=\"{'calendar-event-wrap': tm.events}\" ng-if=\"tm.events\">\n" + "                        <div ng-repeat=\"displayEvent in tm.events\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+'px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </div>\n" + "                </td>\n" + "            </tr>\n" + "            </tbody>\n" + "        </table>\n" + "    </div>\n" + "</div>");
}]);

angular.module("template/rcalendar/month.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/month.html", "<div>\n" + "    <table class=\"table table-bordered table-fixed monthview-datetable monthview-datetable\">\n" + "        <thead>\n" + "        <tr>\n" + "            <th ng-show=\"showWeeks\" class=\"calendar-week-column text-center\">#</th>\n" + "            <th ng-repeat=\"label in labels track by $index\" class=\"text-center\">\n" + "                <small>{{label}}</small>\n" + "            </th>\n" + "        </tr>\n" + "        </thead>\n" + "        <tbody>\n" + "        <tr ng-repeat=\"row in rows track by $index\">\n" + "            <td ng-show=\"showWeeks\" class=\"calendar-week-column text-center\">\n" + "                <small><em>{{ weekNumbers[$index] }}</em></small>\n" + "            </td>\n" + "            <td ng-repeat=\"dt in row track by dt.date\" class=\"monthview-dateCell\" ng-click=\"select(dt.date)\"\n" + "                ng-class=\"{'text-center':true, 'monthview-current': dt.current&&!dt.selected&&!dt.hasEvent,'monthview-secondary-with-event': dt.secondary&&dt.hasEvent, 'monthview-primary-with-event':!dt.secondary&&dt.hasEvent&&!dt.selected, 'monthview-selected': dt.selected}\">\n" + "                <div ng-class=\"{'text-muted':dt.secondary}\">\n" + "                    {{dt.label}}\n" + "                </div>\n" + "            </td>\n" + "        </tr>\n" + "        </tbody>\n" + "    </table>\n" + "    <div ng-if=\"showEventDetail\" class=\"event-detail-container\">\n" + "        <div class=\"scrollable\" style=\"height: 200px\">\n" + "            <table class=\"table table-bordered table-striped table-fixed\">\n" + "                <tr ng-repeat=\"event in selectedDate.events\" ng-if=\"selectedDate.events\">\n" + "                    <td ng-if=\"!event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{event.startTime|date: 'HH:mm'}}\n" + "                        -\n" + "                        {{event.endTime|date: 'HH:mm'}}\n" + "                    </td>\n" + "                    <td ng-if=\"event.allDay\" class=\"monthview-eventdetail-timecolumn\">All day</td>\n" + "                    <td class=\"event-detail\" ng-click=\"eventSelected({event:event})\">{{event.title}}</td>\n" + "                </tr>\n" + "                <tr ng-if=\"!selectedDate.events\"><td class=\"no-event-label\">No Events</td></tr>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "</div>");
}]);

angular.module("template/rcalendar/week.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/week.html", "<div>\n" + "    <table class=\"table table-bordered table-fixed weekview-header\">\n" + "        <thead>\n" + "        <tr>\n" + "            <th class=\"calendar-hour-column\"></th>\n" + "            <th ng-repeat=\"dt in dates\" class=\"text-center weekview-header-label\">{{dt.date| date:\n" + "                formatWeekViewDayHeader}}\n" + "            </th>\n" + "            <th ng-if=\"gutterWidth>0\" class=\"gutter-column\" ng-style=\"{width: gutterWidth+'px'}\"></th>\n" + "        </tr>\n" + "        </thead>\n" + "    </table>\n" + "    <div class=\"weekview-allday-table\">\n" + "        <div class=\"weekview-allday-label\">\n" + "            all day\n" + "        </div>\n" + "        <div class=\"weekview-allday-content-wrapper\">\n" + "            <table class=\"table table-bordered table-fixed weekview-allday-content-table\">\n" + "                <tbody>\n" + "                <tr>\n" + "                    <td ng-repeat=\"day in dates track by day.date\" class=\"calendar-cell\">\n" + "                        <div ng-class=\"{'calendar-event-wrap': day.events}\" ng-if=\"day.events\"\n" + "                             ng-style=\"{height: 25*day.events.length+'px'}\">\n" + "                            <div ng-repeat=\"displayEvent in day.events\" class=\"calendar-event\"\n" + "                                 ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                                 ng-style=\"{top: 25*displayEvent.position+'px', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+'%', height: '25px'}\">\n" + "                                <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                            </div>\n" + "                        </div>\n" + "                    </td>\n" + "                    <td ng-if=\"allDayEventGutterWidth>0\" class=\"gutter-column\"\n" + "                        ng-style=\"{width: allDayEventGutterWidth+'px'}\"></td>\n" + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "    <div class=\"scrollable\" style=\"height: 400px\">\n" + "        <table class=\"table table-bordered table-fixed\">\n" + "            <tbody>\n" + "            <tr ng-repeat=\"row in rows track by $index\">\n" + "                <td class=\"calendar-hour-column text-center\">\n" + "                    {{row[0].time | date: formatHourColumn}}\n" + "                </td>\n" + "                <td ng-repeat=\"tm in row track by tm.time\" class=\"calendar-cell\" ng-click=\"select(tm.time)\">\n" + "                    <div ng-class=\"{'calendar-event-wrap': tm.events}\" ng-if=\"tm.events\">\n" + "                        <div ng-repeat=\"displayEvent in tm.events\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+'px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </div>\n" + "                </td>\n" + "                <td ng-if=\"normalGutterWidth>0\" class=\"gutter-column\" ng-style=\"{width: normalGutterWidth+'px'}\"></td>\n" + "            </tr>\n" + "            </tbody>\n" + "        </table>\n" + "    </div>\n" + "</div>");
}]);
specialist.factory('dataService', ['$http', function ($http) {
    var signUpDocObj = {};
    return {
        getFullDoctorList: function () {
            return $http.get('http://0.0.0.0:8080/doctor/list').then(function (resp) {
                return resp.data;
            });
        },
        checkUserExistance: function () {},
        signUpDoctor: function (obj) {
            // return $http.post('http://0.0.0.0:8080/doctor/add',obj).then(function(resp){
            // 	return resp;
            // })
            // var obj = {
            //     'sessionId': '23458863',
            //     'docData': { 'name': 'nitin', 'email': 'ntngiri@gmail.com', 'address': 'ksjdnv skvnj', 'city': 'Gurgaon', 'state': 'haryana', 'mob': '70412992873', 'clinic': 'ksjbd', 'fee': '699', 'hv_fee': '7365' }
            // };
            signUpDocObj = obj;
            console.log('dataService', signUpDocObj);
            //return signUpDocObj;
        },
        getDoctorData: function () {
            // return $http.get('http://0.0.0.0:8080/doctor/'+id).then(function(resp){
            // 	return resp.data;
            // });
            return signUpDocObj;
        }
    };
}]);
specialist.controller('docProfileCtrl', ['$scope', 'dataService', function ($scope, dataService) {
    var doctorId = 4;
    // dataService.getDoctorData(doctorId).then(function(data) {
    //     console.log(data);
    //     $scope.doctorData = data[0];
    // });
    $scope.docJson = dataService.getDoctorData();
    console.log('docprofile', docJson);

    $scope.mode = 'week';
    $scope.eventSource = createRandomEvents();
    $scope.selected = 0;
    $scope.select = function (index) {
        $scope.selected = index;
    };
    $scope.navProfileList = [{ 'sref': 'dashboard', 'title': 'Dashboard' }, { 'sref': 'faq', 'title': 'FAQ' }, { 'sref': 'plans', 'title': 'Pricing Plans' }, { 'sref': 'profile', 'title': 'User Account' }];

    function createRandomEvents() {
        var events = [];
        for (var i = 0; i < 50; i += 1) {
            var date = new Date();
            var eventType = Math.floor(Math.random() * 2);
            var startDay = Math.floor(Math.random() * 90) - 45;
            var endDay = Math.floor(Math.random() * 2) + startDay;
            var startTime;
            var endTime;
            if (eventType === 0) {
                startTime = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate() + startDay));
                if (endDay === startDay) {
                    endDay += 1;
                }
                endTime = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate() + endDay));
                events.push({
                    title: 'All Day - ' + i,
                    startTime: startTime,
                    endTime: endTime,
                    allDay: true
                });
            } else {
                var startMinute = Math.floor(Math.random() * 24 * 60);
                var endMinute = Math.floor(Math.random() * 180) + startMinute;
                startTime = new Date(date.getFullYear(), date.getMonth(), date.getDate() + startDay, 0, date.getMinutes() + startMinute);
                endTime = new Date(date.getFullYear(), date.getMonth(), date.getDate() + endDay, 0, date.getMinutes() + endMinute);
                events.push({
                    title: i + 'Mr Nitin',
                    startTime: startTime,
                    endTime: endTime,
                    allDay: false
                });
            }
        }
        return events;
    }
}]);
specialist.controller('docSignupCtrl', ['$scope', '$state', 'dataService', function ($scope, $state, dataService) {
	$scope.secondForm = false;
	$scope.firstForm = true;
	$scope.email_err = false;
	$scope.pwd_err = false;
	$scope.err_msg = false;
	$scope.mobileRegEx = "/^[0-9]{10,10}$/;";
	$scope.pinCodeRegEx = "/^[0-9]{6,6}$/;";
	var signUpData = {};
	$scope.checkEmailPwdValidity = function (value) {
		if (value == 'email') {
			if ($scope.email !== $scope.confEmail) {
				$scope.email_err = true;
				$scope.email_err_msg = 'Email did not match';
			} else {
				$scope.email_err = false;
				$scope.email_err_msg = '';
			}
		} else if (value == 'pwd') {
			if ($scope.pass !== $scope.confPass) {
				$scope.pass_err = true;
			} else {
				$scope.pass_err = false;
			}
		}
	};
	$scope.bringSecondForm = function (isValid) {
		if (isValid) {
			$scope.err_msg = false;
			signUpData.name = $scope.fname + " " + $scope.lname;
			if ($scope.email == $scope.confEmail) {
				signUpData.email = $scope.email;
			} else {
				$scope.email_err = true;
			}
			if ($scope.pass == $scope.confPass) {
				signUpData.password = $scope.pass;
			} else {
				$scope.pass_err = true;
			}
			if (!$scope.pass_err && !$scope.email_err) {
				$scope.secondForm = true;
				$scope.firstForm = false;
			}
		} else if (!isValid) {
			$scope.err_msg = true;
		}
	};

	$scope.sendSignupDoc = function (isValid) {
		if (isValid) {
			$scope.err_msg = false;
			signUpData.address = $scope.address1 + ' ' + $scope.address2;
			signUpData.pin = $scope.pinCode;
			signUpData.city = $scope.city;
			signUpData.state = $scope.state;
			signUpData.mobile = $scope.mobileNo;
			signUpData.clinic_name = $scope.clinicName;
			signUpData.fee = $scope.clinicFee;
			signUpData.hv_fee = $scope.homeVisit;
			dataService.signUpDoctor(signUpData);
			$state.go('doctorProfile.dashboard'); //to be removed
			// dataService.signUpDoctor(signUpData).then(function(resp){
			// 	$state.go('doctorProfile.dashboard');
			// });
		} else if (!isValid) {
			$scope.err_msg = true;
		}
	};
}]);
specialist.controller('doctorPortalCtrl', ['$scope', function ($scope) {}]);
angular.module('specialist.tagit', []).directive('tagIt', function () {
    return {
        restrict: 'EA',
        scope: {
            tags: "=",
            remove: "&"
        },
        template: '<div><ul class="tags"><li  class="tagit" ng-repeat="tag in tags "><span class="tagText">{{::tag.name}}</span><a  ng-click="remove({idx:tag.id})" class="dCross" href="javascript:;">x</a></li></ul></div>',

        link: function ($scope, $element, $attrs, $ctrl) {
            // console.log($scope, $attrs);
        }
    };
});

angular.module('specialist.listing', []).directive('ngRepeatDoneNotification', function () {
    return function (scope, element, attrs) {

        if (!scope.$parent.multiSelect) {

            if (scope.selectedId && scope.selectedId.length != 0 && scope.$last && !scope.$parent.firstReapet) {
                scope.$parent.firstReapet = 1;
                scope.callback({
                    'item': {
                        id: scope.selectedId[0],
                        name: scope.data[scope.idHash.indexOf(scope.selectedId[0])].name,
                        allSelected: scope.selectedId,
                        checked: null,
                        first: true
                    }
                });
            }
        }
        //console.log(scope.$parent.idHash);
    };
}).directive('listing', function () {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        scope: {
            'data': '=',
            'tupleCount': '@',
            'selectedId': '=',
            'maxHeight': '@',
            'callback': '&listingCallback',
            'multiSelect': '@',
            'filterName': "=",
            'active': '='
        },

        //template: '<ul><li ng-repeat="item in data|limitTo:tupleCount" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)"><input ng-if="multiSelect" type="checkbox" ng-model=item.checked><div style="display:inline-block;" ng-transclude></div></li></ul>',
        template: '<ul><li ng-repeat="item in data" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)" ng-class="{active:item.active, notSelectable:item.notSelectable}"><input ng-if="multiSelect == \'true\' && !item.notSelectable" type="checkbox" ng-model=item.checked>{{selectedName}}<div style="display:inline-block; width:auto;" ng-transclude></div></li></ul>',

        link: function (scope, iElement, iAttr, controllers) {
            scope.firstReapet = 0;
            scope.selObj = {};
            scope.idHash = [];
            if (scope.data) {
                scope.data.forEach(function (x) {
                    scope.idHash.push(x.id);
                });
            }
            scope.$on('select', function (event, someData, flag) {
                var elemToSel;
                if (flag) {
                    elemToSel = scope.data[scope.idHash.indexOf(flag)];
                } else {
                    elemToSel = scope.data[scope.active];
                }

                scope.checkItem({
                    'item': elemToSel
                });
            });
            scope.$on('deSelect', function (event, id) {});

            scope.isActive = function (matchIdx) {
                if (scope.active < iElement.find('li').length) {
                    return scope.active === matchIdx;
                } else {
                    scope.active = 0;
                    //  return scope.active === matchIdx;
                }
            };

            scope.checkItem = function (_this) {
                var arr = [];
                scope.attr = iAttr;

                if (_this.item.notSelectable) {
                    //iElement.addClass('notSelectable');
                    return;
                }

                scope.checkSelection(_this);

                scope.callback({
                    'item': {
                        id: _this.item.id,
                        name: _this.item.name,
                        allSelected: scope.selectedId,
                        checked: _this.item.checked
                    }
                });
            };

            scope.checkSelection = function (t) {
                // array and selectedId will be the same after this, 
                var id = t.item.id;
                scope.selectedId = scope.selectedId || [];
                if (scope.attr.multiSelect) {
                    var index = scope.selectedId.indexOf(id);
                    if (index == -1) {
                        scope.selectedId.push(id);
                        scope.selObj[id] = t.item.name;
                        t.item.checked = true;
                    } else {
                        scope.selectedId.splice(index, 1);
                        delete scope.selObj[id];
                        t.item.checked = false;
                    }
                } else {
                    scope.selectedId = [];
                    scope.selectedId.push(id);
                    //t.item.checked = true;
                }
            };
        }
    };
});

angular.module('specialist.droope', ['specialist.listing', 'specialist.tagit']).directive('droope', ["$document", function ($document) {
    // Runs during compile
    return {
        scope: {
            option: "=",
            callback: "&droopeCallback",
            data: "=",
            selectedId: "=",
            api: "="
        },
        // controller: function($scope, $element, $attrs, $transclude) {},
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        template: '<div class="ddwn">' + '<div class="DDwrap">' + '<ul class="DDsearch">' + '<li class="frst" style="float: none;">' + '<div class="DDinputWrap">' + '<span class="ddIcon srchTxt" ng-click="showDrop()"></span>' + '<input type="text" ng-click="showDrop()" id="" class="srchTxt" autocomplete="off" style="color: rgb(68, 68, 68);" ng-model="selectedName">' + '</div>' + '</li>' + '</ul>' + '</div>' + '<div class="dd_dwn" ng-show="show">' + '<listing tuplecount="10" multi-select="{{option.multiselect}}" active="activeIndex" selected-id ="selectedId" listing-callback="listingCallback(item)" data="data" filter-name="selectedName">' + '<div><span>{{$parent.item.name}}</span></div>' + '</listing>' + '</div>' + '</div>',
        replace: true,
        transclude: true,
        compile: function (tElement, tAttrs) {
            var __options__ = {
                fieldAttr: {
                    placeholder: 'Enter your Values'
                }

            };
            return function linking(scope, iElm, iAttrs, controller) {
                scope.activeIndex = 0;
                //console.log(iElm);
                //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
                iElm.find('input').on('keydown', function (evt) {
                    var target;
                    switch (evt.which) {
                        case 8:
                            if (scope.selectedName == "") {
                                scope.show = true;
                            }
                            scope.$digest();
                            break;
                        case 9:
                            scope.blurOut();
                            break;
                        case 13:
                            evt.stopPropagation();
                            scope.$broadcast('select', this);
                            scope.$digest();
                            break;
                        case 38:
                            scope.data[scope.activeIndex].active = false;
                            scope.activeIndex--;
                            scope.data[scope.activeIndex].active = true;
                            scope.$digest();
                            break;
                        case 40:
                            scope.data[scope.activeIndex].active = false;
                            scope.activeIndex++;
                            scope.data[scope.activeIndex].active = true;
                            scope.$digest();
                            break;
                    }
                });
                scope.options = angular.merge(__options__, scope.option);
                scope.tags = [];
                iElm.find('input').attr(scope.options.fieldAttr);
                /**
                 * [function called on list click- after listing callback]
                 * @param  {[type]} retObj [object from listing callback]
                 * @return {[type]}      [tags object updated]
                 */
                scope.api = {
                    resetDroope: function () {
                        //scope.active = -1;
                        scope.selectedName = "", scope.selectedId = [];
                    },
                    selectItem: function (id) {
                        if (Object.prototype.toString.call(id) === '[object Array]') {
                            scope.$broadcast('select', this, id);
                        } else {
                            scope.$broadcast('select', this, id);
                        }
                    }
                };
                scope.listingCallback = function (retObj) {
                    var newTag = {
                        id: retObj.id,
                        name: retObj.name
                    };
                    scope.tagUpdate(newTag, retObj.checked);
                };

                scope.tagUpdate = function (tagObj, checked) {
                    if (scope.option.multiselect) {
                        if (checked) {
                            scope.tags.push(tagObj);
                        } else {
                            var index = scope.tags.indexOf(tagObj);
                            scope.tags.splice(index, 1);
                        }
                    } else {
                        scope.selectedName = tagObj.name;
                        scope.show = false;
                        scope.callback({
                            "item": tagObj
                        });
                    }

                    if (event) {
                        event.stopPropagation();
                    }
                };
                /**
                 * [called on input focus - will show the list]
                 */
                scope.showDrop = function () {
                    // if (scope.option.multiselect) {

                    // } else {
                    scope.lastSelected = scope.selectedName;
                    scope.selectedName = '';
                    scope.show = true;
                    //}
                    // var parElm = document.getElementById('meraDD');
                    // var scrollCont = document.getElementById('dd_dwn');
                    // var fstElm = document.getElementById('dd_dwn').getElementsByTagName("li")[0];
                    // scope.scrollHandler(parElm, scrollCont, fstElm, fstElm);
                };

                /**
                 * [removing all tags]
                 */
                scope.removeAllTags = function () {
                    scope.tags = [];
                    if (scope.option.multiselect) {
                        for (i = 0; i < scope.selectedId.length; i++) {
                            var index = scope.data.indexOf(scope.selectedId[i]);
                            scope.data[index].checked = false;
                        }
                    } else {
                        scope.selectedName = '';
                    }
                };

                scope.blurOut = function () {
                    var blurObj = {
                        id: "",
                        name: scope.selectedName,
                        checked: 'no'
                        //  scope.show = true;
                    };
                    scope.listingCallback(blurObj);
                };
                /**
                 * [hide list drop on document click]
                 */
                $document.on("click", function (event) {
                    if (!angular.element(event.target).hasClass('srchTxt')) {
                        scope.show = false;
                        if (scope.selectedName == "") {
                            scope.selectedName = scope.lastSelected;
                        }
                        //  scope.blurOut();
                    } else {}
                    scope.$apply();
                });
            };
        }
    };
}]);
specialist.controller('mainController', ['$scope', function ($scope) {
	var json = [{ 'name': 'Delhi' }, { 'name': 'Noida' }, { 'name': 'Gurgaon' }];
	$scope.options = {};
	$scope.options = {
		data: json,
		multiselect: true,
		maxHeight: 250
	};
	$scope.data = [{ 'name': 'Delhi' }, { 'name': 'Noida' }, { 'name': 'Gurgaon' }];
	$scope.selectedId = [];
	$scope.onClickFunc = function (obj1) {
		//$scope.cbObj = obj;
		console.log(obj1);
	};
	$scope.api = {};
}]);
specialist.controller('SearchCtrl', ['$scope', 'dataService', function ($scope, dataService) {
	dataService.getFullDoctorList().then(function (data) {
		console.log(data);
		$scope.doctorList = data;
	});
}]);
//# sourceMappingURL=data:application/json;base64,
