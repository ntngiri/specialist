var specialist = angular.module('specialist', ['ui.router']).config(['$stateProvider', '$locationProvider', '$urlRouterProvider', function ($stateProvider, $locationProvider, $urlRouterProvider) {
	$urlRouterProvider.otherwise('/');
	$stateProvider.state('home', {
		url: '/',
		templateUrl: './build/html/main.html',
		controller: 'mainController'
	}).state('search', {
		url: '/search',
		templateUrl: './build/html/search.html',
		controller: 'SearchCtrl'
	}).state('doctorPortal', {
		url: '/doctorPortal',
		templateUrl: './build/html/doctorPortal.html',
		controller: 'doctorPortalCtrl'
	}).state('ques', {
		url: '/ques',
		templateUrl: './build/html/quesans.html'
	}).state('docSignup', {
		url: '/docSignup',
		templateUrl: './build/html/docSignup.html',
		controller: 'docSignupCtrl'
	}).state('doctorProfile', {
		url: '/doctorProfile',
		templateUrl: './build/html/docProfile.html',
		controller: 'docProfileCtrl',
		abstract: true
	}).state('doctorProfile.dashboard', {
		url: '',
		templateUrl: './build/html/docprofileDashboard.html'
	}).state('doctorProfile.faq', {
		url: '/faq',
		templateUrl: './build/html/docFaq.html'
	}).state('doctorProfile.plans', {
		url: '/plans',
		templateUrl: './build/html/docPlans.html'
	}).state('doctorProfile.profile', {
		url: '/profile',
		templateUrl: './build/html/docUserProfile.html'
	}).state('doctor', {
		url: '/doctor',
		templateUrl: './build/html/docBooking.html'
	});
	$locationProvider.html5Mode(true);
}]);
//angular.module("ui.rCalendar.tpls", ["../template/rcalendar/calender.html","../template/rcalendar/day.html","../template/rcalendar/month.html","../template/rcalendar/week.html"]);
//angular.module('ui.rCalendar', [])
specialist.constant('calendarConfig', {
    formatDay: 'dd',
    formatDayHeader: 'EEE',
    formatDayTitle: 'MMMM dd, yyyy',
    formatWeekTitle: 'MMMM yyyy, Week w',
    formatMonthTitle: 'MMMM yyyy',
    formatWeekViewDayHeader: 'EEE d',
    formatHourColumn: 'ha',
    calendarMode: 'month',
    showWeeks: false,
    showEventDetail: true,
    startingDay: 0,
    eventSource: null,
    queryMode: 'local'
}).controller('ui.rCalendar.CalendarController', ['$scope', '$attrs', '$parse', '$interpolate', '$log', 'dateFilter', 'calendarConfig', function ($scope, $attrs, $parse, $interpolate, $log, dateFilter, calendarConfig) {
    'use strict';

    var self = this,
        ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

    // Configuration attributes
    angular.forEach(['formatDay', 'formatDayHeader', 'formatDayTitle', 'formatWeekTitle', 'formatMonthTitle', 'formatWeekViewDayHeader', 'formatHourColumn', 'showWeeks', 'showEventDetail', 'startingDay', 'eventSource', 'queryMode'], function (key, index) {
        self[key] = angular.isDefined($attrs[key]) ? index < 7 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key]) : calendarConfig[key];
    });

    $scope.$parent.$watch($attrs.eventSource, function (value) {
        self.onEventSourceChanged(value);
    });

    $scope.calendarMode = $scope.calendarMode || calendarConfig.calendarMode;
    if (angular.isDefined($attrs.initDate)) {
        self.currentCalendarDate = $scope.$parent.$eval($attrs.initDate);
    }
    if (!self.currentCalendarDate) {
        self.currentCalendarDate = new Date();
        if ($attrs.ngModel && !$scope.$parent.$eval($attrs.ngModel)) {
            $parse($attrs.ngModel).assign($scope.$parent, self.currentCalendarDate);
        }
    }

    self.init = function (ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;

        ngModelCtrl.$render = function () {
            self.render();
        };
    };

    self.render = function () {
        if (ngModelCtrl.$modelValue) {
            var date = new Date(ngModelCtrl.$modelValue),
                isValid = !isNaN(date);

            if (isValid) {
                this.currentCalendarDate = date;
            } else {
                $log.error('"ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
            }
            ngModelCtrl.$setValidity('date', isValid);
        }
        this.refreshView();
    };

    self.refreshView = function () {
        if (this.mode) {
            this.range = this._getRange(this.currentCalendarDate);
            this._refreshView();
            this.rangeChanged();
        }
    };

    // Split array into smaller arrays
    self.split = function (arr, size) {
        var arrays = [];
        while (arr.length > 0) {
            arrays.push(arr.splice(0, size));
        }
        return arrays;
    };

    self.onEventSourceChanged = function (value) {
        self.eventSource = value;
        if (self._onDataLoaded) {
            self._onDataLoaded();
        }
    };

    $scope.move = function (direction) {
        var step = self.mode.step,
            currentCalendarDate = self.currentCalendarDate,
            year = currentCalendarDate.getFullYear() + direction * (step.years || 0),
            month = currentCalendarDate.getMonth() + direction * (step.months || 0),
            date = currentCalendarDate.getDate() + direction * (step.days || 0),
            firstDayInNextMonth;

        currentCalendarDate.setFullYear(year, month, date);
        if ($scope.calendarMode === 'month') {
            firstDayInNextMonth = new Date(year, month + 1, 1);
            if (firstDayInNextMonth.getTime() <= currentCalendarDate.getTime()) {
                self.currentCalendarDate = new Date(firstDayInNextMonth - 24 * 60 * 60 * 1000);
            }
        }
        ngModelCtrl.$setViewValue(self.currentCalendarDate);
        self.refreshView();
    };

    self.move = function (direction) {
        $scope.move(direction);
    };

    self.rangeChanged = function () {
        if (self.queryMode === 'local') {
            if (self.eventSource && self._onDataLoaded) {
                self._onDataLoaded();
            }
        } else if (self.queryMode === 'remote') {
            if ($scope.rangeChanged) {
                $scope.rangeChanged({
                    startTime: this.range.startTime,
                    endTime: this.range.endTime
                });
            }
        }
    };

    function overlap(event1, event2) {
        return !(event1.endIndex <= event2.startIndex || event2.endIndex <= event1.startIndex);
    }

    function calculatePosition(events) {
        var i,
            j,
            len = events.length,
            maxColumn = 0,
            col,
            isForbidden = new Array(len);

        for (i = 0; i < len; i += 1) {
            for (col = 0; col < maxColumn; col += 1) {
                isForbidden[col] = false;
            }
            for (j = 0; j < i; j += 1) {
                if (overlap(events[i], events[j])) {
                    isForbidden[events[j].position] = true;
                }
            }
            for (col = 0; col < maxColumn; col += 1) {
                if (!isForbidden[col]) {
                    break;
                }
            }
            if (col < maxColumn) {
                events[i].position = col;
            } else {
                events[i].position = maxColumn++;
            }
        }
    }

    function calculateWidth(orderedEvents) {
        var cells = new Array(24),
            event,
            index,
            i,
            j,
            len,
            eventCountInCell,
            currentEventInCell;

        //sort by position in descending order, the right most columns should be calculated first
        orderedEvents.sort(function (eventA, eventB) {
            return eventB.position - eventA.position;
        });
        for (i = 0; i < 24; i += 1) {
            cells[i] = {
                calculated: false,
                events: []
            };
        }
        len = orderedEvents.length;
        for (i = 0; i < len; i += 1) {
            event = orderedEvents[i];
            index = event.startIndex;
            while (index < event.endIndex) {
                cells[index].events.push(event);
                index += 1;
            }
        }

        i = 0;
        while (i < len) {
            event = orderedEvents[i];
            if (!event.overlapNumber) {
                var overlapNumber = event.position + 1;
                event.overlapNumber = overlapNumber;
                var eventQueue = [event];
                while (event = eventQueue.shift()) {
                    index = event.startIndex;
                    while (index < event.endIndex) {
                        if (!cells[index].calculated) {
                            cells[index].calculated = true;
                            if (cells[index].events) {
                                eventCountInCell = cells[index].events.length;
                                for (j = 0; j < eventCountInCell; j += 1) {
                                    currentEventInCell = cells[index].events[j];
                                    if (!currentEventInCell.overlapNumber) {
                                        currentEventInCell.overlapNumber = overlapNumber;
                                        eventQueue.push(currentEventInCell);
                                    }
                                }
                            }
                        }
                        index += 1;
                    }
                }
            }
            i += 1;
        }
    }

    self.placeEvents = function (orderedEvents) {
        calculatePosition(orderedEvents);
        calculateWidth(orderedEvents);
    };

    self.placeAllDayEvents = function (orderedEvents) {
        calculatePosition(orderedEvents);
    };
}]).directive('calendar', function () {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './specialist/build/html/calender.html',
        scope: {
            calendarMode: '=',
            rangeChanged: '&',
            eventSelected: '&',
            timeSelected: '&'
        },
        require: ['calendar', '?^ngModel'],
        controller: 'ui.rCalendar.CalendarController',
        link: function (scope, element, attrs, ctrls) {
            var calendarCtrl = ctrls[0],
                ngModelCtrl = ctrls[1];

            if (ngModelCtrl) {
                calendarCtrl.init(ngModelCtrl);
            }

            scope.$on('changeDate', function (event, direction) {
                calendarCtrl.move(direction);
            });

            scope.$on('eventSourceChanged', function (event, value) {
                calendarCtrl.onEventSourceChanged(value);
            });
        }
    };
}).directive('monthview', ['dateFilter', function (dateFilter) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './specialist/build/html/month.html',
        require: ['^calendar', '?^ngModel'],
        link: function (scope, element, attrs, ctrls) {
            var ctrl = ctrls[0],
                ngModelCtrl = ctrls[1];
            scope.showWeeks = ctrl.showWeeks;
            scope.showEventDetail = ctrl.showEventDetail;

            ctrl.mode = {
                step: { months: 1 }
            };

            function getDates(startDate, n) {
                var dates = new Array(n),
                    current = new Date(startDate),
                    i = 0;
                current.setHours(12); // Prevent repeated dates because of timezone bug
                while (i < n) {
                    dates[i++] = new Date(current);
                    current.setDate(current.getDate() + 1);
                }
                return dates;
            }

            scope.select = function (selectedDate) {
                var rows = scope.rows;
                if (rows) {
                    var currentCalendarDate = ctrl.currentCalendarDate;
                    var currentMonth = currentCalendarDate.getMonth();
                    var currentYear = currentCalendarDate.getFullYear();
                    var selectedMonth = selectedDate.getMonth();
                    var selectedYear = selectedDate.getFullYear();
                    var direction = 0;
                    if (currentYear === selectedYear) {
                        if (currentMonth !== selectedMonth) {
                            direction = currentMonth < selectedMonth ? 1 : -1;
                        }
                    } else {
                        direction = currentYear < selectedYear ? 1 : -1;
                    }

                    ctrl.currentCalendarDate = selectedDate;
                    if (ngModelCtrl) {
                        ngModelCtrl.$setViewValue(selectedDate);
                    }
                    if (direction === 0) {
                        for (var row = 0; row < 6; row += 1) {
                            for (var date = 0; date < 7; date += 1) {
                                var selected = ctrl.compare(selectedDate, rows[row][date].date) === 0;
                                rows[row][date].selected = selected;
                                if (selected) {
                                    scope.selectedDate = rows[row][date];
                                }
                            }
                        }
                    } else {
                        ctrl.refreshView();
                    }

                    if (scope.timeSelected) {
                        scope.timeSelected({ selectedTime: selectedDate });
                    }
                }
            };

            ctrl._refreshView = function () {
                var startDate = ctrl.range.startTime,
                    date = startDate.getDate(),
                    month = (startDate.getMonth() + (date !== 1 ? 1 : 0)) % 12,
                    year = startDate.getFullYear() + (date !== 1 && month === 0 ? 1 : 0);

                var days = getDates(startDate, 42);
                for (var i = 0; i < 42; i++) {
                    days[i] = angular.extend(createDateObject(days[i], ctrl.formatDay), {
                        secondary: days[i].getMonth() !== month
                    });
                }

                scope.labels = new Array(7);
                for (var j = 0; j < 7; j++) {
                    scope.labels[j] = dateFilter(days[j].date, ctrl.formatDayHeader);
                }

                var headerDate = new Date(year, month, 1);
                scope.$parent.title = dateFilter(headerDate, ctrl.formatMonthTitle);
                scope.rows = ctrl.split(days, 7);

                if (scope.showWeeks) {
                    scope.weekNumbers = [];
                    var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,
                        numWeeks = scope.rows.length;
                    for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
                        scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
                    }
                }
            };

            function createDateObject(date, format) {
                return {
                    date: date,
                    label: dateFilter(date, format),
                    selected: ctrl.compare(date, ctrl.currentCalendarDate) === 0,
                    current: ctrl.compare(date, new Date()) === 0
                };
            }

            function compareEvent(event1, event2) {
                if (event1.allDay) {
                    return 1;
                } else if (event2.allDay) {
                    return -1;
                } else {
                    return event1.startTime.getTime() - event2.startTime.getTime();
                }
            }

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    oneDay = 86400000,
                    eps = 0.001,
                    row,
                    date,
                    hasEvent = false;

                if (rows.hasEvent) {
                    for (row = 0; row < 6; row += 1) {
                        for (date = 0; date < 7; date += 1) {
                            if (rows[row][date].hasEvent) {
                                rows[row][date].events = null;
                                rows[row][date].hasEvent = false;
                            }
                        }
                    }
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);
                    var st;
                    var et;

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            st = utcStartTime;
                            et = utcEndTime;
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            st = startTime;
                            et = endTime;
                        }
                    }

                    var timeDiff;
                    var timeDifferenceStart;
                    if (eventStartTime <= st) {
                        timeDifferenceStart = 0;
                    } else {
                        timeDiff = eventStartTime - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (eventStartTime.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceStart = timeDiff / oneDay;
                    }

                    var timeDifferenceEnd;
                    if (eventEndTime >= et) {
                        timeDiff = et - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (et.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceEnd = timeDiff / oneDay;
                    } else {
                        timeDiff = eventEndTime - st;
                        if (!event.allDay) {
                            timeDiff = timeDiff - (eventEndTime.getTimezoneOffset() - st.getTimezoneOffset()) * 60000;
                        }
                        timeDifferenceEnd = timeDiff / oneDay;
                    }

                    var index = Math.floor(timeDifferenceStart);
                    var eventSet;
                    while (index < timeDifferenceEnd - eps) {
                        var rowIndex = Math.floor(index / 7);
                        var dayIndex = Math.floor(index % 7);
                        rows[rowIndex][dayIndex].hasEvent = true;
                        eventSet = rows[rowIndex][dayIndex].events;
                        if (eventSet) {
                            eventSet.push(event);
                        } else {
                            eventSet = [];
                            eventSet.push(event);
                            rows[rowIndex][dayIndex].events = eventSet;
                        }
                        index += 1;
                    }
                }

                for (row = 0; row < 6; row += 1) {
                    for (date = 0; date < 7; date += 1) {
                        if (rows[row][date].hasEvent) {
                            hasEvent = true;
                            rows[row][date].events.sort(compareEvent);
                        }
                    }
                }
                rows.hasEvent = hasEvent;

                var findSelected = false;
                for (row = 0; row < 6; row += 1) {
                    for (date = 0; date < 7; date += 1) {
                        if (rows[row][date].selected) {
                            scope.selectedDate = rows[row][date];
                            findSelected = true;
                            break;
                        }
                    }
                    if (findSelected) {
                        break;
                    }
                }
            };

            ctrl.compare = function (date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    firstDayOfMonth = new Date(year, month, 1),
                    difference = ctrl.startingDay - firstDayOfMonth.getDay(),
                    numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference,
                    startDate = new Date(firstDayOfMonth),
                    endDate;

                if (numDisplayedFromPreviousMonth > 0) {
                    startDate.setDate(-numDisplayedFromPreviousMonth + 1);
                }

                endDate = new Date(startDate);
                endDate.setDate(endDate.getDate() + 42);

                return {
                    startTime: startDate,
                    endTime: endDate
                };
            };

            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
                var time = checkDate.getTime();
                checkDate.setMonth(0); // Compare with Jan 1
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            }

            ctrl.refreshView();
        }
    };
}]).directive('weekview', ['dateFilter', '$timeout', function (dateFilter, $timeout) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './specialist/build/html/week.html',
        require: '^calendar',
        link: function (scope, element, attrs, ctrl) {
            scope.formatWeekViewDayHeader = ctrl.formatWeekViewDayHeader;
            scope.formatHourColumn = ctrl.formatHourColumn;

            $timeout(function () {
                updateScrollGutter();
            });

            ctrl.mode = {
                step: { days: 7 }
            };

            function updateScrollGutter() {
                var children = element.children();
                var allDayEventBody = children[1].children[1];
                var allDayEventGutterWidth = allDayEventBody.offsetWidth - allDayEventBody.clientWidth;
                var normalEventBody = children[2];
                var normalEventGutterWidth = normalEventBody.offsetWidth - normalEventBody.clientWidth;
                var gutterWidth = allDayEventGutterWidth || normalEventGutterWidth || 0;
                if (gutterWidth > 0) {
                    scope.gutterWidth = gutterWidth;
                    if (allDayEventGutterWidth <= 0) {
                        scope.allDayEventGutterWidth = gutterWidth;
                    } else {
                        scope.allDayEventGutterWidth = 0;
                    }
                    if (normalEventGutterWidth <= 0) {
                        scope.normalGutterWidth = gutterWidth;
                    } else {
                        scope.normalGutterWidth = 0;
                    }
                }
            }

            function getDates(startTime, n) {
                var dates = new Array(n),
                    current = new Date(startTime),
                    i = 0;
                current.setHours(12); // Prevent repeated dates because of timezone bug
                while (i < n) {
                    dates[i++] = {
                        date: new Date(current)
                    };
                    current.setDate(current.getDate() + 1);
                }
                return dates;
            }

            function createDateObjects(startTime) {
                var times = [],
                    row,
                    time,
                    currentHour = startTime.getHours(),
                    currentDate = startTime.getDate();

                for (var hour = 0; hour < 24; hour += 1) {
                    row = [];
                    for (var day = 0; day < 7; day += 1) {
                        time = new Date(startTime.getTime());
                        time.setHours(currentHour + hour);
                        time.setDate(currentDate + day);
                        row.push({
                            time: time
                        });
                    }
                    times.push(row);
                }
                return times;
            }

            scope.select = function (selectedTime) {
                if (scope.timeSelected) {
                    scope.timeSelected({ selectedTime: selectedTime });
                }
            };

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    dates = scope.dates,
                    oneHour = 3600000,
                    oneDay = 86400000,

                //add allday eps
                eps = 0.016,
                    eventSet,
                    allDayEventInRange = false,
                    normalEventInRange = false,
                    day,
                    hour;

                if (rows.hasEvent) {
                    for (day = 0; day < 7; day += 1) {
                        for (hour = 0; hour < 24; hour += 1) {
                            if (rows[hour][day].events) {
                                rows[hour][day].events = null;
                            }
                        }
                    }
                    rows.hasEvent = false;
                }

                if (dates.hasEvent) {
                    for (day = 0; day < 7; day += 1) {
                        if (dates[day].events) {
                            dates[day].events = null;
                        }
                    }
                    dates.hasEvent = false;
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            allDayEventInRange = true;

                            var allDayStartIndex;
                            if (eventStartTime <= utcStartTime) {
                                allDayStartIndex = 0;
                            } else {
                                allDayStartIndex = Math.floor((eventStartTime - utcStartTime) / oneDay);
                            }

                            var allDayEndIndex;
                            if (eventEndTime >= utcEndTime) {
                                allDayEndIndex = Math.ceil((utcEndTime - utcStartTime) / oneDay);
                            } else {
                                allDayEndIndex = Math.ceil((eventEndTime - utcStartTime) / oneDay);
                            }

                            var displayAllDayEvent = {
                                event: event,
                                startIndex: allDayStartIndex,
                                endIndex: allDayEndIndex
                            };

                            eventSet = dates[allDayStartIndex].events;
                            if (eventSet) {
                                eventSet.push(displayAllDayEvent);
                            } else {
                                eventSet = [];
                                eventSet.push(displayAllDayEvent);
                                dates[allDayStartIndex].events = eventSet;
                            }
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            normalEventInRange = true;

                            var timeDiff;
                            var timeDifferenceStart;
                            if (eventStartTime <= startTime) {
                                timeDifferenceStart = 0;
                            } else {
                                timeDiff = eventStartTime - startTime - (eventStartTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceStart = timeDiff / oneHour;
                            }

                            var timeDifferenceEnd;
                            if (eventEndTime >= endTime) {
                                timeDiff = endTime - startTime - (endTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceEnd = timeDiff / oneHour;
                            } else {
                                timeDiff = eventEndTime - startTime - (eventEndTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                                timeDifferenceEnd = timeDiff / oneHour;
                            }

                            var startIndex = Math.floor(timeDifferenceStart);
                            var endIndex = Math.ceil(timeDifferenceEnd - eps);
                            var startRowIndex = startIndex % 24;
                            var dayIndex = Math.floor(startIndex / 24);
                            var endOfDay = dayIndex * 24;
                            var endRowIndex;

                            do {
                                endOfDay += 24;
                                if (endOfDay <= endIndex) {
                                    endRowIndex = 24;
                                } else {
                                    endRowIndex = endIndex % 24;
                                }
                                var displayEvent = {
                                    event: event,
                                    startIndex: startRowIndex,
                                    endIndex: endRowIndex
                                };
                                eventSet = rows[startRowIndex][dayIndex].events;
                                if (eventSet) {
                                    eventSet.push(displayEvent);
                                } else {
                                    eventSet = [];
                                    eventSet.push(displayEvent);
                                    rows[startRowIndex][dayIndex].events = eventSet;
                                }
                                startRowIndex = 0;
                                dayIndex += 1;
                            } while (endOfDay < endIndex);
                        }
                    }
                }

                if (normalEventInRange) {
                    for (day = 0; day < 7; day += 1) {
                        var orderedEvents = [];
                        for (hour = 0; hour < 24; hour += 1) {
                            if (rows[hour][day].events) {
                                orderedEvents = orderedEvents.concat(rows[hour][day].events);
                            }
                        }
                        if (orderedEvents.length > 0) {
                            rows.hasEvent = true;
                            ctrl.placeEvents(orderedEvents);
                        }
                    }
                }

                if (allDayEventInRange) {
                    var orderedAllDayEvents = [];
                    for (day = 0; day < 7; day += 1) {
                        if (dates[day].events) {
                            orderedAllDayEvents = orderedAllDayEvents.concat(dates[day].events);
                        }
                    }
                    if (orderedAllDayEvents.length > 0) {
                        dates.hasEvent = true;
                        ctrl.placeAllDayEvents(orderedAllDayEvents);
                    }
                }

                $timeout(function () {
                    updateScrollGutter();
                });
            };

            ctrl._refreshView = function () {
                var firstDayOfWeek = ctrl.range.startTime,
                    dates = getDates(firstDayOfWeek, 7),
                    weekNumberIndex,
                    weekFormatPattern = 'w',
                    title;

                scope.rows = createDateObjects(firstDayOfWeek);
                scope.dates = dates;
                weekNumberIndex = ctrl.formatWeekTitle.indexOf(weekFormatPattern);
                title = dateFilter(firstDayOfWeek, ctrl.formatWeekTitle);
                if (weekNumberIndex !== -1) {
                    title = title.replace(weekFormatPattern, getISO8601WeekNumber(firstDayOfWeek));
                }
                scope.$parent.title = title;
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    date = currentDate.getDate(),
                    day = currentDate.getDay(),
                    firstDayOfWeek = new Date(year, month, date - day),
                    endTime = new Date(year, month, date - day + 7);

                return {
                    startTime: firstDayOfWeek,
                    endTime: endTime
                };
            };

            //This can be decomissioned when upgrade to Angular 1.3
            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
                var time = checkDate.getTime();
                checkDate.setMonth(0); // Compare with Jan 1
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
            }

            ctrl.refreshView();
        }
    };
}]).directive('dayview', ['dateFilter', '$timeout', function (dateFilter, $timeout) {
    'use strict';

    return {
        restrict: 'EA',
        replace: true,
        templateUrl: './specialist/build/html/day.html',
        require: '^calendar',
        link: function (scope, element, attrs, ctrl) {
            scope.formatHourColumn = ctrl.formatHourColumn;

            $timeout(function () {
                updateScrollGutter();
            });

            ctrl.mode = {
                step: { days: 1 }
            };

            function updateScrollGutter() {
                var children = element.children();
                var allDayEventBody = children[0].children[1];
                var allDayEventGutterWidth = allDayEventBody.offsetWidth - allDayEventBody.clientWidth;
                var normalEventBody = children[1];
                var normalEventGutterWidth = normalEventBody.offsetWidth - normalEventBody.clientWidth;
                var gutterWidth = allDayEventGutterWidth || normalEventGutterWidth || 0;
                if (gutterWidth > 0) {
                    if (allDayEventGutterWidth <= 0) {
                        scope.allDayEventGutterWidth = gutterWidth;
                    } else {
                        scope.allDayEventGutterWidth = 0;
                    }
                    if (normalEventGutterWidth <= 0) {
                        scope.normalGutterWidth = gutterWidth;
                    } else {
                        scope.normalGutterWidth = 0;
                    }
                }
            }

            function createDateObjects(startTime) {
                var rows = [],
                    time,
                    currentHour = startTime.getHours(),
                    currentDate = startTime.getDate();

                for (var hour = 0; hour < 24; hour += 1) {
                    time = new Date(startTime.getTime());
                    time.setHours(currentHour + hour);
                    time.setDate(currentDate);
                    rows.push({
                        time: time
                    });
                }
                return rows;
            }

            scope.select = function (selectedTime) {
                if (scope.timeSelected) {
                    scope.timeSelected({ selectedTime: selectedTime });
                }
            };

            ctrl._onDataLoaded = function () {
                var eventSource = ctrl.eventSource,
                    len = eventSource ? eventSource.length : 0,
                    startTime = ctrl.range.startTime,
                    endTime = ctrl.range.endTime,
                    utcStartTime = new Date(Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate())),
                    utcEndTime = new Date(Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate())),
                    rows = scope.rows,
                    allDayEvents = [],
                    oneHour = 3600000,
                    eps = 0.016,
                    eventSet,
                    normalEventInRange = false,
                    hour;

                if (rows.hasEvent) {
                    for (hour = 0; hour < 24; hour += 1) {
                        if (rows[hour].events) {
                            rows[hour].events = null;
                        }
                    }
                    rows.hasEvent = false;
                }

                for (var i = 0; i < len; i += 1) {
                    var event = eventSource[i];
                    var eventStartTime = new Date(event.startTime);
                    var eventEndTime = new Date(event.endTime);

                    if (event.allDay) {
                        if (eventEndTime <= utcStartTime || eventStartTime >= utcEndTime) {
                            continue;
                        } else {
                            allDayEvents.push({
                                event: event
                            });
                        }
                    } else {
                        if (eventEndTime <= startTime || eventStartTime >= endTime) {
                            continue;
                        } else {
                            normalEventInRange = true;
                        }

                        var timeDiff;
                        var timeDifferenceStart;
                        if (eventStartTime <= startTime) {
                            timeDifferenceStart = 0;
                        } else {
                            timeDiff = eventStartTime - startTime - (eventStartTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceStart = timeDiff / oneHour;
                        }

                        var timeDifferenceEnd;
                        if (eventEndTime >= endTime) {
                            timeDiff = endTime - startTime - (endTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceEnd = timeDiff / oneHour;
                        } else {
                            timeDiff = eventEndTime - startTime - (eventEndTime.getTimezoneOffset() - startTime.getTimezoneOffset()) * 60000;
                            timeDifferenceEnd = timeDiff / oneHour;
                        }

                        var startIndex = Math.floor(timeDifferenceStart);
                        var endIndex = Math.ceil(timeDifferenceEnd - eps);

                        var displayEvent = {
                            event: event,
                            startIndex: startIndex,
                            endIndex: endIndex
                        };

                        eventSet = rows[startIndex].events;
                        if (eventSet) {
                            eventSet.push(displayEvent);
                        } else {
                            eventSet = [];
                            eventSet.push(displayEvent);
                            rows[startIndex].events = eventSet;
                        }
                    }
                }

                if (normalEventInRange) {
                    var orderedEvents = [];
                    for (hour = 0; hour < 24; hour += 1) {
                        if (rows[hour].events) {
                            orderedEvents = orderedEvents.concat(rows[hour].events);
                        }
                    }
                    if (orderedEvents.length > 0) {
                        rows.hasEvent = true;
                        ctrl.placeEvents(orderedEvents);
                    }
                }

                scope.allDayEvents = allDayEvents;

                $timeout(function () {
                    updateScrollGutter();
                });
            };

            ctrl._refreshView = function () {
                var startingDate = ctrl.range.startTime;

                scope.rows = createDateObjects(startingDate);
                scope.allDayEvents = [];
                scope.dates = [startingDate];
                scope.$parent.title = dateFilter(startingDate, ctrl.formatDayTitle);
            };

            ctrl._getRange = function getRange(currentDate) {
                var year = currentDate.getFullYear(),
                    month = currentDate.getMonth(),
                    date = currentDate.getDate(),
                    startTime = new Date(year, month, date),
                    endTime = new Date(year, month, date + 1);

                return {
                    startTime: startTime,
                    endTime: endTime
                };
            };

            ctrl.refreshView();
        }
    };
}]);
angular.module("template/rcalendar/calendar.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/calendar.html", "<div ng-switch=\"calendarMode\">\n" + "    <div class=\"row calendar-navbar\">\n" + "        <div class=\"nav-left col-xs-2\">\n" + "            <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"move(-1)\"><i\n" + "                    class=\"glyphicon glyphicon-chevron-left\"></i></button>\n" + "        </div>\n" + "        <div class=\"calendar-header col-xs-8\">{{title}}</div>\n" + "        <div class=\"nav-right col-xs-2\">\n" + "            <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"move(1)\"><i\n" + "                    class=\"glyphicon glyphicon-chevron-right\"></i></button>\n" + "        </div>\n" + "    </div>\n" + "    <dayview ng-switch-when=\"day\"></dayview>\n" + "    <monthview ng-switch-when=\"month\"></monthview>\n" + "    <weekview ng-switch-when=\"week\"></weekview>\n" + "</div>\n" + "");
}]);

angular.module("template/rcalendar/day.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/day.html", "<div>\n" + "    <div class=\"dayview-allday-table\">\n" + "        <div class=\"dayview-allday-label\">\n" + "            all day\n" + "        </div>\n" + "        <div class=\"dayview-allday-content-wrapper\">\n" + "            <table class=\"table table-bordered dayview-allday-content-table\">\n" + "                <tbody>\n" + "                <tr>\n" + "                    <td class=\"calendar-cell\" ng-class=\"{'calendar-event-wrap':allDayEvents}\"\n" + "                        ng-style=\"{height: 25*allDayEvents.length+'px'}\">\n" + "                        <div ng-repeat=\"displayEvent in allDayEvents\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{top: 25*$index+'px',width: '100%',height:'25px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </td>\n" + "                    <td ng-if=\"allDayEventGutterWidth>0\" class=\"gutter-column\"\n" + "                        ng-style=\"{width:allDayEventGutterWidth+'px'}\"></td>\n" + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "    <div class=\"scrollable\" style=\"height: 400px\">\n" + "        <table class=\"table table-bordered table-fixed\">\n" + "            <tbody>\n" + "            <tr ng-repeat=\"tm in rows track by $index\">\n" + "                <td class=\"calendar-hour-column text-center\">\n" + "                    {{tm.time | date: formatHourColumn}}\n" + "                </td>\n" + "                <td class=\"calendar-cell\" ng-click=\"select(tm.time)\">\n" + "                    <div ng-class=\"{'calendar-event-wrap': tm.events}\" ng-if=\"tm.events\">\n" + "                        <div ng-repeat=\"displayEvent in tm.events\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+'px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </div>\n" + "                </td>\n" + "            </tr>\n" + "            </tbody>\n" + "        </table>\n" + "    </div>\n" + "</div>");
}]);

angular.module("template/rcalendar/month.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/month.html", "<div>\n" + "    <table class=\"table table-bordered table-fixed monthview-datetable monthview-datetable\">\n" + "        <thead>\n" + "        <tr>\n" + "            <th ng-show=\"showWeeks\" class=\"calendar-week-column text-center\">#</th>\n" + "            <th ng-repeat=\"label in labels track by $index\" class=\"text-center\">\n" + "                <small>{{label}}</small>\n" + "            </th>\n" + "        </tr>\n" + "        </thead>\n" + "        <tbody>\n" + "        <tr ng-repeat=\"row in rows track by $index\">\n" + "            <td ng-show=\"showWeeks\" class=\"calendar-week-column text-center\">\n" + "                <small><em>{{ weekNumbers[$index] }}</em></small>\n" + "            </td>\n" + "            <td ng-repeat=\"dt in row track by dt.date\" class=\"monthview-dateCell\" ng-click=\"select(dt.date)\"\n" + "                ng-class=\"{'text-center':true, 'monthview-current': dt.current&&!dt.selected&&!dt.hasEvent,'monthview-secondary-with-event': dt.secondary&&dt.hasEvent, 'monthview-primary-with-event':!dt.secondary&&dt.hasEvent&&!dt.selected, 'monthview-selected': dt.selected}\">\n" + "                <div ng-class=\"{'text-muted':dt.secondary}\">\n" + "                    {{dt.label}}\n" + "                </div>\n" + "            </td>\n" + "        </tr>\n" + "        </tbody>\n" + "    </table>\n" + "    <div ng-if=\"showEventDetail\" class=\"event-detail-container\">\n" + "        <div class=\"scrollable\" style=\"height: 200px\">\n" + "            <table class=\"table table-bordered table-striped table-fixed\">\n" + "                <tr ng-repeat=\"event in selectedDate.events\" ng-if=\"selectedDate.events\">\n" + "                    <td ng-if=\"!event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{event.startTime|date: 'HH:mm'}}\n" + "                        -\n" + "                        {{event.endTime|date: 'HH:mm'}}\n" + "                    </td>\n" + "                    <td ng-if=\"event.allDay\" class=\"monthview-eventdetail-timecolumn\">All day</td>\n" + "                    <td class=\"event-detail\" ng-click=\"eventSelected({event:event})\">{{event.title}}</td>\n" + "                </tr>\n" + "                <tr ng-if=\"!selectedDate.events\"><td class=\"no-event-label\">No Events</td></tr>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "</div>");
}]);

angular.module("template/rcalendar/week.html", []).run(["$templateCache", function ($templateCache) {
    $templateCache.put("template/rcalendar/week.html", "<div>\n" + "    <table class=\"table table-bordered table-fixed weekview-header\">\n" + "        <thead>\n" + "        <tr>\n" + "            <th class=\"calendar-hour-column\"></th>\n" + "            <th ng-repeat=\"dt in dates\" class=\"text-center weekview-header-label\">{{dt.date| date:\n" + "                formatWeekViewDayHeader}}\n" + "            </th>\n" + "            <th ng-if=\"gutterWidth>0\" class=\"gutter-column\" ng-style=\"{width: gutterWidth+'px'}\"></th>\n" + "        </tr>\n" + "        </thead>\n" + "    </table>\n" + "    <div class=\"weekview-allday-table\">\n" + "        <div class=\"weekview-allday-label\">\n" + "            all day\n" + "        </div>\n" + "        <div class=\"weekview-allday-content-wrapper\">\n" + "            <table class=\"table table-bordered table-fixed weekview-allday-content-table\">\n" + "                <tbody>\n" + "                <tr>\n" + "                    <td ng-repeat=\"day in dates track by day.date\" class=\"calendar-cell\">\n" + "                        <div ng-class=\"{'calendar-event-wrap': day.events}\" ng-if=\"day.events\"\n" + "                             ng-style=\"{height: 25*day.events.length+'px'}\">\n" + "                            <div ng-repeat=\"displayEvent in day.events\" class=\"calendar-event\"\n" + "                                 ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                                 ng-style=\"{top: 25*displayEvent.position+'px', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+'%', height: '25px'}\">\n" + "                                <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                            </div>\n" + "                        </div>\n" + "                    </td>\n" + "                    <td ng-if=\"allDayEventGutterWidth>0\" class=\"gutter-column\"\n" + "                        ng-style=\"{width: allDayEventGutterWidth+'px'}\"></td>\n" + "                </tr>\n" + "                </tbody>\n" + "            </table>\n" + "        </div>\n" + "    </div>\n" + "    <div class=\"scrollable\" style=\"height: 400px\">\n" + "        <table class=\"table table-bordered table-fixed\">\n" + "            <tbody>\n" + "            <tr ng-repeat=\"row in rows track by $index\">\n" + "                <td class=\"calendar-hour-column text-center\">\n" + "                    {{row[0].time | date: formatHourColumn}}\n" + "                </td>\n" + "                <td ng-repeat=\"tm in row track by tm.time\" class=\"calendar-cell\" ng-click=\"select(tm.time)\">\n" + "                    <div ng-class=\"{'calendar-event-wrap': tm.events}\" ng-if=\"tm.events\">\n" + "                        <div ng-repeat=\"displayEvent in tm.events\" class=\"calendar-event\"\n" + "                             ng-click=\"eventSelected({event:displayEvent.event})\"\n" + "                             ng-style=\"{left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+'px'}\">\n" + "                            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n" + "                        </div>\n" + "                    </div>\n" + "                </td>\n" + "                <td ng-if=\"normalGutterWidth>0\" class=\"gutter-column\" ng-style=\"{width: normalGutterWidth+'px'}\"></td>\n" + "            </tr>\n" + "            </tbody>\n" + "        </table>\n" + "    </div>\n" + "</div>");
}]);
specialist.factory('dataService', ['$http', '$window', function ($http, $window) {
    var signUpDocObj = {};
    var url = 'http://quickspecialist.com/specialist/specialistAPI/public/index.php';
    return {
        getFullDoctorList: function () {
            return $http.get(url + '/doctor/list').then(function (resp) {
                return resp.data;
            });
        },
        checkUserExistance: function () {},
        signUpDoctor: function (obj) {
            return $http.post(url + '/doctor/add', obj).then(function (resp) {
                setSession(resp);
                return resp;
            });
            // var obj = {
            //     'sessionId': '23458863',
            //     'docData': { 'name': 'nitin', 'email': 'ntngiri@gmail.com', 'address': 'ksjdnv skvnj', 'city': 'Gurgaon', 'state': 'haryana', 'mob': '70412992873', 'clinic': 'ksjbd', 'fee': '699', 'hv_fee': '7365' }
            // };
            // signUpDocObj = obj;
            // console.log('dataService',signUpDocObj);
            //return signUpDocObj;
        },
        setSession: function (user) {
            $window.sessionStorage.setItem('user', JSON.stringify(user));
        },
        getSession: function () {
            return $window.sessionStorage.getItem('user');
        },
        getDoctorData: function (id) {
            return $http.get(url + '/doctor/' + id).then(function (resp) {
                return resp.data;
            });
        },
        checkUserName: function (uname) {
            return $http.get(url + '/doctor/docUsername/' + uname).then(function (resp) {
                return resp;
            });
        },
        uploadProfilePic: function (obj) {
            return $http.post(url + '/doctor/profilePic', obj).then(function (resp) {
                return resp;
            });
        }
    };
}]);
specialist.controller('docProfileCtrl', ['$scope', 'dataService', function ($scope, dataService) {
    var doctorId = 4;
    $scope.editProfile2 = false;
    $scope.editProfile = true;
    // dataService.getDoctorData(doctorId).then(function(data) {
    //     console.log(data);
    //     $scope.doctorData = data[0];
    // });
    $scope.docJson;
    dataService.getDoctorData('14').then(function (resp) {
        $scope.docJson = resp[0];
        console.log('doctor data', $scope.docJson);
    });

    //$('form').on('submit', uploadFiles);

    // Catch the form submit and upload the files
    $scope.uploadFiles = function (event) {
        event.stopPropagation(); // Stop stuff happening
        event.preventDefault(); // Totally stop stuff happening

        // START A LOADING SPINNER HERE

        // Create a formdata object and add the files
        var data = new FormData();
        angular.forEach(files, function (key, value) {
            data.append(key, value);
        });

        dataService.uploadProfilePic(data).then(function () {});
    };

    $scope.showEditForm = function (tabId) {
        if (tabId == '1') {
            $scope.editProfile2 = false;
            $scope.editProfile = true;
            document.getElementById("1").classList.add("active");
            document.getElementById("2").classList.remove("active");
        } else if (tabId == '2') {
            $scope.editProfile2 = true;
            $scope.editProfile = false;
            document.getElementById("2").classList.add("active");
            document.getElementById("1").classList.remove("active");
            //document.getElementById('2').className += 'active';
        }
    };

    $scope.mode = 'week';
    $scope.eventSource = createRandomEvents();
    $scope.selected = 0;
    $scope.select = function (index) {
        $scope.selected = index;
    };
    $scope.navProfileList = [{ 'sref': 'dashboard', 'title': 'Dashboard' }, { 'sref': 'faq', 'title': 'FAQ' }, { 'sref': 'plans', 'title': 'Pricing Plans' }, { 'sref': 'profile', 'title': 'User Account' }];

    function createRandomEvents() {
        var events = [];
        for (var i = 0; i < 50; i += 1) {
            var date = new Date();
            var eventType = Math.floor(Math.random() * 2);
            var startDay = Math.floor(Math.random() * 90) - 45;
            var endDay = Math.floor(Math.random() * 2) + startDay;
            var startTime;
            var endTime;
            if (eventType === 0) {
                startTime = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate() + startDay));
                if (endDay === startDay) {
                    endDay += 1;
                }
                endTime = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate() + endDay));
                events.push({
                    title: 'All Day - ' + i,
                    startTime: startTime,
                    endTime: endTime,
                    allDay: true
                });
            } else {
                var startMinute = Math.floor(Math.random() * 24 * 60);
                var endMinute = Math.floor(Math.random() * 180) + startMinute;
                startTime = new Date(date.getFullYear(), date.getMonth(), date.getDate() + startDay, 0, date.getMinutes() + startMinute);
                endTime = new Date(date.getFullYear(), date.getMonth(), date.getDate() + endDay, 0, date.getMinutes() + endMinute);
                events.push({
                    title: i + 'Mr Nitin',
                    startTime: startTime,
                    endTime: endTime,
                    allDay: false
                });
            }
        }
        return events;
    }
}]);
specialist.controller('docSignupCtrl', ['$scope', '$state', 'dataService', function ($scope, $state, dataService) {
	$scope.secondForm = false;
	$scope.firstForm = true;
	$scope.email_err = false;
	$scope.pwd_err = false;
	$scope.err_msg = false;
	$scope.mobileRegEx = "/^[0-9]{10,10}$/;";
	$scope.pinCodeRegEx = "/^[0-9]{6,6}$/;";
	var signUpData = {};

	$scope.checkusername = function () {
		if (dataService.checkUserName($scope.username) == 1) {
			$scope.usernameExist = true;
		} else {
			$scope.usernameExist = false;
		}
	};
	$scope.checkEmailPwdValidity = function (value) {
		if (value == 'email') {
			if ($scope.email !== $scope.confEmail) {
				$scope.email_err = true;
				$scope.email_err_msg = 'Email did not match';
			} else {
				$scope.email_err = false;
				$scope.email_err_msg = '';
			}
		} else if (value == 'pwd') {
			if ($scope.pass !== $scope.confPass) {
				$scope.pass_err = true;
			} else {
				$scope.pass_err = false;
			}
		}
	};
	$scope.bringSecondForm = function (isValid) {
		if (isValid) {
			$scope.err_msg = false;
			signUpData.name = $scope.fname + " " + $scope.lname;
			if ($scope.email == $scope.confEmail) {
				signUpData.email = $scope.email;
			} else {
				$scope.email_err = true;
			}
			if ($scope.pass == $scope.confPass) {
				signUpData.password = $scope.pass;
			} else {
				$scope.pass_err = true;
			}
			if (!$scope.pass_err && !$scope.email_err) {
				$scope.secondForm = true;
				$scope.firstForm = false;
			}
		} else if (!isValid) {
			$scope.err_msg = true;
		}
	};

	$scope.sendSignupDoc = function (isValid) {
		if (isValid) {
			$scope.err_msg = false;
			signUpData.address = $scope.address1 + ' ' + $scope.address2;
			signUpData.pin = $scope.pinCode;
			signUpData.city = $scope.city;
			signUpData.state = $scope.state;
			signUpData.mobile = $scope.mobileNo;
			signUpData.clinic_name = $scope.clinicName;
			signUpData.fee = $scope.clinicFee;
			signUpData.hv_fee = $scope.homeVisit;
			dataService.signUpDoctor(signUpData).then(function (resp) {
				if (resp) {
					$state.go('doctorProfile.dashboard');
				}
			});
			//to be removed
			// dataService.signUpDoctor(signUpData).then(function(resp){
			// 	$state.go('doctorProfile.dashboard');
			// });
		} else if (!isValid) {
			$scope.err_msg = true;
		}
	};
}]);
specialist.controller('doctorPortalCtrl', ['$scope', function ($scope) {}]);
angular.module('specialist.tagit', []).directive('tagIt', function () {
    return {
        restrict: 'EA',
        scope: {
            tags: "=",
            remove: "&"
        },
        template: '<div><ul class="tags"><li  class="tagit" ng-repeat="tag in tags "><span class="tagText">{{::tag.name}}</span><a  ng-click="remove({idx:tag.id})" class="dCross" href="javascript:;">x</a></li></ul></div>',

        link: function ($scope, $element, $attrs, $ctrl) {
            // console.log($scope, $attrs);
        }
    };
});

angular.module('specialist.listing', []).directive('ngRepeatDoneNotification', function () {
    return function (scope, element, attrs) {

        if (!scope.$parent.multiSelect) {

            if (scope.selectedId && scope.selectedId.length != 0 && scope.$last && !scope.$parent.firstReapet) {
                scope.$parent.firstReapet = 1;
                scope.callback({
                    'item': {
                        id: scope.selectedId[0],
                        name: scope.data[scope.idHash.indexOf(scope.selectedId[0])].name,
                        allSelected: scope.selectedId,
                        checked: null,
                        first: true
                    }
                });
            }
        }
        //console.log(scope.$parent.idHash);
    };
}).directive('listing', function () {
    return {
        restrict: 'E',
        transclude: true,
        replace: true,
        scope: {
            'data': '=',
            'tupleCount': '@',
            'selectedId': '=',
            'maxHeight': '@',
            'callback': '&listingCallback',
            'multiSelect': '@',
            'filterName': "=",
            'active': '='
        },

        //template: '<ul><li ng-repeat="item in data|limitTo:tupleCount" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)"><input ng-if="multiSelect" type="checkbox" ng-model=item.checked><div style="display:inline-block;" ng-transclude></div></li></ul>',
        template: '<ul><li ng-repeat="item in data" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)" ng-class="{active:item.active, notSelectable:item.notSelectable}"><input ng-if="multiSelect == \'true\' && !item.notSelectable" type="checkbox" ng-model=item.checked>{{selectedName}}<div style="display:inline-block; width:auto;" ng-transclude></div></li></ul>',

        link: function (scope, iElement, iAttr, controllers) {
            scope.firstReapet = 0;
            scope.selObj = {};
            scope.idHash = [];
            if (scope.data) {
                scope.data.forEach(function (x) {
                    scope.idHash.push(x.id);
                });
            }
            scope.$on('select', function (event, someData, flag) {
                var elemToSel;
                if (flag) {
                    elemToSel = scope.data[scope.idHash.indexOf(flag)];
                } else {
                    elemToSel = scope.data[scope.active];
                }

                scope.checkItem({
                    'item': elemToSel
                });
            });
            scope.$on('deSelect', function (event, id) {});

            scope.isActive = function (matchIdx) {
                if (scope.active < iElement.find('li').length) {
                    return scope.active === matchIdx;
                } else {
                    scope.active = 0;
                    //  return scope.active === matchIdx;
                }
            };

            scope.checkItem = function (_this) {
                var arr = [];
                scope.attr = iAttr;

                if (_this.item.notSelectable) {
                    //iElement.addClass('notSelectable');
                    return;
                }

                scope.checkSelection(_this);

                scope.callback({
                    'item': {
                        id: _this.item.id,
                        name: _this.item.name,
                        allSelected: scope.selectedId,
                        checked: _this.item.checked
                    }
                });
            };

            scope.checkSelection = function (t) {
                // array and selectedId will be the same after this, 
                var id = t.item.id;
                scope.selectedId = scope.selectedId || [];
                if (scope.attr.multiSelect) {
                    var index = scope.selectedId.indexOf(id);
                    if (index == -1) {
                        scope.selectedId.push(id);
                        scope.selObj[id] = t.item.name;
                        t.item.checked = true;
                    } else {
                        scope.selectedId.splice(index, 1);
                        delete scope.selObj[id];
                        t.item.checked = false;
                    }
                } else {
                    scope.selectedId = [];
                    scope.selectedId.push(id);
                    //t.item.checked = true;
                }
            };
        }
    };
});

angular.module('specialist.droope', ['specialist.listing', 'specialist.tagit']).directive('droope', ["$document", function ($document) {
    // Runs during compile
    return {
        scope: {
            option: "=",
            callback: "&droopeCallback",
            data: "=",
            selectedId: "=",
            api: "="
        },
        // controller: function($scope, $element, $attrs, $transclude) {},
        restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
        template: '<div class="ddwn">' + '<div class="DDwrap">' + '<ul class="DDsearch">' + '<li class="frst" style="float: none;">' + '<div class="DDinputWrap">' + '<span class="ddIcon srchTxt" ng-click="showDrop()"></span>' + '<input type="text" ng-click="showDrop()" id="" class="srchTxt" autocomplete="off" style="color: rgb(68, 68, 68);" ng-model="selectedName">' + '</div>' + '</li>' + '</ul>' + '</div>' + '<div class="dd_dwn" ng-show="show">' + '<listing tuplecount="10" multi-select="{{option.multiselect}}" active="activeIndex" selected-id ="selectedId" listing-callback="listingCallback(item)" data="data" filter-name="selectedName">' + '<div><span>{{$parent.item.name}}</span></div>' + '</listing>' + '</div>' + '</div>',
        replace: true,
        transclude: true,
        compile: function (tElement, tAttrs) {
            var __options__ = {
                fieldAttr: {
                    placeholder: 'Enter your Values'
                }

            };
            return function linking(scope, iElm, iAttrs, controller) {
                scope.activeIndex = 0;
                //console.log(iElm);
                //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
                iElm.find('input').on('keydown', function (evt) {
                    var target;
                    switch (evt.which) {
                        case 8:
                            if (scope.selectedName == "") {
                                scope.show = true;
                            }
                            scope.$digest();
                            break;
                        case 9:
                            scope.blurOut();
                            break;
                        case 13:
                            evt.stopPropagation();
                            scope.$broadcast('select', this);
                            scope.$digest();
                            break;
                        case 38:
                            scope.data[scope.activeIndex].active = false;
                            scope.activeIndex--;
                            scope.data[scope.activeIndex].active = true;
                            scope.$digest();
                            break;
                        case 40:
                            scope.data[scope.activeIndex].active = false;
                            scope.activeIndex++;
                            scope.data[scope.activeIndex].active = true;
                            scope.$digest();
                            break;
                    }
                });
                scope.options = angular.merge(__options__, scope.option);
                scope.tags = [];
                iElm.find('input').attr(scope.options.fieldAttr);
                /**
                 * [function called on list click- after listing callback]
                 * @param  {[type]} retObj [object from listing callback]
                 * @return {[type]}      [tags object updated]
                 */
                scope.api = {
                    resetDroope: function () {
                        //scope.active = -1;
                        scope.selectedName = "", scope.selectedId = [];
                    },
                    selectItem: function (id) {
                        if (Object.prototype.toString.call(id) === '[object Array]') {
                            scope.$broadcast('select', this, id);
                        } else {
                            scope.$broadcast('select', this, id);
                        }
                    }
                };
                scope.listingCallback = function (retObj) {
                    var newTag = {
                        id: retObj.id,
                        name: retObj.name
                    };
                    scope.tagUpdate(newTag, retObj.checked);
                };

                scope.tagUpdate = function (tagObj, checked) {
                    if (scope.option.multiselect) {
                        if (checked) {
                            scope.tags.push(tagObj);
                        } else {
                            var index = scope.tags.indexOf(tagObj);
                            scope.tags.splice(index, 1);
                        }
                    } else {
                        scope.selectedName = tagObj.name;
                        scope.show = false;
                        scope.callback({
                            "item": tagObj
                        });
                    }

                    if (event) {
                        event.stopPropagation();
                    }
                };
                /**
                 * [called on input focus - will show the list]
                 */
                scope.showDrop = function () {
                    // if (scope.option.multiselect) {

                    // } else {
                    scope.lastSelected = scope.selectedName;
                    scope.selectedName = '';
                    scope.show = true;
                    //}
                    // var parElm = document.getElementById('meraDD');
                    // var scrollCont = document.getElementById('dd_dwn');
                    // var fstElm = document.getElementById('dd_dwn').getElementsByTagName("li")[0];
                    // scope.scrollHandler(parElm, scrollCont, fstElm, fstElm);
                };

                /**
                 * [removing all tags]
                 */
                scope.removeAllTags = function () {
                    scope.tags = [];
                    if (scope.option.multiselect) {
                        for (i = 0; i < scope.selectedId.length; i++) {
                            var index = scope.data.indexOf(scope.selectedId[i]);
                            scope.data[index].checked = false;
                        }
                    } else {
                        scope.selectedName = '';
                    }
                };

                scope.blurOut = function () {
                    var blurObj = {
                        id: "",
                        name: scope.selectedName,
                        checked: 'no'
                        //  scope.show = true;
                    };
                    scope.listingCallback(blurObj);
                };
                /**
                 * [hide list drop on document click]
                 */
                $document.on("click", function (event) {
                    if (!angular.element(event.target).hasClass('srchTxt')) {
                        scope.show = false;
                        if (scope.selectedName == "") {
                            scope.selectedName = scope.lastSelected;
                        }
                        //  scope.blurOut();
                    } else {}
                    scope.$apply();
                });
            };
        }
    };
}]);
specialist.controller('mainController', ['$scope', function ($scope) {
	var json = [{ 'name': 'Delhi' }, { 'name': 'Noida' }, { 'name': 'Gurgaon' }];
	$scope.options = {};
	$scope.options = {
		data: json,
		multiselect: true,
		maxHeight: 250
	};
	$scope.data = [{ 'name': 'Delhi' }, { 'name': 'Noida' }, { 'name': 'Gurgaon' }];
	$scope.selectedId = [];
	$scope.onClickFunc = function (obj1) {
		//$scope.cbObj = obj;
		console.log(obj1);
	};
	$scope.api = {};
}]);
specialist.controller('SearchCtrl', ['$scope', '$state', 'dataService', function ($scope, $state, dataService) {
	$scope.doctorId;
	dataService.getFullDoctorList().then(function (data) {
		console.log(data);
		$scope.doctorList = data;
		$scope.doctorId = data.id;
	});
	$scope.doctorBook = function (id) {
		$state.go('doctor');
	};
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNhbGVuZGVyLmpzIiwiZGF0YVNlcnZpY2UuanMiLCJkb2NQcm9maWxlQ29udHJvbGxlci5qcyIsImRvY1NpZ251cENvbnRyb2xsZXIuanMiLCJkb2N0b3JQb3J0YWwuanMiLCJkcm9vcGUuanMiLCJtYWluQ29udHJvbGxlci5qcyIsInNlYXJjaENvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsic3BlY2lhbGlzdCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJhYnN0cmFjdCIsImh0bWw1TW9kZSIsImNvbnN0YW50IiwiZm9ybWF0RGF5IiwiZm9ybWF0RGF5SGVhZGVyIiwiZm9ybWF0RGF5VGl0bGUiLCJmb3JtYXRXZWVrVGl0bGUiLCJmb3JtYXRNb250aFRpdGxlIiwiZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXIiLCJmb3JtYXRIb3VyQ29sdW1uIiwiY2FsZW5kYXJNb2RlIiwic2hvd1dlZWtzIiwic2hvd0V2ZW50RGV0YWlsIiwic3RhcnRpbmdEYXkiLCJldmVudFNvdXJjZSIsInF1ZXJ5TW9kZSIsIiRzY29wZSIsIiRhdHRycyIsIiRwYXJzZSIsIiRpbnRlcnBvbGF0ZSIsIiRsb2ciLCJkYXRlRmlsdGVyIiwiY2FsZW5kYXJDb25maWciLCJzZWxmIiwibmdNb2RlbEN0cmwiLCIkc2V0Vmlld1ZhbHVlIiwibm9vcCIsImZvckVhY2giLCJrZXkiLCJpbmRleCIsImlzRGVmaW5lZCIsIiRwYXJlbnQiLCIkZXZhbCIsIiR3YXRjaCIsInZhbHVlIiwib25FdmVudFNvdXJjZUNoYW5nZWQiLCJpbml0RGF0ZSIsImN1cnJlbnRDYWxlbmRhckRhdGUiLCJEYXRlIiwibmdNb2RlbCIsImFzc2lnbiIsImluaXQiLCJuZ01vZGVsQ3RybF8iLCIkcmVuZGVyIiwicmVuZGVyIiwiJG1vZGVsVmFsdWUiLCJkYXRlIiwiaXNWYWxpZCIsImlzTmFOIiwiZXJyb3IiLCIkc2V0VmFsaWRpdHkiLCJyZWZyZXNoVmlldyIsIm1vZGUiLCJyYW5nZSIsIl9nZXRSYW5nZSIsIl9yZWZyZXNoVmlldyIsInJhbmdlQ2hhbmdlZCIsInNwbGl0IiwiYXJyIiwic2l6ZSIsImFycmF5cyIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJfb25EYXRhTG9hZGVkIiwibW92ZSIsImRpcmVjdGlvbiIsInN0ZXAiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJ5ZWFycyIsIm1vbnRoIiwiZ2V0TW9udGgiLCJtb250aHMiLCJnZXREYXRlIiwiZGF5cyIsImZpcnN0RGF5SW5OZXh0TW9udGgiLCJzZXRGdWxsWWVhciIsImdldFRpbWUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwib3ZlcmxhcCIsImV2ZW50MSIsImV2ZW50MiIsImVuZEluZGV4Iiwic3RhcnRJbmRleCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiZXZlbnRzIiwiaSIsImoiLCJsZW4iLCJtYXhDb2x1bW4iLCJjb2wiLCJpc0ZvcmJpZGRlbiIsIkFycmF5IiwicG9zaXRpb24iLCJjYWxjdWxhdGVXaWR0aCIsIm9yZGVyZWRFdmVudHMiLCJjZWxscyIsImV2ZW50IiwiZXZlbnRDb3VudEluQ2VsbCIsImN1cnJlbnRFdmVudEluQ2VsbCIsInNvcnQiLCJldmVudEEiLCJldmVudEIiLCJjYWxjdWxhdGVkIiwib3ZlcmxhcE51bWJlciIsImV2ZW50UXVldWUiLCJzaGlmdCIsInBsYWNlRXZlbnRzIiwicGxhY2VBbGxEYXlFdmVudHMiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcGxhY2UiLCJzY29wZSIsImV2ZW50U2VsZWN0ZWQiLCJ0aW1lU2VsZWN0ZWQiLCJyZXF1aXJlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsImN0cmxzIiwiY2FsZW5kYXJDdHJsIiwiJG9uIiwiY3RybCIsImdldERhdGVzIiwic3RhcnREYXRlIiwibiIsImRhdGVzIiwiY3VycmVudCIsInNldEhvdXJzIiwic2V0RGF0ZSIsInNlbGVjdCIsInNlbGVjdGVkRGF0ZSIsInJvd3MiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsInNlbGVjdGVkTW9udGgiLCJzZWxlY3RlZFllYXIiLCJyb3ciLCJzZWxlY3RlZCIsImNvbXBhcmUiLCJzZWxlY3RlZFRpbWUiLCJleHRlbmQiLCJjcmVhdGVEYXRlT2JqZWN0Iiwic2Vjb25kYXJ5IiwibGFiZWxzIiwiaGVhZGVyRGF0ZSIsInRpdGxlIiwid2Vla051bWJlcnMiLCJ0aHVyc2RheUluZGV4IiwibnVtV2Vla3MiLCJjdXJXZWVrIiwiZ2V0SVNPODYwMVdlZWtOdW1iZXIiLCJmb3JtYXQiLCJsYWJlbCIsImNvbXBhcmVFdmVudCIsImFsbERheSIsInV0Y1N0YXJ0VGltZSIsIlVUQyIsInV0Y0VuZFRpbWUiLCJvbmVEYXkiLCJlcHMiLCJoYXNFdmVudCIsImV2ZW50U3RhcnRUaW1lIiwiZXZlbnRFbmRUaW1lIiwic3QiLCJldCIsInRpbWVEaWZmIiwidGltZURpZmZlcmVuY2VTdGFydCIsImdldFRpbWV6b25lT2Zmc2V0IiwidGltZURpZmZlcmVuY2VFbmQiLCJNYXRoIiwiZmxvb3IiLCJldmVudFNldCIsInJvd0luZGV4IiwiZGF5SW5kZXgiLCJmaW5kU2VsZWN0ZWQiLCJkYXRlMSIsImRhdGUyIiwiZ2V0UmFuZ2UiLCJjdXJyZW50RGF0ZSIsImZpcnN0RGF5T2ZNb250aCIsImRpZmZlcmVuY2UiLCJnZXREYXkiLCJudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCIsImVuZERhdGUiLCJjaGVja0RhdGUiLCJ0aW1lIiwic2V0TW9udGgiLCJyb3VuZCIsIiR0aW1lb3V0IiwidXBkYXRlU2Nyb2xsR3V0dGVyIiwiY2hpbGRyZW4iLCJhbGxEYXlFdmVudEJvZHkiLCJhbGxEYXlFdmVudEd1dHRlcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsIm5vcm1hbEV2ZW50Qm9keSIsIm5vcm1hbEV2ZW50R3V0dGVyV2lkdGgiLCJndXR0ZXJXaWR0aCIsIm5vcm1hbEd1dHRlcldpZHRoIiwiY3JlYXRlRGF0ZU9iamVjdHMiLCJ0aW1lcyIsImN1cnJlbnRIb3VyIiwiZ2V0SG91cnMiLCJob3VyIiwiZGF5Iiwib25lSG91ciIsImFsbERheUV2ZW50SW5SYW5nZSIsIm5vcm1hbEV2ZW50SW5SYW5nZSIsImFsbERheVN0YXJ0SW5kZXgiLCJhbGxEYXlFbmRJbmRleCIsImNlaWwiLCJkaXNwbGF5QWxsRGF5RXZlbnQiLCJzdGFydFJvd0luZGV4IiwiZW5kT2ZEYXkiLCJlbmRSb3dJbmRleCIsImRpc3BsYXlFdmVudCIsImNvbmNhdCIsIm9yZGVyZWRBbGxEYXlFdmVudHMiLCJmaXJzdERheU9mV2VlayIsIndlZWtOdW1iZXJJbmRleCIsIndlZWtGb3JtYXRQYXR0ZXJuIiwiaW5kZXhPZiIsImFsbERheUV2ZW50cyIsInN0YXJ0aW5nRGF0ZSIsInJ1biIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0IiwiZmFjdG9yeSIsIiRodHRwIiwiJHdpbmRvdyIsInNpZ25VcERvY09iaiIsImdldEZ1bGxEb2N0b3JMaXN0IiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiY2hlY2tVc2VyRXhpc3RhbmNlIiwic2lnblVwRG9jdG9yIiwib2JqIiwicG9zdCIsInNldFNlc3Npb24iLCJ1c2VyIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFNlc3Npb24iLCJnZXRJdGVtIiwiZ2V0RG9jdG9yRGF0YSIsImlkIiwiY2hlY2tVc2VyTmFtZSIsInVuYW1lIiwidXBsb2FkUHJvZmlsZVBpYyIsImRhdGFTZXJ2aWNlIiwiZG9jdG9ySWQiLCJlZGl0UHJvZmlsZTIiLCJlZGl0UHJvZmlsZSIsImRvY0pzb24iLCJjb25zb2xlIiwibG9nIiwidXBsb2FkRmlsZXMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIkZvcm1EYXRhIiwiZmlsZXMiLCJhcHBlbmQiLCJzaG93RWRpdEZvcm0iLCJ0YWJJZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjcmVhdGVSYW5kb21FdmVudHMiLCJuYXZQcm9maWxlTGlzdCIsImV2ZW50VHlwZSIsInJhbmRvbSIsInN0YXJ0RGF5IiwiZW5kRGF5IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJzdGFydE1pbnV0ZSIsImVuZE1pbnV0ZSIsImdldE1pbnV0ZXMiLCIkc3RhdGUiLCJzZWNvbmRGb3JtIiwiZmlyc3RGb3JtIiwiZW1haWxfZXJyIiwicHdkX2VyciIsImVycl9tc2ciLCJtb2JpbGVSZWdFeCIsInBpbkNvZGVSZWdFeCIsInNpZ25VcERhdGEiLCJjaGVja3VzZXJuYW1lIiwidXNlcm5hbWUiLCJ1c2VybmFtZUV4aXN0IiwiY2hlY2tFbWFpbFB3ZFZhbGlkaXR5IiwiZW1haWwiLCJjb25mRW1haWwiLCJlbWFpbF9lcnJfbXNnIiwicGFzcyIsImNvbmZQYXNzIiwicGFzc19lcnIiLCJicmluZ1NlY29uZEZvcm0iLCJuYW1lIiwiZm5hbWUiLCJsbmFtZSIsInBhc3N3b3JkIiwic2VuZFNpZ251cERvYyIsImFkZHJlc3MiLCJhZGRyZXNzMSIsImFkZHJlc3MyIiwicGluIiwicGluQ29kZSIsImNpdHkiLCJtb2JpbGUiLCJtb2JpbGVObyIsImNsaW5pY19uYW1lIiwiY2xpbmljTmFtZSIsImZlZSIsImNsaW5pY0ZlZSIsImh2X2ZlZSIsImhvbWVWaXNpdCIsImdvIiwidGFncyIsInRlbXBsYXRlIiwiJGVsZW1lbnQiLCIkY3RybCIsIm11bHRpU2VsZWN0Iiwic2VsZWN0ZWRJZCIsIiRsYXN0IiwiZmlyc3RSZWFwZXQiLCJjYWxsYmFjayIsImlkSGFzaCIsImFsbFNlbGVjdGVkIiwiY2hlY2tlZCIsImZpcnN0IiwidHJhbnNjbHVkZSIsImlFbGVtZW50IiwiaUF0dHIiLCJjb250cm9sbGVycyIsInNlbE9iaiIsIngiLCJzb21lRGF0YSIsImZsYWciLCJlbGVtVG9TZWwiLCJhY3RpdmUiLCJjaGVja0l0ZW0iLCJpc0FjdGl2ZSIsIm1hdGNoSWR4IiwiZmluZCIsIl90aGlzIiwiYXR0ciIsIml0ZW0iLCJub3RTZWxlY3RhYmxlIiwiY2hlY2tTZWxlY3Rpb24iLCJ0IiwiJGRvY3VtZW50Iiwib3B0aW9uIiwiYXBpIiwiY29tcGlsZSIsInRFbGVtZW50IiwidEF0dHJzIiwiX19vcHRpb25zX18iLCJmaWVsZEF0dHIiLCJwbGFjZWhvbGRlciIsImxpbmtpbmciLCJpRWxtIiwiaUF0dHJzIiwiYWN0aXZlSW5kZXgiLCJvbiIsImV2dCIsInRhcmdldCIsIndoaWNoIiwic2VsZWN0ZWROYW1lIiwic2hvdyIsIiRkaWdlc3QiLCJibHVyT3V0IiwiJGJyb2FkY2FzdCIsIm9wdGlvbnMiLCJtZXJnZSIsInJlc2V0RHJvb3BlIiwic2VsZWN0SXRlbSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImxpc3RpbmdDYWxsYmFjayIsInJldE9iaiIsIm5ld1RhZyIsInRhZ1VwZGF0ZSIsInRhZ09iaiIsIm11bHRpc2VsZWN0Iiwic2hvd0Ryb3AiLCJsYXN0U2VsZWN0ZWQiLCJyZW1vdmVBbGxUYWdzIiwiYmx1ck9iaiIsImhhc0NsYXNzIiwiJGFwcGx5IiwianNvbiIsIm1heEhlaWdodCIsIm9uQ2xpY2tGdW5jIiwib2JqMSIsImRvY3Rvckxpc3QiLCJkb2N0b3JCb29rIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxhQUFhQyxRQUFRQyxNQUFSLENBQWUsWUFBZixFQUE2QixDQUFDLFdBQUQsQ0FBN0IsRUFDaEJDLE1BRGdCLENBQ1QsQ0FBQyxnQkFBRCxFQUFrQixtQkFBbEIsRUFBc0Msb0JBQXRDLEVBQTRELFVBQVVDLGNBQVYsRUFBeUJDLGlCQUF6QixFQUEyQ0Msa0JBQTNDLEVBQStEO0FBQ2xJQSxvQkFBbUJDLFNBQW5CLENBQTZCLEdBQTdCO0FBQ0FILGdCQUNDSSxLQURELENBQ08sTUFEUCxFQUNlO0FBQ2RDLE9BQUksR0FEVTtBQUVkQyxl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RUFBUCxDQUFVLFFBQVY7QUFDQSxFQUZEO0FBR0EsQ0FWbUMsQ0FBcEMiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzcGVjaWFsaXN0ID0gYW5ndWxhci5tb2R1bGUoJ3NwZWNpYWxpc3QnLCBbJ3VpLnJvdXRlciddKVxuLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywnJGxvY2F0aW9uUHJvdmlkZXInLCckdXJsUm91dGVyUHJvdmlkZXInLCBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsJGxvY2F0aW9uUHJvdmlkZXIsJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblx0JHN0YXRlUHJvdmlkZXJcblx0LnN0YXRlKCdob21lJywge1xuXHRcdHVybDonLycsXG5cdFx0dGVtcGxhdGVVcmw6ICcuL2J1aWxkL2h0bWwvbWFpbi5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnbWFpbkNvbnRyb2xsZXInXG5cdH0pXG5cdC5zdGF0ZSgnc2VhcmNoJywge1xuXHRcdHVybDonL3NlYXJjaCcsXG5cdFx0dGVtcGxhdGVVcmw6ICcuL2J1aWxkL2h0bWwvc2VhcmNoLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdTZWFyY2hDdHJsJ1xuXHR9KVxuXHQuc3RhdGUoJ2RvY3RvclBvcnRhbCcsIHtcblx0XHR1cmw6Jy9kb2N0b3JQb3J0YWwnLFxuXHRcdHRlbXBsYXRlVXJsOiAnLi9idWlsZC9odG1sL2RvY3RvclBvcnRhbC5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnZG9jdG9yUG9ydGFsQ3RybCdcblx0fSlcblx0LnN0YXRlKCdxdWVzJywge1xuXHRcdHVybDonL3F1ZXMnLFxuXHRcdHRlbXBsYXRlVXJsOiAnLi9idWlsZC9odG1sL3F1ZXNhbnMuaHRtbCcsXG5cdFx0Ly9jb250cm9sbGVyOiAnUXVlc0N0cmwnXG5cdH0pXG5cdC5zdGF0ZSgnZG9jU2lnbnVwJywge1xuXHRcdHVybDonL2RvY1NpZ251cCcsXG5cdFx0dGVtcGxhdGVVcmw6ICcuL2J1aWxkL2h0bWwvZG9jU2lnbnVwLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdkb2NTaWdudXBDdHJsJ1xuXHR9KVxuXHQuc3RhdGUoJ2RvY3RvclByb2ZpbGUnLCB7XG5cdFx0dXJsOicvZG9jdG9yUHJvZmlsZScsXG5cdFx0dGVtcGxhdGVVcmw6ICcuL2J1aWxkL2h0bWwvZG9jUHJvZmlsZS5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnZG9jUHJvZmlsZUN0cmwnLFxuXHRcdGFic3RyYWN0OiB0cnVlXG5cdH0pXG5cdC5zdGF0ZSgnZG9jdG9yUHJvZmlsZS5kYXNoYm9hcmQnLCB7XG4gICAgICAgIHVybDogJycsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnLi9idWlsZC9odG1sL2RvY3Byb2ZpbGVEYXNoYm9hcmQuaHRtbCdcbiAgICB9KVxuICAgIC5zdGF0ZSgnZG9jdG9yUHJvZmlsZS5mYXEnLCB7XG4gICAgICAgIHVybDogJy9mYXEnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJy4vYnVpbGQvaHRtbC9kb2NGYXEuaHRtbCdcbiAgICB9KVxuICAgIC5zdGF0ZSgnZG9jdG9yUHJvZmlsZS5wbGFucycsIHtcbiAgICAgICAgdXJsOiAnL3BsYW5zJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcuL2J1aWxkL2h0bWwvZG9jUGxhbnMuaHRtbCdcbiAgICB9KVxuICAgIC5zdGF0ZSgnZG9jdG9yUHJvZmlsZS5wcm9maWxlJywge1xuICAgICAgICB1cmw6ICcvcHJvZmlsZScsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnLi9idWlsZC9odG1sL2RvY1VzZXJQcm9maWxlLmh0bWwnLFxuXHRcdC8vY29udHJvbGxlcjogJ2RvY1Byb2ZpbGVDdHJsJ1xuICAgIH0pXG4gICAgLnN0YXRlKCdkb2N0b3InLHtcbiAgICBcdHVybDonL2RvY3RvcicsXG4gICAgXHR0ZW1wbGF0ZVVybDonLi9idWlsZC9odG1sL2RvY0Jvb2tpbmcuaHRtbCdcbiAgICB9KVxuXHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG59XSk7XG4iLCIvL2FuZ3VsYXIubW9kdWxlKFwidWkuckNhbGVuZGFyLnRwbHNcIiwgW1wiLi4vdGVtcGxhdGUvcmNhbGVuZGFyL2NhbGVuZGVyLmh0bWxcIixcIi4uL3RlbXBsYXRlL3JjYWxlbmRhci9kYXkuaHRtbFwiLFwiLi4vdGVtcGxhdGUvcmNhbGVuZGFyL21vbnRoLmh0bWxcIixcIi4uL3RlbXBsYXRlL3JjYWxlbmRhci93ZWVrLmh0bWxcIl0pO1xuLy9hbmd1bGFyLm1vZHVsZSgndWkuckNhbGVuZGFyJywgW10pXG4gICAgc3BlY2lhbGlzdC5jb25zdGFudCgnY2FsZW5kYXJDb25maWcnLCB7XG4gICAgICAgIGZvcm1hdERheTogJ2RkJyxcbiAgICAgICAgZm9ybWF0RGF5SGVhZGVyOiAnRUVFJyxcbiAgICAgICAgZm9ybWF0RGF5VGl0bGU6ICdNTU1NIGRkLCB5eXl5JyxcbiAgICAgICAgZm9ybWF0V2Vla1RpdGxlOiAnTU1NTSB5eXl5LCBXZWVrIHcnLFxuICAgICAgICBmb3JtYXRNb250aFRpdGxlOiAnTU1NTSB5eXl5JyxcbiAgICAgICAgZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXI6ICdFRUUgZCcsXG4gICAgICAgIGZvcm1hdEhvdXJDb2x1bW46ICdoYScsXG4gICAgICAgIGNhbGVuZGFyTW9kZTogJ21vbnRoJyxcbiAgICAgICAgc2hvd1dlZWtzOiBmYWxzZSxcbiAgICAgICAgc2hvd0V2ZW50RGV0YWlsOiB0cnVlLFxuICAgICAgICBzdGFydGluZ0RheTogMCxcbiAgICAgICAgZXZlbnRTb3VyY2U6IG51bGwsXG4gICAgICAgIHF1ZXJ5TW9kZTogJ2xvY2FsJ1xuICAgIH0pXG4gICAgLmNvbnRyb2xsZXIoJ3VpLnJDYWxlbmRhci5DYWxlbmRhckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAnJHBhcnNlJywgJyRpbnRlcnBvbGF0ZScsICckbG9nJywgJ2RhdGVGaWx0ZXInLCAnY2FsZW5kYXJDb25maWcnLCBmdW5jdGlvbiAoJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgJGludGVycG9sYXRlLCAkbG9nLCBkYXRlRmlsdGVyLCBjYWxlbmRhckNvbmZpZykge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsID0geyRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcH07IC8vIG51bGxNb2RlbEN0cmw7XG5cbiAgICAgICAgLy8gQ29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ2Zvcm1hdERheScsICdmb3JtYXREYXlIZWFkZXInLCAnZm9ybWF0RGF5VGl0bGUnLCAnZm9ybWF0V2Vla1RpdGxlJywgJ2Zvcm1hdE1vbnRoVGl0bGUnLCAnZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXInLCAnZm9ybWF0SG91ckNvbHVtbicsXG4gICAgICAgICAgICAnc2hvd1dlZWtzJywgJ3Nob3dFdmVudERldGFpbCcsICdzdGFydGluZ0RheScsICdldmVudFNvdXJjZScsICdxdWVyeU1vZGUnXSwgZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHNlbGZba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRyc1trZXldKSA/IChpbmRleCA8IDcgPyAkaW50ZXJwb2xhdGUoJGF0dHJzW2tleV0pKCRzY29wZS4kcGFyZW50KSA6ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRyc1trZXldKSkgOiBjYWxlbmRhckNvbmZpZ1trZXldO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJHBhcmVudC4kd2F0Y2goJGF0dHJzLmV2ZW50U291cmNlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYub25FdmVudFNvdXJjZUNoYW5nZWQodmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuY2FsZW5kYXJNb2RlID0gJHNjb3BlLmNhbGVuZGFyTW9kZSB8fCBjYWxlbmRhckNvbmZpZy5jYWxlbmRhck1vZGU7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuaW5pdERhdGUpKSB7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRDYWxlbmRhckRhdGUgPSAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuaW5pdERhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5jdXJyZW50Q2FsZW5kYXJEYXRlKSB7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRDYWxlbmRhckRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgaWYgKCRhdHRycy5uZ01vZGVsICYmICEkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubmdNb2RlbCkpIHtcbiAgICAgICAgICAgICAgICAkcGFyc2UoJGF0dHJzLm5nTW9kZWwpLmFzc2lnbigkc2NvcGUuJHBhcmVudCwgc2VsZi5jdXJyZW50Q2FsZW5kYXJEYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uIChuZ01vZGVsQ3RybF8pIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuXG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVuZGVyKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSAhaXNOYU4oZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDYWxlbmRhckRhdGUgPSBkYXRlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuZXJyb3IoJ1wibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QsIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAwMS4wMS4xOTcwIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhbiBSRkMyODIyIG9yIElTTyA4NjAxIGRhdGUuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZGF0ZScsIGlzVmFsaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYucmVmcmVzaFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHRoaXMuX2dldFJhbmdlKHRoaXMuY3VycmVudENhbGVuZGFyRGF0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmcmVzaFZpZXcoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ2hhbmdlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFNwbGl0IGFycmF5IGludG8gc21hbGxlciBhcnJheXNcbiAgICAgICAgc2VsZi5zcGxpdCA9IGZ1bmN0aW9uIChhcnIsIHNpemUpIHtcbiAgICAgICAgICAgIHZhciBhcnJheXMgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGFycmF5cy5wdXNoKGFyci5zcGxpY2UoMCwgc2l6ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5cztcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLm9uRXZlbnRTb3VyY2VDaGFuZ2VkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50U291cmNlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoc2VsZi5fb25EYXRhTG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fb25EYXRhTG9hZGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm1vdmUgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc3RlcCA9IHNlbGYubW9kZS5zdGVwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDYWxlbmRhckRhdGUgPSBzZWxmLmN1cnJlbnRDYWxlbmRhckRhdGUsXG4gICAgICAgICAgICAgICAgeWVhciA9IGN1cnJlbnRDYWxlbmRhckRhdGUuZ2V0RnVsbFllYXIoKSArIGRpcmVjdGlvbiAqIChzdGVwLnllYXJzIHx8IDApLFxuICAgICAgICAgICAgICAgIG1vbnRoID0gY3VycmVudENhbGVuZGFyRGF0ZS5nZXRNb250aCgpICsgZGlyZWN0aW9uICogKHN0ZXAubW9udGhzIHx8IDApLFxuICAgICAgICAgICAgICAgIGRhdGUgPSBjdXJyZW50Q2FsZW5kYXJEYXRlLmdldERhdGUoKSArIGRpcmVjdGlvbiAqIChzdGVwLmRheXMgfHwgMCksXG4gICAgICAgICAgICAgICAgZmlyc3REYXlJbk5leHRNb250aDtcblxuICAgICAgICAgICAgY3VycmVudENhbGVuZGFyRGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF0ZSk7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNhbGVuZGFyTW9kZSA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgICAgIGZpcnN0RGF5SW5OZXh0TW9udGggPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIDEpO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdERheUluTmV4dE1vbnRoLmdldFRpbWUoKSA8PSBjdXJyZW50Q2FsZW5kYXJEYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRDYWxlbmRhckRhdGUgPSBuZXcgRGF0ZShmaXJzdERheUluTmV4dE1vbnRoIC0gMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxmLmN1cnJlbnRDYWxlbmRhckRhdGUpO1xuICAgICAgICAgICAgc2VsZi5yZWZyZXNoVmlldygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYubW92ZSA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICRzY29wZS5tb3ZlKGRpcmVjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5yYW5nZUNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5xdWVyeU1vZGUgPT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5ldmVudFNvdXJjZSAmJiBzZWxmLl9vbkRhdGFMb2FkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb25EYXRhTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnF1ZXJ5TW9kZSA9PT0gJ3JlbW90ZScpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJhbmdlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmFuZ2VDaGFuZ2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogdGhpcy5yYW5nZS5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiB0aGlzLnJhbmdlLmVuZFRpbWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG92ZXJsYXAoZXZlbnQxLCBldmVudDIpIHtcbiAgICAgICAgICAgIHJldHVybiAhKGV2ZW50MS5lbmRJbmRleCA8PSBldmVudDIuc3RhcnRJbmRleCB8fCBldmVudDIuZW5kSW5kZXggPD0gZXZlbnQxLnN0YXJ0SW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb24oZXZlbnRzKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgIGxlbiA9IGV2ZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWF4Q29sdW1uID0gMCxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgaXNGb3JiaWRkZW4gPSBuZXcgQXJyYXkobGVuKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCBtYXhDb2x1bW47IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzRm9yYmlkZGVuW2NvbF0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxhcChldmVudHNbaV0sIGV2ZW50c1tqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRm9yYmlkZGVuW2V2ZW50c1tqXS5wb3NpdGlvbl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29sID0gMDsgY29sIDwgbWF4Q29sdW1uOyBjb2wgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRm9yYmlkZGVuW2NvbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb2wgPCBtYXhDb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2ldLnBvc2l0aW9uID0gY29sO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50c1tpXS5wb3NpdGlvbiA9IG1heENvbHVtbisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVdpZHRoKG9yZGVyZWRFdmVudHMpIHtcbiAgICAgICAgICAgIHZhciBjZWxscyA9IG5ldyBBcnJheSgyNCksXG4gICAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICBldmVudENvdW50SW5DZWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRFdmVudEluQ2VsbDtcblxuICAgICAgICAgICAgLy9zb3J0IGJ5IHBvc2l0aW9uIGluIGRlc2NlbmRpbmcgb3JkZXIsIHRoZSByaWdodCBtb3N0IGNvbHVtbnMgc2hvdWxkIGJlIGNhbGN1bGF0ZWQgZmlyc3RcbiAgICAgICAgICAgIG9yZGVyZWRFdmVudHMuc29ydChmdW5jdGlvbiAoZXZlbnRBLCBldmVudEIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRCLnBvc2l0aW9uIC0gZXZlbnRBLnBvc2l0aW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNlbGxzW2ldID0ge1xuICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZW4gPSBvcmRlcmVkRXZlbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gb3JkZXJlZEV2ZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGV2ZW50LnN0YXJ0SW5kZXg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgZXZlbnQuZW5kSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaW5kZXhdLmV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IG9yZGVyZWRFdmVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudC5vdmVybGFwTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdmVybGFwTnVtYmVyID0gZXZlbnQucG9zaXRpb24gKyAxO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5vdmVybGFwTnVtYmVyID0gb3ZlcmxhcE51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UXVldWUgPSBbZXZlbnRdO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGV2ZW50ID0gZXZlbnRRdWV1ZS5zaGlmdCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBldmVudC5zdGFydEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgZXZlbnQuZW5kSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGxzW2luZGV4XS5jYWxjdWxhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzW2luZGV4XS5jYWxjdWxhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxzW2luZGV4XS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Q291bnRJbkNlbGwgPSBjZWxsc1tpbmRleF0uZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudENvdW50SW5DZWxsOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RXZlbnRJbkNlbGwgPSBjZWxsc1tpbmRleF0uZXZlbnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudEV2ZW50SW5DZWxsLm92ZXJsYXBOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEV2ZW50SW5DZWxsLm92ZXJsYXBOdW1iZXIgPSBvdmVybGFwTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFF1ZXVlLnB1c2goY3VycmVudEV2ZW50SW5DZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnBsYWNlRXZlbnRzID0gZnVuY3Rpb24gKG9yZGVyZWRFdmVudHMpIHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZVBvc2l0aW9uKG9yZGVyZWRFdmVudHMpO1xuICAgICAgICAgICAgY2FsY3VsYXRlV2lkdGgob3JkZXJlZEV2ZW50cyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5wbGFjZUFsbERheUV2ZW50cyA9IGZ1bmN0aW9uIChvcmRlcmVkRXZlbnRzKSB7XG4gICAgICAgICAgICBjYWxjdWxhdGVQb3NpdGlvbihvcmRlcmVkRXZlbnRzKTtcbiAgICAgICAgfTtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdjYWxlbmRhcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3NwZWNpYWxpc3QvYnVpbGQvaHRtbC9jYWxlbmRlci5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJNb2RlOiAnPScsXG4gICAgICAgICAgICAgICAgcmFuZ2VDaGFuZ2VkOiAnJicsXG4gICAgICAgICAgICAgICAgZXZlbnRTZWxlY3RlZDogJyYnLFxuICAgICAgICAgICAgICAgIHRpbWVTZWxlY3RlZDogJyYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxdWlyZTogWydjYWxlbmRhcicsICc/Xm5nTW9kZWwnXSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd1aS5yQ2FsZW5kYXIuQ2FsZW5kYXJDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGVuZGFyQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5nTW9kZWxDdHJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzY29wZS4kb24oJ2NoYW5nZURhdGUnLCBmdW5jdGlvbiAoZXZlbnQsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYWxlbmRhckN0cmwubW92ZShkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuJG9uKCdldmVudFNvdXJjZUNoYW5nZWQnLCBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyQ3RybC5vbkV2ZW50U291cmNlQ2hhbmdlZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSlcbiAgICAuZGlyZWN0aXZlKCdtb250aHZpZXcnLCBbJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbiAoZGF0ZUZpbHRlcikge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vc3BlY2lhbGlzdC9idWlsZC9odG1sL21vbnRoLmh0bWwnLFxuICAgICAgICAgICAgcmVxdWlyZTogWydeY2FsZW5kYXInLCAnP15uZ01vZGVsJ10sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgICAgICAgICAgIHZhciBjdHJsID0gY3RybHNbMF0sXG4gICAgICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd1dlZWtzID0gY3RybC5zaG93V2Vla3M7XG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd0V2ZW50RGV0YWlsID0gY3RybC5zaG93RXZlbnREZXRhaWw7XG5cbiAgICAgICAgICAgICAgICBjdHJsLm1vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHttb250aHM6IDF9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERhdGVzKHN0YXJ0RGF0ZSwgbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZXMgPSBuZXcgQXJyYXkobiksIGN1cnJlbnQgPSBuZXcgRGF0ZShzdGFydERhdGUpLCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5zZXRIb3VycygxMik7IC8vIFByZXZlbnQgcmVwZWF0ZWQgZGF0ZXMgYmVjYXVzZSBvZiB0aW1lem9uZSBidWdcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlc1tpKytdID0gbmV3IERhdGUoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnNldERhdGUoY3VycmVudC5nZXREYXRlKCkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdGVkRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHNjb3BlLnJvd3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudENhbGVuZGFyRGF0ZSA9IGN0cmwuY3VycmVudENhbGVuZGFyRGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50TW9udGggPSBjdXJyZW50Q2FsZW5kYXJEYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFllYXIgPSBjdXJyZW50Q2FsZW5kYXJEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRNb250aCA9IHNlbGVjdGVkRGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkWWVhciA9IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFllYXIgPT09IHNlbGVjdGVkWWVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TW9udGggIT09IHNlbGVjdGVkTW9udGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gY3VycmVudE1vbnRoIDwgc2VsZWN0ZWRNb250aCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGN1cnJlbnRZZWFyIDwgc2VsZWN0ZWRZZWFyID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLmN1cnJlbnRDYWxlbmRhckRhdGUgPSBzZWxlY3RlZERhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmdNb2RlbEN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgNjsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGF0ZSA9IDA7IGRhdGUgPCA3OyBkYXRlICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IGN0cmwuY29tcGFyZShzZWxlY3RlZERhdGUsIHJvd3Nbcm93XVtkYXRlXS5kYXRlKSA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Nbcm93XVtkYXRlXS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWREYXRlID0gcm93c1tyb3ddW2RhdGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS50aW1lU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS50aW1lU2VsZWN0ZWQoe3NlbGVjdGVkVGltZTogc2VsZWN0ZWREYXRlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY3RybC5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydERhdGUgPSBjdHJsLnJhbmdlLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBzdGFydERhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSAoc3RhcnREYXRlLmdldE1vbnRoKCkgKyAoZGF0ZSAhPT0gMSA/IDEgOiAwKSkgJSAxMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSBzdGFydERhdGUuZ2V0RnVsbFllYXIoKSArIChkYXRlICE9PSAxICYmIG1vbnRoID09PSAwID8gMSA6IDApO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXlzID0gZ2V0RGF0ZXMoc3RhcnREYXRlLCA0Mik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5c1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKGNyZWF0ZURhdGVPYmplY3QoZGF5c1tpXSwgY3RybC5mb3JtYXREYXkpLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiBkYXlzW2ldLmdldE1vbnRoKCkgIT09IG1vbnRoXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmxhYmVscyA9IG5ldyBBcnJheSg3KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmxhYmVsc1tqXSA9IGRhdGVGaWx0ZXIoZGF5c1tqXS5kYXRlLCBjdHJsLmZvcm1hdERheUhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyRGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHBhcmVudC50aXRsZSA9IGRhdGVGaWx0ZXIoaGVhZGVyRGF0ZSwgY3RybC5mb3JtYXRNb250aFRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucm93cyA9IGN0cmwuc3BsaXQoZGF5cywgNyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLnNob3dXZWVrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUud2Vla051bWJlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aHVyc2RheUluZGV4ID0gKDQgKyA3IC0gY3RybC5zdGFydGluZ0RheSkgJSA3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVdlZWtzID0gc2NvcGUucm93cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjdXJXZWVrID0gMDsgY3VyV2VlayA8IG51bVdlZWtzOyBjdXJXZWVrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS53ZWVrTnVtYmVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRJU084NjAxV2Vla051bWJlcihzY29wZS5yb3dzW2N1cldlZWtdW3RodXJzZGF5SW5kZXhdLmRhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVEYXRlT2JqZWN0KGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRlRmlsdGVyKGRhdGUsIGZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogY3RybC5jb21wYXJlKGRhdGUsIGN0cmwuY3VycmVudENhbGVuZGFyRGF0ZSkgPT09IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiBjdHJsLmNvbXBhcmUoZGF0ZSwgbmV3IERhdGUoKSkgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlRXZlbnQoZXZlbnQxLCBldmVudDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50MS5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50Mi5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZXZlbnQxLnN0YXJ0VGltZS5nZXRUaW1lKCkgLSBldmVudDIuc3RhcnRUaW1lLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdHJsLl9vbkRhdGFMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudFNvdXJjZSA9IGN0cmwuZXZlbnRTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBldmVudFNvdXJjZSA/IGV2ZW50U291cmNlLmxlbmd0aCA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBjdHJsLnJhbmdlLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFRpbWUgPSBjdHJsLnJhbmdlLmVuZFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGNTdGFydFRpbWUgPSBuZXcgRGF0ZShEYXRlLlVUQyhzdGFydFRpbWUuZ2V0RnVsbFllYXIoKSwgc3RhcnRUaW1lLmdldE1vbnRoKCksIHN0YXJ0VGltZS5nZXREYXRlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0Y0VuZFRpbWUgPSBuZXcgRGF0ZShEYXRlLlVUQyhlbmRUaW1lLmdldEZ1bGxZZWFyKCksIGVuZFRpbWUuZ2V0TW9udGgoKSwgZW5kVGltZS5nZXREYXRlKCkpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MgPSBzY29wZS5yb3dzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25lRGF5ID0gODY0MDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcHMgPSAwLjAwMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFdmVudCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dzLmhhc0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IDY7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChkYXRlID0gMDsgZGF0ZSA8IDc7IGRhdGUgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93c1tyb3ddW2RhdGVdLmhhc0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzW3Jvd11bZGF0ZV0uZXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Nbcm93XVtkYXRlXS5oYXNFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRTb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRTdGFydFRpbWUgPSBuZXcgRGF0ZShldmVudC5zdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50RW5kVGltZSA9IG5ldyBEYXRlKGV2ZW50LmVuZFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50RW5kVGltZSA8PSB1dGNTdGFydFRpbWUgfHwgZXZlbnRTdGFydFRpbWUgPj0gdXRjRW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdCA9IHV0Y1N0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXQgPSB1dGNFbmRUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50RW5kVGltZSA8PSBzdGFydFRpbWUgfHwgZXZlbnRTdGFydFRpbWUgPj0gZW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdCA9IHN0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXQgPSBlbmRUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVEaWZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVEaWZmZXJlbmNlU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRTdGFydFRpbWUgPD0gc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRGlmZmVyZW5jZVN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSBldmVudFN0YXJ0VGltZSAtIHN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFldmVudC5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSB0aW1lRGlmZiAtIChldmVudFN0YXJ0VGltZS5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3QuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VTdGFydCA9IHRpbWVEaWZmIC8gb25lRGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZURpZmZlcmVuY2VFbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbmRUaW1lID49IGV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSBldCAtIHN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFldmVudC5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSB0aW1lRGlmZiAtIChldC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3QuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VFbmQgPSB0aW1lRGlmZiAvIG9uZURheTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSBldmVudEVuZFRpbWUgLSBzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighZXZlbnQuYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmID0gdGltZURpZmYgLSAoZXZlbnRFbmRUaW1lLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRGlmZmVyZW5jZUVuZCA9IHRpbWVEaWZmIC8gb25lRGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHRpbWVEaWZmZXJlbmNlU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50U2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgdGltZURpZmZlcmVuY2VFbmQgLSBlcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93SW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRheUluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAlIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Nbcm93SW5kZXhdW2RheUluZGV4XS5oYXNFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQgPSByb3dzW3Jvd0luZGV4XVtkYXlJbmRleF0uZXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNldC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNldCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNldC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c1tyb3dJbmRleF1bZGF5SW5kZXhdLmV2ZW50cyA9IGV2ZW50U2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCA2OyByb3cgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChkYXRlID0gMDsgZGF0ZSA8IDc7IGRhdGUgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dzW3Jvd11bZGF0ZV0uaGFzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzW3Jvd11bZGF0ZV0uZXZlbnRzLnNvcnQoY29tcGFyZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93cy5oYXNFdmVudCA9IGhhc0V2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5kU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCA2OyByb3cgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChkYXRlID0gMDsgZGF0ZSA8IDc7IGRhdGUgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dzW3Jvd11bZGF0ZV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWREYXRlID0gcm93c1tyb3ddW2RhdGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmluZFNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY3RybC5jb21wYXJlID0gZnVuY3Rpb24gKGRhdGUxLCBkYXRlMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCksIGRhdGUxLmdldERhdGUoKSkgLSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpLCBkYXRlMi5nZXREYXRlKCkpICk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGN0cmwuX2dldFJhbmdlID0gZnVuY3Rpb24gZ2V0UmFuZ2UoY3VycmVudERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSBjdXJyZW50RGF0ZS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3REYXlPZk1vbnRoID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGN0cmwuc3RhcnRpbmdEYXkgLSBmaXJzdERheU9mTW9udGguZ2V0RGF5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCA9IChkaWZmZXJlbmNlID4gMCkgPyA3IC0gZGlmZmVyZW5jZSA6IC1kaWZmZXJlbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlID0gbmV3IERhdGUoZmlyc3REYXlPZk1vbnRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldERhdGUoLW51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbmREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZS5zZXREYXRlKGVuZERhdGUuZ2V0RGF0ZSgpICsgNDIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFRpbWU6IGVuZERhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SVNPODYwMVdlZWtOdW1iZXIoZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2tEYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRGF0ZS5zZXREYXRlKGNoZWNrRGF0ZS5nZXREYXRlKCkgKyA0IC0gKGNoZWNrRGF0ZS5nZXREYXkoKSB8fCA3KSk7IC8vIFRodXJzZGF5XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gY2hlY2tEYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEYXRlLnNldE1vbnRoKDApOyAvLyBDb21wYXJlIHdpdGggSmFuIDFcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEYXRlLnNldERhdGUoMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucm91bmQoKHRpbWUgLSBjaGVja0RhdGUpIC8gODY0MDAwMDApIC8gNykgKyAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCd3ZWVrdmlldycsIFsnZGF0ZUZpbHRlcicsICckdGltZW91dCcsIGZ1bmN0aW9uIChkYXRlRmlsdGVyLCAkdGltZW91dCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vc3BlY2lhbGlzdC9idWlsZC9odG1sL3dlZWsuaHRtbCcsXG4gICAgICAgICAgICByZXF1aXJlOiAnXmNhbGVuZGFyJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtYXRXZWVrVmlld0RheUhlYWRlciA9IGN0cmwuZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXI7XG4gICAgICAgICAgICAgICAgc2NvcGUuZm9ybWF0SG91ckNvbHVtbiA9IGN0cmwuZm9ybWF0SG91ckNvbHVtbjtcblxuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsR3V0dGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjdHJsLm1vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHtkYXlzOiA3fVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTY3JvbGxHdXR0ZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsbERheUV2ZW50Qm9keSA9IGNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCA9IGFsbERheUV2ZW50Qm9keS5vZmZzZXRXaWR0aCAtIGFsbERheUV2ZW50Qm9keS5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vcm1hbEV2ZW50Qm9keSA9IGNoaWxkcmVuWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsRXZlbnRHdXR0ZXJXaWR0aCA9IG5vcm1hbEV2ZW50Qm9keS5vZmZzZXRXaWR0aCAtIG5vcm1hbEV2ZW50Qm9keS5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGd1dHRlcldpZHRoID0gYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCB8fCBub3JtYWxFdmVudEd1dHRlcldpZHRoIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChndXR0ZXJXaWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmd1dHRlcldpZHRoID0gZ3V0dGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCA9IGd1dHRlcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5hbGxEYXlFdmVudEd1dHRlcldpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxFdmVudEd1dHRlcldpZHRoIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ub3JtYWxHdXR0ZXJXaWR0aCA9IGd1dHRlcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ub3JtYWxHdXR0ZXJXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXREYXRlcyhzdGFydFRpbWUsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG5ldyBEYXRlKHN0YXJ0VGltZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5zZXRIb3VycygxMik7IC8vIFByZXZlbnQgcmVwZWF0ZWQgZGF0ZXMgYmVjYXVzZSBvZiB0aW1lem9uZSBidWdcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlc1tpKytdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKGN1cnJlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5zZXREYXRlKGN1cnJlbnQuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGVPYmplY3RzKHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SG91ciA9IHN0YXJ0VGltZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERhdGUgPSBzdGFydFRpbWUuZ2V0RGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGhvdXIgPSAwOyBob3VyIDwgMjQ7IGhvdXIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkYXkgPSAwOyBkYXkgPCA3OyBkYXkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZShzdGFydFRpbWUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNldEhvdXJzKGN1cnJlbnRIb3VyICsgaG91cik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zZXREYXRlKGN1cnJlbnREYXRlICsgZGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGltZXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdGVkVGltZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUudGltZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS50aW1lU2VsZWN0ZWQoe3NlbGVjdGVkVGltZTogc2VsZWN0ZWRUaW1lfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY3RybC5fb25EYXRhTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBjdHJsLmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5sZW5ndGggOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gY3RybC5yYW5nZS5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lID0gY3RybC5yYW5nZS5lbmRUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXRjU3RhcnRUaW1lID0gbmV3IERhdGUoRGF0ZS5VVEMoc3RhcnRUaW1lLmdldEZ1bGxZZWFyKCksIHN0YXJ0VGltZS5nZXRNb250aCgpLCBzdGFydFRpbWUuZ2V0RGF0ZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGNFbmRUaW1lID0gbmV3IERhdGUoRGF0ZS5VVEMoZW5kVGltZS5nZXRGdWxsWWVhcigpLCBlbmRUaW1lLmdldE1vbnRoKCksIGVuZFRpbWUuZ2V0RGF0ZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzID0gc2NvcGUucm93cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzID0gc2NvcGUuZGF0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmVIb3VyID0gMzYwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uZURheSA9IDg2NDAwMDAwLFxuICAgICAgICAgICAgICAgICAgICAvL2FkZCBhbGxkYXkgZXBzXG4gICAgICAgICAgICAgICAgICAgICAgICBlcHMgPSAwLjAxNixcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5RXZlbnRJblJhbmdlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxFdmVudEluUmFuZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd3MuaGFzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZGF5ID0gMDsgZGF5IDwgNzsgZGF5ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGhvdXIgPSAwOyBob3VyIDwgMjQ7IGhvdXIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93c1tob3VyXVtkYXldLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c1tob3VyXVtkYXldLmV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzLmhhc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXMuaGFzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZGF5ID0gMDsgZGF5IDwgNzsgZGF5ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5XS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXNbZGF5XS5ldmVudHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzLmhhc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBldmVudFNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFN0YXJ0VGltZSA9IG5ldyBEYXRlKGV2ZW50LnN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRFbmRUaW1lID0gbmV3IERhdGUoZXZlbnQuZW5kVGltZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbmRUaW1lIDw9IHV0Y1N0YXJ0VGltZSB8fCBldmVudFN0YXJ0VGltZSA+PSB1dGNFbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheUV2ZW50SW5SYW5nZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsbERheVN0YXJ0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFN0YXJ0VGltZSA8PSB1dGNTdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheVN0YXJ0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5U3RhcnRJbmRleCA9IE1hdGguZmxvb3IoKGV2ZW50U3RhcnRUaW1lIC0gdXRjU3RhcnRUaW1lKSAvIG9uZURheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxsRGF5RW5kSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudEVuZFRpbWUgPj0gdXRjRW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5RW5kSW5kZXggPSBNYXRoLmNlaWwoKHV0Y0VuZFRpbWUgLSB1dGNTdGFydFRpbWUpIC8gb25lRGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheUVuZEluZGV4ID0gTWF0aC5jZWlsKChldmVudEVuZFRpbWUgLSB1dGNTdGFydFRpbWUpIC8gb25lRGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5QWxsRGF5RXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4OiBhbGxEYXlTdGFydEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kSW5kZXg6IGFsbERheUVuZEluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQgPSBkYXRlc1thbGxEYXlTdGFydEluZGV4XS5ldmVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQucHVzaChkaXNwbGF5QWxsRGF5RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0LnB1c2goZGlzcGxheUFsbERheUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzW2FsbERheVN0YXJ0SW5kZXhdLmV2ZW50cyA9IGV2ZW50U2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbmRUaW1lIDw9IHN0YXJ0VGltZSB8fCBldmVudFN0YXJ0VGltZSA+PSBlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEV2ZW50SW5SYW5nZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVEaWZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZURpZmZlcmVuY2VTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50U3RhcnRUaW1lIDw9IHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VTdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRGlmZiA9IGV2ZW50U3RhcnRUaW1lIC0gc3RhcnRUaW1lIC0gKGV2ZW50U3RhcnRUaW1lLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydFRpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmZXJlbmNlU3RhcnQgPSB0aW1lRGlmZiAvIG9uZUhvdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZURpZmZlcmVuY2VFbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudEVuZFRpbWUgPj0gZW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSBlbmRUaW1lIC0gc3RhcnRUaW1lIC0gKGVuZFRpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0VGltZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VFbmQgPSB0aW1lRGlmZiAvIG9uZUhvdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRGlmZiA9IGV2ZW50RW5kVGltZSAtIHN0YXJ0VGltZSAtIChldmVudEVuZFRpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0VGltZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIDYwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VFbmQgPSB0aW1lRGlmZiAvIG9uZUhvdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IE1hdGguZmxvb3IodGltZURpZmZlcmVuY2VTdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRJbmRleCA9IE1hdGguY2VpbCh0aW1lRGlmZmVyZW5jZUVuZCAtIGVwcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydFJvd0luZGV4ID0gc3RhcnRJbmRleCAlIDI0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5SW5kZXggPSBNYXRoLmZsb29yKHN0YXJ0SW5kZXggLyAyNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRPZkRheSA9IGRheUluZGV4ICogMjQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRSb3dJbmRleDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRPZkRheSArPSAyNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRPZkRheSA8PSBlbmRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFJvd0luZGV4ID0gMjQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFJvd0luZGV4ID0gZW5kSW5kZXggJSAyNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5RXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXg6IHN0YXJ0Um93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kSW5kZXg6IGVuZFJvd0luZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQgPSByb3dzW3N0YXJ0Um93SW5kZXhdW2RheUluZGV4XS5ldmVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNldC5wdXNoKGRpc3BsYXlFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQucHVzaChkaXNwbGF5RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Nbc3RhcnRSb3dJbmRleF1bZGF5SW5kZXhdLmV2ZW50cyA9IGV2ZW50U2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRSb3dJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChlbmRPZkRheSA8IGVuZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsRXZlbnRJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGRheSA9IDA7IGRheSA8IDc7IGRheSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yZGVyZWRFdmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGhvdXIgPSAwOyBob3VyIDwgMjQ7IGhvdXIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93c1tob3VyXVtkYXldLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZEV2ZW50cyA9IG9yZGVyZWRFdmVudHMuY29uY2F0KHJvd3NbaG91cl1bZGF5XS5ldmVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlcmVkRXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5oYXNFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucGxhY2VFdmVudHMob3JkZXJlZEV2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheUV2ZW50SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yZGVyZWRBbGxEYXlFdmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZGF5ID0gMDsgZGF5IDwgNzsgZGF5ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5XS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZEFsbERheUV2ZW50cyA9IG9yZGVyZWRBbGxEYXlFdmVudHMuY29uY2F0KGRhdGVzW2RheV0uZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJlZEFsbERheUV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXMuaGFzRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwucGxhY2VBbGxEYXlFdmVudHMob3JkZXJlZEFsbERheUV2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxHdXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGN0cmwuX3JlZnJlc2hWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3REYXlPZldlZWsgPSBjdHJsLnJhbmdlLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzID0gZ2V0RGF0ZXMoZmlyc3REYXlPZldlZWssIDcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2Vla051bWJlckluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2Vla0Zvcm1hdFBhdHRlcm4gPSAndycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTtcblxuICAgICAgICAgICAgICAgICAgICBzY29wZS5yb3dzID0gY3JlYXRlRGF0ZU9iamVjdHMoZmlyc3REYXlPZldlZWspO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5kYXRlcyA9IGRhdGVzO1xuICAgICAgICAgICAgICAgICAgICB3ZWVrTnVtYmVySW5kZXggPSBjdHJsLmZvcm1hdFdlZWtUaXRsZS5pbmRleE9mKHdlZWtGb3JtYXRQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBkYXRlRmlsdGVyKGZpcnN0RGF5T2ZXZWVrLCBjdHJsLmZvcm1hdFdlZWtUaXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3ZWVrTnVtYmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2Uod2Vla0Zvcm1hdFBhdHRlcm4sIGdldElTTzg2MDFXZWVrTnVtYmVyKGZpcnN0RGF5T2ZXZWVrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHBhcmVudC50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjdHJsLl9nZXRSYW5nZSA9IGZ1bmN0aW9uIGdldFJhbmdlKGN1cnJlbnREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gY3VycmVudERhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBjdXJyZW50RGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkgPSBjdXJyZW50RGF0ZS5nZXREYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgLSBkYXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXRlIC0gZGF5ICsgNyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogZmlyc3REYXlPZldlZWssXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiBlbmRUaW1lXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vVGhpcyBjYW4gYmUgZGVjb21pc3Npb25lZCB3aGVuIHVwZ3JhZGUgdG8gQW5ndWxhciAxLjNcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRJU084NjAxV2Vla051bWJlcihkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEYXRlLnNldERhdGUoY2hlY2tEYXRlLmdldERhdGUoKSArIDQgLSAoY2hlY2tEYXRlLmdldERheSgpIHx8IDcpKTsgLy8gVGh1cnNkYXlcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICBjaGVja0RhdGUuc2V0TW9udGgoMCk7IC8vIENvbXBhcmUgd2l0aCBKYW4gMVxuICAgICAgICAgICAgICAgICAgICBjaGVja0RhdGUuc2V0RGF0ZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3RybC5yZWZyZXNoVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKVxuICAgIC5kaXJlY3RpdmUoJ2RheXZpZXcnLCBbJ2RhdGVGaWx0ZXInLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoZGF0ZUZpbHRlciwgJHRpbWVvdXQpIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3NwZWNpYWxpc3QvYnVpbGQvaHRtbC9kYXkuaHRtbCcsXG4gICAgICAgICAgICByZXF1aXJlOiAnXmNhbGVuZGFyJyxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5mb3JtYXRIb3VyQ29sdW1uID0gY3RybC5mb3JtYXRIb3VyQ29sdW1uO1xuXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxHdXR0ZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGN0cmwubW9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcDoge2RheXM6IDF9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbEd1dHRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxsRGF5RXZlbnRCb2R5ID0gY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxEYXlFdmVudEd1dHRlcldpZHRoID0gYWxsRGF5RXZlbnRCb2R5Lm9mZnNldFdpZHRoIC0gYWxsRGF5RXZlbnRCb2R5LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsRXZlbnRCb2R5ID0gY2hpbGRyZW5bMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3JtYWxFdmVudEd1dHRlcldpZHRoID0gbm9ybWFsRXZlbnRCb2R5Lm9mZnNldFdpZHRoIC0gbm9ybWFsRXZlbnRCb2R5LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3V0dGVyV2lkdGggPSBhbGxEYXlFdmVudEd1dHRlcldpZHRoIHx8IG5vcm1hbEV2ZW50R3V0dGVyV2lkdGggfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGd1dHRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheUV2ZW50R3V0dGVyV2lkdGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFsbERheUV2ZW50R3V0dGVyV2lkdGggPSBndXR0ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsRXZlbnRHdXR0ZXJXaWR0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUubm9ybWFsR3V0dGVyV2lkdGggPSBndXR0ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUubm9ybWFsR3V0dGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlRGF0ZU9iamVjdHMoc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEhvdXIgPSBzdGFydFRpbWUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gc3RhcnRUaW1lLmdldERhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBob3VyID0gMDsgaG91ciA8IDI0OyBob3VyICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZShzdGFydFRpbWUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2V0SG91cnMoY3VycmVudEhvdXIgKyBob3VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2V0RGF0ZShjdXJyZW50RGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdGVkVGltZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUudGltZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS50aW1lU2VsZWN0ZWQoe3NlbGVjdGVkVGltZTogc2VsZWN0ZWRUaW1lfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY3RybC5fb25EYXRhTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBjdHJsLmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5sZW5ndGggOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gY3RybC5yYW5nZS5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lID0gY3RybC5yYW5nZS5lbmRUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXRjU3RhcnRUaW1lID0gbmV3IERhdGUoRGF0ZS5VVEMoc3RhcnRUaW1lLmdldEZ1bGxZZWFyKCksIHN0YXJ0VGltZS5nZXRNb250aCgpLCBzdGFydFRpbWUuZ2V0RGF0ZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGNFbmRUaW1lID0gbmV3IERhdGUoRGF0ZS5VVEMoZW5kVGltZS5nZXRGdWxsWWVhcigpLCBlbmRUaW1lLmdldE1vbnRoKCksIGVuZFRpbWUuZ2V0RGF0ZSgpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzID0gc2NvcGUucm93cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheUV2ZW50cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25lSG91ciA9IDM2MDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcHMgPSAwLjAxNixcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsRXZlbnRJblJhbmdlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dzLmhhc0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGhvdXIgPSAwOyBob3VyIDwgMjQ7IGhvdXIgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dzW2hvdXJdLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzW2hvdXJdLmV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5oYXNFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRTb3VyY2VbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRTdGFydFRpbWUgPSBuZXcgRGF0ZShldmVudC5zdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50RW5kVGltZSA9IG5ldyBEYXRlKGV2ZW50LmVuZFRpbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50RW5kVGltZSA8PSB1dGNTdGFydFRpbWUgfHwgZXZlbnRTdGFydFRpbWUgPj0gdXRjRW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXlFdmVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbmRUaW1lIDw9IHN0YXJ0VGltZSB8fCBldmVudFN0YXJ0VGltZSA+PSBlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEV2ZW50SW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVEaWZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lRGlmZmVyZW5jZVN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFN0YXJ0VGltZSA8PSBzdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmZlcmVuY2VTdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSBldmVudFN0YXJ0VGltZSAtIHN0YXJ0VGltZSAtIChldmVudFN0YXJ0VGltZS5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnRUaW1lLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNjAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmZXJlbmNlU3RhcnQgPSB0aW1lRGlmZiAvIG9uZUhvdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVEaWZmZXJlbmNlRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudEVuZFRpbWUgPj0gZW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRGlmZiA9IGVuZFRpbWUgLSBzdGFydFRpbWUgLSAoZW5kVGltZS5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnRUaW1lLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNjAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmZXJlbmNlRW5kID0gdGltZURpZmYgLyBvbmVIb3VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmID0gZXZlbnRFbmRUaW1lIC0gc3RhcnRUaW1lIC0gKGV2ZW50RW5kVGltZS5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnRUaW1lLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNjAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmZXJlbmNlRW5kID0gdGltZURpZmYgLyBvbmVIb3VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gTWF0aC5mbG9vcih0aW1lRGlmZmVyZW5jZVN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kSW5kZXggPSBNYXRoLmNlaWwodGltZURpZmZlcmVuY2VFbmQgLSBlcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRJbmRleDogZW5kSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQgPSByb3dzW3N0YXJ0SW5kZXhdLmV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXQucHVzaChkaXNwbGF5RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2V0LnB1c2goZGlzcGxheUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c1tzdGFydEluZGV4XS5ldmVudHMgPSBldmVudFNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsRXZlbnRJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JkZXJlZEV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChob3VyID0gMDsgaG91ciA8IDI0OyBob3VyICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93c1tob3VyXS5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZEV2ZW50cyA9IG9yZGVyZWRFdmVudHMuY29uY2F0KHJvd3NbaG91cl0uZXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJlZEV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5oYXNFdmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5wbGFjZUV2ZW50cyhvcmRlcmVkRXZlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFsbERheUV2ZW50cyA9IGFsbERheUV2ZW50cztcblxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxHdXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGN0cmwuX3JlZnJlc2hWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRpbmdEYXRlID0gY3RybC5yYW5nZS5zdGFydFRpbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucm93cyA9IGNyZWF0ZURhdGVPYmplY3RzKHN0YXJ0aW5nRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFsbERheUV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5kYXRlcyA9IFtzdGFydGluZ0RhdGVdO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LnRpdGxlID0gZGF0ZUZpbHRlcihzdGFydGluZ0RhdGUsIGN0cmwuZm9ybWF0RGF5VGl0bGUpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjdHJsLl9nZXRSYW5nZSA9IGZ1bmN0aW9uIGdldFJhbmdlKGN1cnJlbnREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gY3VycmVudERhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBjdXJyZW50RGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRhdGUgKyAxKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBzdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiBlbmRUaW1lXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3JjYWxlbmRhci9jYWxlbmRhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcmNhbGVuZGFyL2NhbGVuZGFyLmh0bWxcIixcbiAgICBcIjxkaXYgbmctc3dpdGNoPVxcXCJjYWxlbmRhck1vZGVcXFwiPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJyb3cgY2FsZW5kYXItbmF2YmFyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcIm5hdi1sZWZ0IGNvbC14cy0yXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKC0xKVxcXCI+PGlcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYWxlbmRhci1oZWFkZXIgY29sLXhzLThcXFwiPnt7dGl0bGV9fTwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFwibmF2LXJpZ2h0IGNvbC14cy0yXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIj48aVxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPjwvYnV0dG9uPlxcblwiICtcbiAgICBcIiAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8ZGF5dmlldyBuZy1zd2l0Y2gtd2hlbj1cXFwiZGF5XFxcIj48L2RheXZpZXc+XFxuXCIgK1xuICAgIFwiICAgIDxtb250aHZpZXcgbmctc3dpdGNoLXdoZW49XFxcIm1vbnRoXFxcIj48L21vbnRodmlldz5cXG5cIiArXG4gICAgXCIgICAgPHdlZWt2aWV3IG5nLXN3aXRjaC13aGVuPVxcXCJ3ZWVrXFxcIj48L3dlZWt2aWV3PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9yY2FsZW5kYXIvZGF5Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9yY2FsZW5kYXIvZGF5Lmh0bWxcIixcbiAgICBcIjxkaXY+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcImRheXZpZXctYWxsZGF5LXRhYmxlXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcImRheXZpZXctYWxsZGF5LWxhYmVsXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICBhbGwgZGF5XFxuXCIgK1xuICAgIFwiICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcImRheXZpZXctYWxsZGF5LWNvbnRlbnQtd3JhcHBlclxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCBkYXl2aWV3LWFsbGRheS1jb250ZW50LXRhYmxlXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImNhbGVuZGFyLWNlbGxcXFwiIG5nLWNsYXNzPVxcXCJ7J2NhbGVuZGFyLWV2ZW50LXdyYXAnOmFsbERheUV2ZW50c31cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9XFxcIntoZWlnaHQ6IDI1KmFsbERheUV2ZW50cy5sZW5ndGgrJ3B4J31cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbmctcmVwZWF0PVxcXCJkaXNwbGF5RXZlbnQgaW4gYWxsRGF5RXZlbnRzXFxcIiBjbGFzcz1cXFwiY2FsZW5kYXItZXZlbnRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1jbGljaz1cXFwiZXZlbnRTZWxlY3RlZCh7ZXZlbnQ6ZGlzcGxheUV2ZW50LmV2ZW50fSlcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1zdHlsZT1cXFwie3RvcDogMjUqJGluZGV4KydweCcsd2lkdGg6ICcxMDAlJyxoZWlnaHQ6JzI1cHgnfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhbGVuZGFyLWV2ZW50LWlubmVyXFxcIj57e2Rpc3BsYXlFdmVudC5ldmVudC50aXRsZX19PC9kaXY+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPHRkIG5nLWlmPVxcXCJhbGxEYXlFdmVudEd1dHRlcldpZHRoPjBcXFwiIGNsYXNzPVxcXCJndXR0ZXItY29sdW1uXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgIG5nLXN0eWxlPVxcXCJ7d2lkdGg6YWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCsncHgnfVxcXCI+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPC90Ym9keT5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RhYmxlPlxcblwiICtcbiAgICBcIiAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJzY3JvbGxhYmxlXFxcIiBzdHlsZT1cXFwiaGVpZ2h0OiA0MDBweFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWZpeGVkXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cXFwidG0gaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImNhbGVuZGFyLWhvdXItY29sdW1uIHRleHQtY2VudGVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIHt7dG0udGltZSB8IGRhdGU6IGZvcm1hdEhvdXJDb2x1bW59fVxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImNhbGVuZGFyLWNlbGxcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QodG0udGltZSlcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1jbGFzcz1cXFwieydjYWxlbmRhci1ldmVudC13cmFwJzogdG0uZXZlbnRzfVxcXCIgbmctaWY9XFxcInRtLmV2ZW50c1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XFxcImRpc3BsYXlFdmVudCBpbiB0bS5ldmVudHNcXFwiIGNsYXNzPVxcXCJjYWxlbmRhci1ldmVudFxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLWNsaWNrPVxcXCJldmVudFNlbGVjdGVkKHtldmVudDpkaXNwbGF5RXZlbnQuZXZlbnR9KVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXN0eWxlPVxcXCJ7bGVmdDogMTAwL2Rpc3BsYXlFdmVudC5vdmVybGFwTnVtYmVyKmRpc3BsYXlFdmVudC5wb3NpdGlvbisnJScsIHdpZHRoOiAxMDAvZGlzcGxheUV2ZW50Lm92ZXJsYXBOdW1iZXIrJyUnLCBoZWlnaHQ6IDM3KihkaXNwbGF5RXZlbnQuZW5kSW5kZXgtZGlzcGxheUV2ZW50LnN0YXJ0SW5kZXgpKydweCd9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FsZW5kYXItZXZlbnQtaW5uZXJcXFwiPnt7ZGlzcGxheUV2ZW50LmV2ZW50LnRpdGxlfX08L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPC90Ym9keT5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvdGFibGU+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9yY2FsZW5kYXIvbW9udGguaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3JjYWxlbmRhci9tb250aC5odG1sXCIsXG4gICAgXCI8ZGl2PlxcblwiICtcbiAgICBcIiAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWZpeGVkIG1vbnRodmlldy1kYXRldGFibGUgbW9udGh2aWV3LWRhdGV0YWJsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPHRoIG5nLXNob3c9XFxcInNob3dXZWVrc1xcXCIgY2xhc3M9XFxcImNhbGVuZGFyLXdlZWstY29sdW1uIHRleHQtY2VudGVyXFxcIj4jPC90aD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8dGggbmctcmVwZWF0PVxcXCJsYWJlbCBpbiBsYWJlbHMgdHJhY2sgYnkgJGluZGV4XFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8c21hbGw+e3tsYWJlbH19PC9zbWFsbD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RoPlxcblwiICtcbiAgICBcIiAgICAgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dHIgbmctcmVwZWF0PVxcXCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93V2Vla3NcXFwiIGNsYXNzPVxcXCJjYWxlbmRhci13ZWVrLWNvbHVtbiB0ZXh0LWNlbnRlclxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDxzbWFsbD48ZW0+e3sgd2Vla051bWJlcnNbJGluZGV4XSB9fTwvZW0+PC9zbWFsbD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvdyB0cmFjayBieSBkdC5kYXRlXFxcIiBjbGFzcz1cXFwibW9udGh2aWV3LWRhdGVDZWxsXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICBuZy1jbGFzcz1cXFwieyd0ZXh0LWNlbnRlcic6dHJ1ZSwgJ21vbnRodmlldy1jdXJyZW50JzogZHQuY3VycmVudCYmIWR0LnNlbGVjdGVkJiYhZHQuaGFzRXZlbnQsJ21vbnRodmlldy1zZWNvbmRhcnktd2l0aC1ldmVudCc6IGR0LnNlY29uZGFyeSYmZHQuaGFzRXZlbnQsICdtb250aHZpZXctcHJpbWFyeS13aXRoLWV2ZW50JzohZHQuc2Vjb25kYXJ5JiZkdC5oYXNFdmVudCYmIWR0LnNlbGVjdGVkLCAnbW9udGh2aWV3LXNlbGVjdGVkJzogZHQuc2VsZWN0ZWR9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPGRpdiBuZy1jbGFzcz1cXFwieyd0ZXh0LW11dGVkJzpkdC5zZWNvbmRhcnl9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIHt7ZHQubGFiZWx9fVxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvdGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDwvdGFibGU+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgbmctaWY9XFxcInNob3dFdmVudERldGFpbFxcXCIgY2xhc3M9XFxcImV2ZW50LWRldGFpbC1jb250YWluZXJcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Nyb2xsYWJsZVxcXCIgc3R5bGU9XFxcImhlaWdodDogMjAwcHhcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtc3RyaXBlZCB0YWJsZS1maXhlZFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XFxcImV2ZW50IGluIHNlbGVjdGVkRGF0ZS5ldmVudHNcXFwiIG5nLWlmPVxcXCJzZWxlY3RlZERhdGUuZXZlbnRzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIDx0ZCBuZy1pZj1cXFwiIWV2ZW50LmFsbERheVxcXCIgY2xhc3M9XFxcIm1vbnRodmlldy1ldmVudGRldGFpbC10aW1lY29sdW1uXFxcIj57e2V2ZW50LnN0YXJ0VGltZXxkYXRlOiAnSEg6bW0nfX1cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICAtXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAge3tldmVudC5lbmRUaW1lfGRhdGU6ICdISDptbSd9fVxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIDx0ZCBuZy1pZj1cXFwiZXZlbnQuYWxsRGF5XFxcIiBjbGFzcz1cXFwibW9udGh2aWV3LWV2ZW50ZGV0YWlsLXRpbWVjb2x1bW5cXFwiPkFsbCBkYXk8L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJldmVudC1kZXRhaWxcXFwiIG5nLWNsaWNrPVxcXCJldmVudFNlbGVjdGVkKHtldmVudDpldmVudH0pXFxcIj57e2V2ZW50LnRpdGxlfX08L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICA8dHIgbmctaWY9XFxcIiFzZWxlY3RlZERhdGUuZXZlbnRzXFxcIj48dGQgY2xhc3M9XFxcIm5vLWV2ZW50LWxhYmVsXFxcIj5ObyBFdmVudHM8L3RkPjwvdHI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPC90YWJsZT5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcmNhbGVuZGFyL3dlZWsuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3JjYWxlbmRhci93ZWVrLmh0bWxcIixcbiAgICBcIjxkaXY+XFxuXCIgK1xuICAgIFwiICAgIDx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtZml4ZWQgd2Vla3ZpZXctaGVhZGVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDx0aGVhZD5cXG5cIiArXG4gICAgXCIgICAgICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8dGggY2xhc3M9XFxcImNhbGVuZGFyLWhvdXItY29sdW1uXFxcIj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDx0aCBuZy1yZXBlYXQ9XFxcImR0IGluIGRhdGVzXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXIgd2Vla3ZpZXctaGVhZGVyLWxhYmVsXFxcIj57e2R0LmRhdGV8IGRhdGU6XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIGZvcm1hdFdlZWtWaWV3RGF5SGVhZGVyfX1cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RoPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDx0aCBuZy1pZj1cXFwiZ3V0dGVyV2lkdGg+MFxcXCIgY2xhc3M9XFxcImd1dHRlci1jb2x1bW5cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IGd1dHRlcldpZHRoKydweCd9XFxcIj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdGFibGU+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcIndlZWt2aWV3LWFsbGRheS10YWJsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3ZWVrdmlldy1hbGxkYXktbGFiZWxcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIGFsbCBkYXlcXG5cIiArXG4gICAgXCIgICAgICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFwid2Vla3ZpZXctYWxsZGF5LWNvbnRlbnQtd3JhcHBlclxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1maXhlZCB3ZWVrdmlldy1hbGxkYXktY29udGVudC10YWJsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPHRkIG5nLXJlcGVhdD1cXFwiZGF5IGluIGRhdGVzIHRyYWNrIGJ5IGRheS5kYXRlXFxcIiBjbGFzcz1cXFwiY2FsZW5kYXItY2VsbFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1jbGFzcz1cXFwieydjYWxlbmRhci1ldmVudC13cmFwJzogZGF5LmV2ZW50c31cXFwiIG5nLWlmPVxcXCJkYXkuZXZlbnRzXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9XFxcIntoZWlnaHQ6IDI1KmRheS5ldmVudHMubGVuZ3RoKydweCd9XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XFxcImRpc3BsYXlFdmVudCBpbiBkYXkuZXZlbnRzXFxcIiBjbGFzcz1cXFwiY2FsZW5kYXItZXZlbnRcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctY2xpY2s9XFxcImV2ZW50U2VsZWN0ZWQoe2V2ZW50OmRpc3BsYXlFdmVudC5ldmVudH0pXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXN0eWxlPVxcXCJ7dG9wOiAyNSpkaXNwbGF5RXZlbnQucG9zaXRpb24rJ3B4Jywgd2lkdGg6IDEwMCooZGlzcGxheUV2ZW50LmVuZEluZGV4LWRpc3BsYXlFdmVudC5zdGFydEluZGV4KSsnJScsIGhlaWdodDogJzI1cHgnfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYWxlbmRhci1ldmVudC1pbm5lclxcXCI+e3tkaXNwbGF5RXZlbnQuZXZlbnQudGl0bGV9fTwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICA8dGQgbmctaWY9XFxcImFsbERheUV2ZW50R3V0dGVyV2lkdGg+MFxcXCIgY2xhc3M9XFxcImd1dHRlci1jb2x1bW5cXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9XFxcInt3aWR0aDogYWxsRGF5RXZlbnRHdXR0ZXJXaWR0aCsncHgnfVxcXCI+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPC90Ym9keT5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8L3RhYmxlPlxcblwiICtcbiAgICBcIiAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJzY3JvbGxhYmxlXFxcIiBzdHlsZT1cXFwiaGVpZ2h0OiA0MDBweFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWZpeGVkXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJjYWxlbmRhci1ob3VyLWNvbHVtbiB0ZXh0LWNlbnRlclxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICB7e3Jvd1swXS50aW1lIHwgZGF0ZTogZm9ybWF0SG91ckNvbHVtbn19XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcInRtIGluIHJvdyB0cmFjayBieSB0bS50aW1lXFxcIiBjbGFzcz1cXFwiY2FsZW5kYXItY2VsbFxcXCIgbmctY2xpY2s9XFxcInNlbGVjdCh0bS50aW1lKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLWNsYXNzPVxcXCJ7J2NhbGVuZGFyLWV2ZW50LXdyYXAnOiB0bS5ldmVudHN9XFxcIiBuZy1pZj1cXFwidG0uZXZlbnRzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cXFwiZGlzcGxheUV2ZW50IGluIHRtLmV2ZW50c1xcXCIgY2xhc3M9XFxcImNhbGVuZGFyLWV2ZW50XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctY2xpY2s9XFxcImV2ZW50U2VsZWN0ZWQoe2V2ZW50OmRpc3BsYXlFdmVudC5ldmVudH0pXFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9XFxcIntsZWZ0OiAxMDAvZGlzcGxheUV2ZW50Lm92ZXJsYXBOdW1iZXIqZGlzcGxheUV2ZW50LnBvc2l0aW9uKyclJywgd2lkdGg6IDEwMC9kaXNwbGF5RXZlbnQub3ZlcmxhcE51bWJlcisnJScsIGhlaWdodDogMzcqKGRpc3BsYXlFdmVudC5lbmRJbmRleC1kaXNwbGF5RXZlbnQuc3RhcnRJbmRleCkrJ3B4J31cXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjYWxlbmRhci1ldmVudC1pbm5lclxcXCI+e3tkaXNwbGF5RXZlbnQuZXZlbnQudGl0bGV9fTwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgICAgIDx0ZCBuZy1pZj1cXFwibm9ybWFsR3V0dGVyV2lkdGg+MFxcXCIgY2xhc3M9XFxcImd1dHRlci1jb2x1bW5cXFwiIG5nLXN0eWxlPVxcXCJ7d2lkdGg6IG5vcm1hbEd1dHRlcldpZHRoKydweCd9XFxcIj48L3RkPlxcblwiICtcbiAgICBcIiAgICAgICAgICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgICAgICAgICAgPC90Ym9keT5cXG5cIiArXG4gICAgXCIgICAgICAgIDwvdGFibGU+XFxuXCIgK1xuICAgIFwiICAgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlwiKTtcbn1dKTsiLCJzcGVjaWFsaXN0LmZhY3RvcnkoJ2RhdGFTZXJ2aWNlJywgWyckaHR0cCcsJyR3aW5kb3cnLCBmdW5jdGlvbigkaHR0cCwkd2luZG93KSB7XG5cdHZhciBzaWduVXBEb2NPYmogPSB7fTtcblx0dmFyIHVybCA9ICdodHRwOi8vcXVpY2tzcGVjaWFsaXN0LmNvbS9zcGVjaWFsaXN0L3NwZWNpYWxpc3RBUEkvcHVibGljL2luZGV4LnBocCc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0RnVsbERvY3Rvckxpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwrJy9kb2N0b3IvbGlzdCcpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tVc2VyRXhpc3RhbmNlOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB9LFxuICAgICAgICBzaWduVXBEb2N0b3I6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QodXJsKycvZG9jdG9yL2FkZCcsb2JqKS50aGVuKGZ1bmN0aW9uKHJlc3Ape1xuICAgICAgICAgICAgICAgIHNldFNlc3Npb24ocmVzcCk7XG4gICAgICAgICAgICBcdHJldHVybiByZXNwO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIHZhciBvYmogPSB7XG4gICAgICAgICAgICAvLyAgICAgJ3Nlc3Npb25JZCc6ICcyMzQ1ODg2MycsXG4gICAgICAgICAgICAvLyAgICAgJ2RvY0RhdGEnOiB7ICduYW1lJzogJ25pdGluJywgJ2VtYWlsJzogJ250bmdpcmlAZ21haWwuY29tJywgJ2FkZHJlc3MnOiAna3NqZG52IHNrdm5qJywgJ2NpdHknOiAnR3VyZ2FvbicsICdzdGF0ZSc6ICdoYXJ5YW5hJywgJ21vYic6ICc3MDQxMjk5Mjg3MycsICdjbGluaWMnOiAna3NqYmQnLCAnZmVlJzogJzY5OScsICdodl9mZWUnOiAnNzM2NScgfVxuICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgIC8vIHNpZ25VcERvY09iaiA9IG9iajtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkYXRhU2VydmljZScsc2lnblVwRG9jT2JqKTtcbiAgICAgICAgICAgIC8vcmV0dXJuIHNpZ25VcERvY09iajtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U2Vzc2lvbjpmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgICAgICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTZXNzaW9uOmZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERvY3RvckRhdGE6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCsnL2RvY3Rvci8nK2lkKS50aGVuKGZ1bmN0aW9uKHJlc3Ape1xuICAgICAgICAgICAgXHRyZXR1cm4gcmVzcC5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrVXNlck5hbWU6ZnVuY3Rpb24odW5hbWUpe1xuICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKycvZG9jdG9yL2RvY1VzZXJuYW1lLycrdW5hbWUpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3A7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBsb2FkUHJvZmlsZVBpYzpmdW5jdGlvbihvYmope1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QodXJsKycvZG9jdG9yL3Byb2ZpbGVQaWMnLG9iaikudGhlbihmdW5jdGlvbihyZXNwKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9O1xufV0pXG4iLCJzcGVjaWFsaXN0LmNvbnRyb2xsZXIoJ2RvY1Byb2ZpbGVDdHJsJywgWyckc2NvcGUnLCAnZGF0YVNlcnZpY2UnLCBmdW5jdGlvbigkc2NvcGUsIGRhdGFTZXJ2aWNlKSB7XG4gICAgdmFyIGRvY3RvcklkID0gNDtcbiAgICAkc2NvcGUuZWRpdFByb2ZpbGUyID0gZmFsc2U7XG4gICAgJHNjb3BlLmVkaXRQcm9maWxlID0gdHJ1ZTtcbiAgICAvLyBkYXRhU2VydmljZS5nZXREb2N0b3JEYXRhKGRvY3RvcklkKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgLy8gICAgICRzY29wZS5kb2N0b3JEYXRhID0gZGF0YVswXTtcbiAgICAvLyB9KTtcbiAgICAkc2NvcGUuZG9jSnNvbjtcbiAgICBkYXRhU2VydmljZS5nZXREb2N0b3JEYXRhKCcxNCcpLnRoZW4oZnVuY3Rpb24ocmVzcCl7XG4gICAgICAgICRzY29wZS5kb2NKc29uID0gcmVzcFswXTtcbiAgICAgICAgY29uc29sZS5sb2coJ2RvY3RvciBkYXRhJywgJHNjb3BlLmRvY0pzb24pO1xuICAgIH0pO1xuXG5cbiAgICAvLyQoJ2Zvcm0nKS5vbignc3VibWl0JywgdXBsb2FkRmlsZXMpO1xuXG4gICAgLy8gQ2F0Y2ggdGhlIGZvcm0gc3VibWl0IGFuZCB1cGxvYWQgdGhlIGZpbGVzXG4gICAgJHNjb3BlLnVwbG9hZEZpbGVzID0gZnVuY3Rpb24oZXZlbnQpXG4gICAge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFN0b3Agc3R1ZmYgaGFwcGVuaW5nXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFRvdGFsbHkgc3RvcCBzdHVmZiBoYXBwZW5pbmdcblxuICAgICAgICAvLyBTVEFSVCBBIExPQURJTkcgU1BJTk5FUiBIRVJFXG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgZm9ybWRhdGEgb2JqZWN0IGFuZCBhZGQgdGhlIGZpbGVzXG4gICAgICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgZGF0YVNlcnZpY2UudXBsb2FkUHJvZmlsZVBpYyhkYXRhKS50aGVuKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cblxuXG5cbiAgICAkc2NvcGUuc2hvd0VkaXRGb3JtID0gZnVuY3Rpb24odGFiSWQpe1xuICAgICAgICBpZiAodGFiSWQgPT0gJzEnKXtcbiAgICAgICAgICAgICRzY29wZS5lZGl0UHJvZmlsZTIgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5lZGl0UHJvZmlsZSA9IHRydWU7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIjFcIikuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiMlwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhYklkID09ICcyJykge1xuICAgICAgICAgICAgJHNjb3BlLmVkaXRQcm9maWxlMiA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuZWRpdFByb2ZpbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiMlwiKS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIxXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcyJykuY2xhc3NOYW1lICs9ICdhY3RpdmUnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJHNjb3BlLm1vZGUgPSAnd2Vlayc7XG4gICAgJHNjb3BlLmV2ZW50U291cmNlID0gY3JlYXRlUmFuZG9tRXZlbnRzKCk7XG4gICAgJHNjb3BlLnNlbGVjdGVkID0gMDtcbiAgICAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gaW5kZXg7XG4gICAgfVxuICAgICRzY29wZS5uYXZQcm9maWxlTGlzdCA9IFt7ICdzcmVmJzogJ2Rhc2hib2FyZCcsICd0aXRsZSc6ICdEYXNoYm9hcmQnIH0sIHsgJ3NyZWYnOiAnZmFxJywgJ3RpdGxlJzogJ0ZBUScgfSwgeyAnc3JlZic6ICdwbGFucycsICd0aXRsZSc6ICdQcmljaW5nIFBsYW5zJyB9LCB7ICdzcmVmJzogJ3Byb2ZpbGUnLCAndGl0bGUnOiAnVXNlciBBY2NvdW50JyB9XTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmRvbUV2ZW50cygpIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDUwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgICAgICAgICAgIHZhciBzdGFydERheSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkwKSAtIDQ1O1xuICAgICAgICAgICAgdmFyIGVuZERheSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpICsgc3RhcnREYXk7XG4gICAgICAgICAgICB2YXIgc3RhcnRUaW1lO1xuICAgICAgICAgICAgdmFyIGVuZFRpbWU7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RhcnREYXkpKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kRGF5ID09PSBzdGFydERheSkge1xuICAgICAgICAgICAgICAgICAgICBlbmREYXkgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW5kVGltZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGF0ZS5nZXRVVENNb250aCgpLCBkYXRlLmdldFVUQ0RhdGUoKSArIGVuZERheSkpO1xuICAgICAgICAgICAgICAgIGV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdBbGwgRGF5IC0gJyArIGksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICBlbmRUaW1lOiBlbmRUaW1lLFxuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0TWludXRlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjQgKiA2MCk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZE1pbnV0ZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE4MCkgKyBzdGFydE1pbnV0ZTtcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKyBzdGFydERheSwgMCwgZGF0ZS5nZXRNaW51dGVzKCkgKyBzdGFydE1pbnV0ZSk7XG4gICAgICAgICAgICAgICAgZW5kVGltZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIGVuZERheSwgMCwgZGF0ZS5nZXRNaW51dGVzKCkgKyBlbmRNaW51dGUpO1xuICAgICAgICAgICAgICAgIGV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGkgKyAnTXIgTml0aW4nLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgZW5kVGltZTogZW5kVGltZSxcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudHM7XG4gICAgfVxufV0pO1xuIiwic3BlY2lhbGlzdC5jb250cm9sbGVyKCdkb2NTaWdudXBDdHJsJywgWyckc2NvcGUnLCckc3RhdGUnLCdkYXRhU2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsJHN0YXRlLGRhdGFTZXJ2aWNlKSB7XG5cdCRzY29wZS5zZWNvbmRGb3JtID0gZmFsc2U7XG5cdCRzY29wZS5maXJzdEZvcm0gPSB0cnVlO1xuXHQkc2NvcGUuZW1haWxfZXJyID0gZmFsc2U7XG5cdCRzY29wZS5wd2RfZXJyID0gZmFsc2U7XG5cdCRzY29wZS5lcnJfbXNnID0gZmFsc2U7XG5cdCRzY29wZS5tb2JpbGVSZWdFeCA9IFwiL15bMC05XXsxMCwxMH0kLztcIjtcblx0JHNjb3BlLnBpbkNvZGVSZWdFeCA9IFwiL15bMC05XXs2LDZ9JC87XCI7XG5cdHZhciBzaWduVXBEYXRhID0ge307XG5cblx0JHNjb3BlLmNoZWNrdXNlcm5hbWUgPSBmdW5jdGlvbigpe1xuXHRcdGlmKGRhdGFTZXJ2aWNlLmNoZWNrVXNlck5hbWUoJHNjb3BlLnVzZXJuYW1lKSA9PSAxKXtcblx0XHRcdCRzY29wZS51c2VybmFtZUV4aXN0ID0gdHJ1ZTtcblx0XHR9ZWxzZXtcblx0XHQgICAgJHNjb3BlLnVzZXJuYW1lRXhpc3QgPSBmYWxzZTtcblx0XHR9XG5cdH1cblx0JHNjb3BlLmNoZWNrRW1haWxQd2RWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRpZih2YWx1ZSA9PSAnZW1haWwnKXtcblx0XHRcdGlmKCRzY29wZS5lbWFpbCAhPT0gJHNjb3BlLmNvbmZFbWFpbCl7XG5cdFx0XHRcdCRzY29wZS5lbWFpbF9lcnIgPSB0cnVlO1xuXHRcdFx0XHQkc2NvcGUuZW1haWxfZXJyX21zZyA9ICdFbWFpbCBkaWQgbm90IG1hdGNoJztcblx0XHRcdH1lbHNle1xuXHRcdFx0XHQkc2NvcGUuZW1haWxfZXJyID0gZmFsc2U7XG5cdFx0XHRcdCRzY29wZS5lbWFpbF9lcnJfbXNnID0gJyc7XG5cdFx0XHR9XG5cdFx0fWVsc2UgaWYodmFsdWUgPT0ncHdkJyl7XG5cdFx0XHRpZigkc2NvcGUucGFzcyAhPT0gJHNjb3BlLmNvbmZQYXNzKXtcblx0XHRcdFx0JHNjb3BlLnBhc3NfZXJyID0gdHJ1ZTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHQkc2NvcGUucGFzc19lcnIgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XHRcdFxuXHR9O1xuXHQkc2NvcGUuYnJpbmdTZWNvbmRGb3JtID0gZnVuY3Rpb24oaXNWYWxpZCl7XG5cdFx0aWYoaXNWYWxpZCl7XG5cdFx0XHQkc2NvcGUuZXJyX21zZyA9IGZhbHNlO1xuXHRcdFx0c2lnblVwRGF0YS5uYW1lID0gJHNjb3BlLmZuYW1lICtcIiBcIisgJHNjb3BlLmxuYW1lO1xuXHRcdFx0aWYoJHNjb3BlLmVtYWlsID09ICRzY29wZS5jb25mRW1haWwpe1xuXHRcdFx0XHRzaWduVXBEYXRhLmVtYWlsID0gJHNjb3BlLmVtYWlsO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdCRzY29wZS5lbWFpbF9lcnIgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYoJHNjb3BlLnBhc3MgPT0gJHNjb3BlLmNvbmZQYXNzKXtcblx0XHRcdFx0c2lnblVwRGF0YS5wYXNzd29yZCA9ICRzY29wZS5wYXNzO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdCRzY29wZS5wYXNzX2VyciA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZighJHNjb3BlLnBhc3NfZXJyICYmICEkc2NvcGUuZW1haWxfZXJyKXtcblx0XHRcdFx0JHNjb3BlLnNlY29uZEZvcm0gPSB0cnVlO1xuXHRcdFx0XHQkc2NvcGUuZmlyc3RGb3JtID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmKCFpc1ZhbGlkKXtcblx0XHRcdCRzY29wZS5lcnJfbXNnID0gdHJ1ZTtcblx0XHR9XG5cdH07XG5cblx0JHNjb3BlLnNlbmRTaWdudXBEb2MgPSBmdW5jdGlvbihpc1ZhbGlkKXtcblx0XHRpZihpc1ZhbGlkKXtcblx0XHRcdCRzY29wZS5lcnJfbXNnID0gZmFsc2U7XG5cdFx0XHRzaWduVXBEYXRhLmFkZHJlc3MgPSAkc2NvcGUuYWRkcmVzczEgKyAnICcgKyAkc2NvcGUuYWRkcmVzczI7XG5cdFx0XHRzaWduVXBEYXRhLnBpbiA9ICRzY29wZS5waW5Db2RlO1xuXHRcdFx0c2lnblVwRGF0YS5jaXR5ID0gJHNjb3BlLmNpdHk7XG5cdFx0XHRzaWduVXBEYXRhLnN0YXRlID0gJHNjb3BlLnN0YXRlO1xuXHRcdFx0c2lnblVwRGF0YS5tb2JpbGUgPSAkc2NvcGUubW9iaWxlTm87XG5cdFx0XHRzaWduVXBEYXRhLmNsaW5pY19uYW1lID0gJHNjb3BlLmNsaW5pY05hbWU7XG5cdFx0XHRzaWduVXBEYXRhLmZlZSA9ICRzY29wZS5jbGluaWNGZWU7XG5cdFx0XHRzaWduVXBEYXRhLmh2X2ZlZSA9ICRzY29wZS5ob21lVmlzaXQ7XG5cdFx0XHRkYXRhU2VydmljZS5zaWduVXBEb2N0b3Ioc2lnblVwRGF0YSkudGhlbihmdW5jdGlvbihyZXNwKXtcblx0XHRcdFx0aWYocmVzcCl7XG5cdFx0XHRcdFx0JHN0YXRlLmdvKCdkb2N0b3JQcm9maWxlLmRhc2hib2FyZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0Ly90byBiZSByZW1vdmVkXG5cdFx0XHQvLyBkYXRhU2VydmljZS5zaWduVXBEb2N0b3Ioc2lnblVwRGF0YSkudGhlbihmdW5jdGlvbihyZXNwKXtcblx0XHRcdC8vIFx0JHN0YXRlLmdvKCdkb2N0b3JQcm9maWxlLmRhc2hib2FyZCcpO1xuXHRcdFx0Ly8gfSk7XG5cdFx0fSBlbHNlIGlmKCFpc1ZhbGlkKXtcblx0XHRcdCRzY29wZS5lcnJfbXNnID0gdHJ1ZTtcblx0XHR9XG5cdH07XG59XSk7Iiwic3BlY2lhbGlzdC5jb250cm9sbGVyKCdkb2N0b3JQb3J0YWxDdHJsJywgWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG5cdFxufV0pIiwiYW5ndWxhci5tb2R1bGUoJ3NwZWNpYWxpc3QudGFnaXQnLCBbXSlcbiAgICAuZGlyZWN0aXZlKCd0YWdJdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHRhZ3M6IFwiPVwiLFxuICAgICAgICAgICAgICAgIHJlbW92ZTogXCImXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXY+PHVsIGNsYXNzPVwidGFnc1wiPjxsaSAgY2xhc3M9XCJ0YWdpdFwiIG5nLXJlcGVhdD1cInRhZyBpbiB0YWdzIFwiPjxzcGFuIGNsYXNzPVwidGFnVGV4dFwiPnt7Ojp0YWcubmFtZX19PC9zcGFuPjxhICBuZy1jbGljaz1cInJlbW92ZSh7aWR4OnRhZy5pZH0pXCIgY2xhc3M9XCJkQ3Jvc3NcIiBocmVmPVwiamF2YXNjcmlwdDo7XCI+eDwvYT48L2xpPjwvdWw+PC9kaXY+JyxcblxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY3RybCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCRzY29wZSwgJGF0dHJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnc3BlY2lhbGlzdC5saXN0aW5nJywgW10pXG4gICAgIC5kaXJlY3RpdmUoJ25nUmVwZWF0RG9uZU5vdGlmaWNhdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG5cbiAgICAgICAgICAgIGlmICghc2NvcGUuJHBhcmVudC5tdWx0aVNlbGVjdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLnNlbGVjdGVkSWQgJiYgc2NvcGUuc2VsZWN0ZWRJZC5sZW5ndGghPTAgJiYgc2NvcGUuJGxhc3QgJiYgIXNjb3BlLiRwYXJlbnQuZmlyc3RSZWFwZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHBhcmVudC5maXJzdFJlYXBldCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzY29wZS5zZWxlY3RlZElkWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNjb3BlLmRhdGFbc2NvcGUuaWRIYXNoLmluZGV4T2Yoc2NvcGUuc2VsZWN0ZWRJZFswXSldLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6IHNjb3BlLnNlbGVjdGVkSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNjb3BlLiRwYXJlbnQuaWRIYXNoKTtcbiAgICAgICAgfTtcbiAgICB9KS5kaXJlY3RpdmUoJ2xpc3RpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgJ2RhdGEnOiAnPScsXG4gICAgICAgICAgICAgICAgJ3R1cGxlQ291bnQnOiAnQCcsXG4gICAgICAgICAgICAgICAgJ3NlbGVjdGVkSWQnOiAnPScsXG4gICAgICAgICAgICAgICAgJ21heEhlaWdodCc6ICdAJyxcbiAgICAgICAgICAgICAgICAnY2FsbGJhY2snOiAnJmxpc3RpbmdDYWxsYmFjaycsXG4gICAgICAgICAgICAgICAgJ211bHRpU2VsZWN0JzogJ0AnLFxuICAgICAgICAgICAgICAgICdmaWx0ZXJOYW1lJzogXCI9XCIsXG4gICAgICAgICAgICAgICAgJ2FjdGl2ZSc6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICBcbiAgICAgICAgICAgIC8vdGVtcGxhdGU6ICc8dWw+PGxpIG5nLXJlcGVhdD1cIml0ZW0gaW4gZGF0YXxsaW1pdFRvOnR1cGxlQ291bnRcIiBuZy1yZXBlYXQtZG9uZS1ub3RpZmljYXRpb249e3tpdGVtLmlkfX0gbmctY2xpY2s9XCJjaGVja0l0ZW0odGhpcylcIj48aW5wdXQgbmctaWY9XCJtdWx0aVNlbGVjdFwiIHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPWl0ZW0uY2hlY2tlZD48ZGl2IHN0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7XCIgbmctdHJhbnNjbHVkZT48L2Rpdj48L2xpPjwvdWw+JyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVsPjxsaSBuZy1yZXBlYXQ9XCJpdGVtIGluIGRhdGFcIiBuZy1yZXBlYXQtZG9uZS1ub3RpZmljYXRpb249e3tpdGVtLmlkfX0gbmctY2xpY2s9XCJjaGVja0l0ZW0odGhpcylcIiBuZy1jbGFzcz1cInthY3RpdmU6aXRlbS5hY3RpdmUsIG5vdFNlbGVjdGFibGU6aXRlbS5ub3RTZWxlY3RhYmxlfVwiPjxpbnB1dCBuZy1pZj1cIm11bHRpU2VsZWN0ID09IFxcJ3RydWVcXCcgJiYgIWl0ZW0ubm90U2VsZWN0YWJsZVwiIHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPWl0ZW0uY2hlY2tlZD57e3NlbGVjdGVkTmFtZX19PGRpdiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrOyB3aWR0aDphdXRvO1wiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+PC9saT48L3VsPicsXG5cbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBpRWxlbWVudCwgaUF0dHIsIGNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuZmlyc3RSZWFwZXQgPSAwO1xuICAgICAgICAgICAgICAgIHNjb3BlLnNlbE9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIHNjb3BlLmlkSGFzaCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGEuZm9yRWFjaChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5pZEhhc2gucHVzaCh4LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2NvcGUuJG9uKCdzZWxlY3QnLCBmdW5jdGlvbihldmVudCwgc29tZURhdGEsIGZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1Ub1NlbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1Ub1NlbCA9IHNjb3BlLmRhdGFbc2NvcGUuaWRIYXNoLmluZGV4T2YoZmxhZyldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVRvU2VsID0gc2NvcGUuZGF0YVtzY29wZS5hY3RpdmVdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2hlY2tJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtJzogZWxlbVRvU2VsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRvbignZGVTZWxlY3QnLGZ1bmN0aW9uKGV2ZW50LGlkKXtcblxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKG1hdGNoSWR4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5hY3RpdmUgPCBpRWxlbWVudC5maW5kKCdsaScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmFjdGl2ZSA9PT0gbWF0Y2hJZHg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5hY3RpdmUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHJldHVybiBzY29wZS5hY3RpdmUgPT09IG1hdGNoSWR4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLmNoZWNrSXRlbSA9IGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuYXR0ciA9IGlBdHRyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pdGVtLm5vdFNlbGVjdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaUVsZW1lbnQuYWRkQ2xhc3MoJ25vdFNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmNoZWNrU2VsZWN0aW9uKF90aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBzY29wZS5jYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnaXRlbSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogX3RoaXMuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBfdGhpcy5pdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6IHNjb3BlLnNlbGVjdGVkSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogX3RoaXMuaXRlbS5jaGVja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgIHNjb3BlLmNoZWNrU2VsZWN0aW9uID0gZnVuY3Rpb24odCkgeyAvLyBhcnJheSBhbmQgc2VsZWN0ZWRJZCB3aWxsIGJlIHRoZSBzYW1lIGFmdGVyIHRoaXMsIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSB0Lml0ZW0uaWQ7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkSWQgPSBzY29wZS5zZWxlY3RlZElkIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYXR0ci5tdWx0aVNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc2NvcGUuc2VsZWN0ZWRJZC5pbmRleE9mKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkSWQucHVzaChpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsT2JqW2lkXSA9IHQuaXRlbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaXRlbS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWRJZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZS5zZWxPYmpbaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkSWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkSWQucHVzaChpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3QuaXRlbS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdzcGVjaWFsaXN0LmRyb29wZScsIFsnc3BlY2lhbGlzdC5saXN0aW5nJywgJ3NwZWNpYWxpc3QudGFnaXQnXSlcblxuLmRpcmVjdGl2ZSgnZHJvb3BlJywgW1wiJGRvY3VtZW50XCIsIGZ1bmN0aW9uKCRkb2N1bWVudCkge1xuICAgIC8vIFJ1bnMgZHVyaW5nIGNvbXBpbGVcbiAgICByZXR1cm4ge1xuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgb3B0aW9uOiBcIj1cIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiBcIiZkcm9vcGVDYWxsYmFja1wiLFxuICAgICAgICAgICAgZGF0YTogXCI9XCIsXG4gICAgICAgICAgICBzZWxlY3RlZElkOiBcIj1cIixcbiAgICAgICAgICAgIGFwaTogXCI9XCJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSkge30sXG4gICAgICAgIHJlc3RyaWN0OiAnRScsIC8vIEUgPSBFbGVtZW50LCBBID0gQXR0cmlidXRlLCBDID0gQ2xhc3MsIE0gPSBDb21tZW50XG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cImRkd25cIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiRER3cmFwXCI+JyArXG4gICAgICAgICAgICAnPHVsIGNsYXNzPVwiRERzZWFyY2hcIj4nICtcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJmcnN0XCIgc3R5bGU9XCJmbG9hdDogbm9uZTtcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiRERpbnB1dFdyYXBcIj4nICtcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImRkSWNvbiBzcmNoVHh0XCIgbmctY2xpY2s9XCJzaG93RHJvcCgpXCI+PC9zcGFuPicgK1xuICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLWNsaWNrPVwic2hvd0Ryb3AoKVwiIGlkPVwiXCIgY2xhc3M9XCJzcmNoVHh0XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgc3R5bGU9XCJjb2xvcjogcmdiKDY4LCA2OCwgNjgpO1wiIG5nLW1vZGVsPVwic2VsZWN0ZWROYW1lXCI+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAnPC9saT4nICtcbiAgICAgICAgICAgICc8L3VsPicgK1xuICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkZF9kd25cIiBuZy1zaG93PVwic2hvd1wiPicgK1xuICAgICAgICAgICAgJzxsaXN0aW5nIHR1cGxlY291bnQ9XCIxMFwiIG11bHRpLXNlbGVjdD1cInt7b3B0aW9uLm11bHRpc2VsZWN0fX1cIiBhY3RpdmU9XCJhY3RpdmVJbmRleFwiIHNlbGVjdGVkLWlkID1cInNlbGVjdGVkSWRcIiBsaXN0aW5nLWNhbGxiYWNrPVwibGlzdGluZ0NhbGxiYWNrKGl0ZW0pXCIgZGF0YT1cImRhdGFcIiBmaWx0ZXItbmFtZT1cInNlbGVjdGVkTmFtZVwiPicgK1xuICAgICAgICAgICAgJzxkaXY+PHNwYW4+e3skcGFyZW50Lml0ZW0ubmFtZX19PC9zcGFuPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvbGlzdGluZz4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgICAgICB2YXIgX19vcHRpb25zX18gPSB7XG4gICAgICAgICAgICAgICAgZmllbGRBdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnRW50ZXIgeW91ciBWYWx1ZXMnXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmtpbmcoc2NvcGUsIGlFbG0sIGlBdHRycywgY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIHNjb3BlLmFjdGl2ZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGlFbG0pO1xuICAgICAgICAgICAgICAgIC8vYmluZCBrZXlib2FyZCBldmVudHM6IGFycm93cyB1cCgzOCkgLyBkb3duKDQwKSwgZW50ZXIoMTMpIGFuZCB0YWIoOSksIGVzYygyNylcbiAgICAgICAgICAgICAgICBpRWxtLmZpbmQoJ2lucHV0Jykub24oJ2tleWRvd24nLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChldnQud2hpY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuc2VsZWN0ZWROYW1lID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5ibHVyT3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kYnJvYWRjYXN0KCdzZWxlY3QnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGFbc2NvcGUuYWN0aXZlSW5kZXhdLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFjdGl2ZUluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGF0YVtzY29wZS5hY3RpdmVJbmRleF0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGFbc2NvcGUuYWN0aXZlSW5kZXhdLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFjdGl2ZUluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGF0YVtzY29wZS5hY3RpdmVJbmRleF0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZS5vcHRpb25zID0gYW5ndWxhci5tZXJnZShfX29wdGlvbnNfXywgc2NvcGUub3B0aW9uKTtcbiAgICAgICAgICAgICAgICBzY29wZS50YWdzID0gW107XG4gICAgICAgICAgICAgICAgaUVsbS5maW5kKCdpbnB1dCcpLmF0dHIoc2NvcGUub3B0aW9ucy5maWVsZEF0dHIpXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogW2Z1bmN0aW9uIGNhbGxlZCBvbiBsaXN0IGNsaWNrLSBhZnRlciBsaXN0aW5nIGNhbGxiYWNrXVxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSAge1t0eXBlXX0gcmV0T2JqIFtvYmplY3QgZnJvbSBsaXN0aW5nIGNhbGxiYWNrXVxuICAgICAgICAgICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICBbdGFncyBvYmplY3QgdXBkYXRlZF1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzY29wZS5hcGkgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0RHJvb3BlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2NvcGUuYWN0aXZlID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZE5hbWUgPSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWRJZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RJdGVtOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBpZCApID09PSAnW29iamVjdCBBcnJheV0nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgnc2VsZWN0Jyx0aGlzLGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgnc2VsZWN0JywgdGhpcywgaWQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzY29wZS5saXN0aW5nQ2FsbGJhY2sgPSBmdW5jdGlvbihyZXRPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1RhZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiByZXRPYmouaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZXRPYmoubmFtZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzY29wZS50YWdVcGRhdGUobmV3VGFnLCByZXRPYmouY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUudGFnVXBkYXRlID0gZnVuY3Rpb24odGFnT2JqLCBjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5vcHRpb24ubXVsdGlzZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudGFncy5wdXNoKHRhZ09iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHNjb3BlLnRhZ3MuaW5kZXhPZih0YWdPYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnRhZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkTmFtZSA9IHRhZ09iai5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJpdGVtXCI6IHRhZ09ialxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFtjYWxsZWQgb24gaW5wdXQgZm9jdXMgLSB3aWxsIHNob3cgdGhlIGxpc3RdXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2NvcGUuc2hvd0Ryb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHNjb3BlLm9wdGlvbi5tdWx0aXNlbGVjdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5sYXN0U2VsZWN0ZWQgPSBzY29wZS5zZWxlY3RlZE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZE5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNob3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHBhckVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXJhREQnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHNjcm9sbENvbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGRfZHduJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhciBmc3RFbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGRfZHduJykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaVwiKVswXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2NvcGUuc2Nyb2xsSGFuZGxlcihwYXJFbG0sIHNjcm9sbENvbnQsIGZzdEVsbSwgZnN0RWxtKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogW3JlbW92aW5nIGFsbCB0YWdzXVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNjb3BlLnJlbW92ZUFsbFRhZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUudGFncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUub3B0aW9uLm11bHRpc2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2NvcGUuc2VsZWN0ZWRJZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHNjb3BlLmRhdGEuaW5kZXhPZihzY29wZS5zZWxlY3RlZElkW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5kYXRhW2luZGV4XS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZE5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3BlLmJsdXJPdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsdXJPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNjb3BlLnNlbGVjdGVkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6ICdubydcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBzY29wZS5zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzY29wZS5saXN0aW5nQ2FsbGJhY2soYmx1ck9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFtoaWRlIGxpc3QgZHJvcCBvbiBkb2N1bWVudCBjbGlja11cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkZG9jdW1lbnQub24oXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpLmhhc0NsYXNzKCdzcmNoVHh0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNjb3BlLnNlbGVjdGVkTmFtZSA9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZE5hbWUgPSBzY29wZS5sYXN0U2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgLy8gIHNjb3BlLmJsdXJPdXQoKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XSk7Iiwic3BlY2lhbGlzdC5jb250cm9sbGVyKCdtYWluQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuXHR2YXIganNvbiA9IFt7J25hbWUnOidEZWxoaSd9LHsnbmFtZSc6J05vaWRhJ30seyduYW1lJzonR3VyZ2Fvbid9XVxuXHQkc2NvcGUub3B0aW9ucyA9IHt9O1xuXHQkc2NvcGUub3B0aW9ucyA9IHtcblx0XHRkYXRhOmpzb24sXG5cdFx0bXVsdGlzZWxlY3Q6dHJ1ZSxcblx0XHRtYXhIZWlnaHQ6IDI1MFxuXHR9O1xuXHRcdCRzY29wZS5kYXRhID0gW3snbmFtZSc6J0RlbGhpJ30seyduYW1lJzonTm9pZGEnfSx7J25hbWUnOidHdXJnYW9uJ31dXG4gICAgICAgICRzY29wZS5zZWxlY3RlZElkID0gW107XG4gICAgICAgICRzY29wZS5vbkNsaWNrRnVuYyA9IGZ1bmN0aW9uKG9iajEpIHtcbiAgICAgICAgICAgIC8vJHNjb3BlLmNiT2JqID0gb2JqO1xuICAgICAgICAgIGNvbnNvbGUubG9nKG9iajEpO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5hcGkgPSB7fTtcbn1dKSIsInNwZWNpYWxpc3QuY29udHJvbGxlcignU2VhcmNoQ3RybCcsIFsnJHNjb3BlJywnJHN0YXRlJywnZGF0YVNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCRzdGF0ZSxkYXRhU2VydmljZSkge1xuXHQkc2NvcGUuZG9jdG9ySWQ7XG5cdGRhdGFTZXJ2aWNlLmdldEZ1bGxEb2N0b3JMaXN0KCkudGhlbihmdW5jdGlvbihkYXRhKXtcblx0XHRjb25zb2xlLmxvZyhkYXRhKTtcblx0XHQkc2NvcGUuZG9jdG9yTGlzdCA9IGRhdGE7XG5cdFx0JHNjb3BlLmRvY3RvcklkID0gZGF0YS5pZDtcblx0fSk7XG5cdCRzY29wZS5kb2N0b3JCb29rID0gZnVuY3Rpb24oaWQpe1xuXHRcdCRzdGF0ZS5nbygnZG9jdG9yJyk7XG5cdH1cbn1dKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
