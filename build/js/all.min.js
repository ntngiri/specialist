var specialist=angular.module("specialist",["ui.router","naukri.droope","ngImgCrop","ngTagsInput"]).config(["$stateProvider","$locationProvider","$urlRouterProvider",function(e,t,a){a.otherwise("/"),e.state("home",{url:"/",templateUrl:"./build/html/main.html",controller:"mainController"}).state("search",{url:"/search",templateUrl:"./build/html/search.html",controller:"SearchCtrl"}).state("doctorPortal",{url:"/doctorPortal",templateUrl:"./build/html/doctorPortal.html",controller:"doctorPortalCtrl"}).state("ques",{url:"/ques",templateUrl:"./build/html/quesans.html"}).state("docSignup",{url:"/docSignup",templateUrl:"./build/html/docSignup.html",controller:"docSignupCtrl"}).state("docLogin",{url:"/docLogin",templateUrl:"./build/html/docLogin.html",controller:"docLoginCtrl"}).state("doctorProfile",{url:"/doctorProfile",templateUrl:"./build/html/docProfile.html",controller:"docProfileCtrl",abstract:!0}).state("doctorProfile.dashboard",{url:"",templateUrl:"./build/html/docprofileDashboard.html"}).state("doctorProfile.faq",{url:"/faq",templateUrl:"./build/html/docFaq.html"}).state("doctorProfile.plans",{url:"/plans",templateUrl:"./build/html/docPlans.html"}).state("doctorProfile.profile",{url:"/profile",templateUrl:"./build/html/DocUserProfile.html",controller:"docEditProfileCtrl"}).state("doctor",{url:"/doctor",params:{id:null},templateUrl:"./build/html/docBooking.html",controller:"docBookingCtrl"}),t.html5Mode(!0)}]);specialist.constant("calendarConfig",{formatDay:"dd",formatDayHeader:"EEE",formatDayTitle:"MMMM dd, yyyy",formatWeekTitle:"MMMM yyyy, Week w",formatMonthTitle:"MMMM yyyy",formatWeekViewDayHeader:"EEE d",formatHourColumn:"ha",calendarMode:"month",showWeeks:!1,showEventDetail:!0,startingDay:0,eventSource:null,queryMode:"local"}).controller("ui.rCalendar.CalendarController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","calendarConfig",function(e,t,a,n,i,r,o){"use strict";function s(e,t){return!(e.endIndex<=t.startIndex||t.endIndex<=e.startIndex)}function l(e){var t,a,n,i=e.length,r=0,o=new Array(i);for(t=0;t<i;t+=1){for(n=0;n<r;n+=1)o[n]=!1;for(a=0;a<t;a+=1)s(e[t],e[a])&&(o[e[a].position]=!0);for(n=0;n<r&&o[n];n+=1);e[t].position=n<r?n:r++}}function c(e){var t,a,n,i,r,o,s,l=new Array(24);for(e.sort(function(e,t){return t.position-e.position}),n=0;n<24;n+=1)l[n]={calculated:!1,events:[]};for(r=e.length,n=0;n<r;n+=1)for(t=e[n],a=t.startIndex;a<t.endIndex;)l[a].events.push(t),a+=1;for(n=0;n<r;){if(t=e[n],!t.overlapNumber){var c=t.position+1;t.overlapNumber=c;for(var d=[t];t=d.shift();)for(a=t.startIndex;a<t.endIndex;){if(!l[a].calculated&&(l[a].calculated=!0,l[a].events))for(o=l[a].events.length,i=0;i<o;i+=1)s=l[a].events[i],s.overlapNumber||(s.overlapNumber=c,d.push(s));a+=1}}n+=1}}var d=this,u={$setViewValue:angular.noop};angular.forEach(["formatDay","formatDayHeader","formatDayTitle","formatWeekTitle","formatMonthTitle","formatWeekViewDayHeader","formatHourColumn","showWeeks","showEventDetail","startingDay","eventSource","queryMode"],function(a,i){d[a]=angular.isDefined(t[a])?i<7?n(t[a])(e.$parent):e.$parent.$eval(t[a]):o[a]}),e.$parent.$watch(t.eventSource,function(e){d.onEventSourceChanged(e)}),e.calendarMode=e.calendarMode||o.calendarMode,angular.isDefined(t.initDate)&&(d.currentCalendarDate=e.$parent.$eval(t.initDate)),d.currentCalendarDate||(d.currentCalendarDate=new Date,t.ngModel&&!e.$parent.$eval(t.ngModel)&&a(t.ngModel).assign(e.$parent,d.currentCalendarDate)),d.init=function(e){u=e,u.$render=function(){d.render()}},d.render=function(){if(u.$modelValue){var e=new Date(u.$modelValue),t=!isNaN(e);t?this.currentCalendarDate=e:i.error('"ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),u.$setValidity("date",t)}this.refreshView()},d.refreshView=function(){this.mode&&(this.range=this._getRange(this.currentCalendarDate),this._refreshView(),this.rangeChanged())},d.split=function(e,t){for(var a=[];e.length>0;)a.push(e.splice(0,t));return a},d.onEventSourceChanged=function(e){d.eventSource=e,d._onDataLoaded&&d._onDataLoaded()},e.move=function(t){var a,n=d.mode.step,i=d.currentCalendarDate,r=i.getFullYear()+t*(n.years||0),o=i.getMonth()+t*(n.months||0),s=i.getDate()+t*(n.days||0);i.setFullYear(r,o,s),"month"===e.calendarMode&&(a=new Date(r,o+1,1),a.getTime()<=i.getTime()&&(d.currentCalendarDate=new Date(a-864e5))),u.$setViewValue(d.currentCalendarDate),d.refreshView()},d.move=function(t){e.move(t)},d.rangeChanged=function(){"local"===d.queryMode?d.eventSource&&d._onDataLoaded&&d._onDataLoaded():"remote"===d.queryMode&&e.rangeChanged&&e.rangeChanged({startTime:this.range.startTime,endTime:this.range.endTime})},d.placeEvents=function(e){l(e),c(e)},d.placeAllDayEvents=function(e){l(e)}}]).directive("calendar",function(){"use strict";return{restrict:"EA",replace:!0,templateUrl:"./build/html/calender.html",scope:{calendarMode:"=",rangeChanged:"&",eventSelected:"&",timeSelected:"&"},require:["calendar","?^ngModel"],controller:"ui.rCalendar.CalendarController",link:function(e,t,a,n){var i=n[0],r=n[1];r&&i.init(r),e.$on("changeDate",function(e,t){i.move(t)}),e.$on("eventSourceChanged",function(e,t){i.onEventSourceChanged(t)})}}}).directive("monthview",["dateFilter",function(e){"use strict";return{restrict:"EA",replace:!0,templateUrl:"./build/html/month.html",require:["^calendar","?^ngModel"],link:function(t,a,n,i){function r(e,t){var a=new Array(t),n=new Date(e),i=0;for(n.setHours(12);i<t;)a[i++]=new Date(n),n.setDate(n.getDate()+1);return a}function o(t,a){return{date:t,label:e(t,a),selected:0===c.compare(t,c.currentCalendarDate),current:0===c.compare(t,new Date)}}function s(e,t){return e.allDay?1:t.allDay?-1:e.startTime.getTime()-t.startTime.getTime()}function l(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var a=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((a-t)/864e5)/7)+1}var c=i[0],d=i[1];t.showWeeks=c.showWeeks,t.showEventDetail=c.showEventDetail,c.mode={step:{months:1}},t.select=function(e){var a=t.rows;if(a){var n=c.currentCalendarDate,i=n.getMonth(),r=n.getFullYear(),o=e.getMonth(),s=e.getFullYear(),l=0;if(r===s?i!==o&&(l=i<o?1:-1):l=r<s?1:-1,c.currentCalendarDate=e,d&&d.$setViewValue(e),0===l)for(var u=0;u<6;u+=1)for(var h=0;h<7;h+=1){var g=0===c.compare(e,a[u][h].date);a[u][h].selected=g,g&&(t.selectedDate=a[u][h])}else c.refreshView();t.timeSelected&&t.timeSelected({selectedTime:e})}},c._refreshView=function(){for(var a=c.range.startTime,n=a.getDate(),i=(a.getMonth()+(1!==n?1:0))%12,s=a.getFullYear()+(1!==n&&0===i?1:0),d=r(a,42),u=0;u<42;u++)d[u]=angular.extend(o(d[u],c.formatDay),{secondary:d[u].getMonth()!==i});t.labels=new Array(7);for(var h=0;h<7;h++)t.labels[h]=e(d[h].date,c.formatDayHeader);var g=new Date(s,i,1);if(t.$parent.title=e(g,c.formatMonthTitle),t.rows=c.split(d,7),t.showWeeks){t.weekNumbers=[];for(var f=(11-c.startingDay)%7,m=t.rows.length,p=0;p<m;p++)t.weekNumbers.push(l(t.rows[p][f].date))}},c._onDataLoaded=function(){var e,a,n=c.eventSource,i=n?n.length:0,r=c.range.startTime,o=c.range.endTime,l=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate())),d=new Date(Date.UTC(o.getFullYear(),o.getMonth(),o.getDate())),u=t.rows,h=!1;if(u.hasEvent)for(e=0;e<6;e+=1)for(a=0;a<7;a+=1)u[e][a].hasEvent&&(u[e][a].events=null,u[e][a].hasEvent=!1);for(var g=0;g<i;g+=1){var f,m,p=n[g],v=new Date(p.startTime),y=new Date(p.endTime);if(p.allDay){if(y<=l||v>=d)continue;f=l,m=d}else{if(y<=r||v>=o)continue;f=r,m=o}var w,D;v<=f?D=0:(w=v-f,p.allDay||(w-=6e4*(v.getTimezoneOffset()-f.getTimezoneOffset())),D=w/864e5);var S;y>=m?(w=m-f,p.allDay||(w-=6e4*(m.getTimezoneOffset()-f.getTimezoneOffset())),S=w/864e5):(w=y-f,p.allDay||(w-=6e4*(y.getTimezoneOffset()-f.getTimezoneOffset())),S=w/864e5);for(var _,b=Math.floor(D);b<S-.001;){var I=Math.floor(b/7),C=Math.floor(b%7);u[I][C].hasEvent=!0,_=u[I][C].events,_?_.push(p):(_=[],_.push(p),u[I][C].events=_),b+=1}}for(e=0;e<6;e+=1)for(a=0;a<7;a+=1)u[e][a].hasEvent&&(h=!0,u[e][a].events.sort(s));u.hasEvent=h;var x=!1;for(e=0;e<6;e+=1){for(a=0;a<7;a+=1)if(u[e][a].selected){t.selectedDate=u[e][a],x=!0;break}if(x)break}},c.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},c._getRange=function(e){var t,a=e.getFullYear(),n=e.getMonth(),i=new Date(a,n,1),r=c.startingDay-i.getDay(),o=r>0?7-r:-r,s=new Date(i);return o>0&&s.setDate(1-o),t=new Date(s),t.setDate(t.getDate()+42),{startTime:s,endTime:t}},c.refreshView()}}}]).directive("weekview",["dateFilter","$timeout",function(e,t){"use strict";return{restrict:"EA",replace:!0,templateUrl:"./build/html/week.html",require:"^calendar",link:function(a,n,i,r){function o(){var e=n.children(),t=e[1].children[1],i=t.offsetWidth-t.clientWidth,r=e[2],o=r.offsetWidth-r.clientWidth,s=i||o||0;s>0&&(a.gutterWidth=s,a.allDayEventGutterWidth=i<=0?s:0,a.normalGutterWidth=o<=0?s:0)}function s(e,t){var a=new Array(t),n=new Date(e),i=0;for(n.setHours(12);i<t;)a[i++]={date:new Date(n)},n.setDate(n.getDate()+1);return a}function l(e){for(var t,a,n=[],i=e.getHours(),r=e.getDate(),o=0;o<24;o+=1){t=[];for(var s=0;s<7;s+=1)a=new Date(e.getTime()),a.setHours(i+o),a.setDate(r+s),t.push({time:a});n.push(t)}return n}function c(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var a=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((a-t)/864e5)/7)+1}a.formatWeekViewDayHeader=r.formatWeekViewDayHeader,a.formatHourColumn=r.formatHourColumn,t(function(){o()}),r.mode={step:{days:7}},a.select=function(e){a.timeSelected&&a.timeSelected({selectedTime:e})},r._onDataLoaded=function(){var e,n,i,s=r.eventSource,l=s?s.length:0,c=r.range.startTime,d=r.range.endTime,u=new Date(Date.UTC(c.getFullYear(),c.getMonth(),c.getDate())),h=new Date(Date.UTC(d.getFullYear(),d.getMonth(),d.getDate())),g=a.rows,f=a.dates,m=!1,p=!1;if(g.hasEvent){for(n=0;n<7;n+=1)for(i=0;i<24;i+=1)g[i][n].events&&(g[i][n].events=null);g.hasEvent=!1}if(f.hasEvent){for(n=0;n<7;n+=1)f[n].events&&(f[n].events=null);f.hasEvent=!1}for(var v=0;v<l;v+=1){var y=s[v],w=new Date(y.startTime),D=new Date(y.endTime);if(y.allDay){if(D<=u||w>=h)continue;m=!0;var S;S=w<=u?0:Math.floor((w-u)/864e5);var _;_=D>=h?Math.ceil((h-u)/864e5):Math.ceil((D-u)/864e5);var b={event:y,startIndex:S,endIndex:_};e=f[S].events,e?e.push(b):(e=[],e.push(b),f[S].events=e)}else{if(D<=c||w>=d)continue;p=!0;var I,C;w<=c?C=0:(I=w-c-6e4*(w.getTimezoneOffset()-c.getTimezoneOffset()),C=I/36e5);var x;D>=d?(I=d-c-6e4*(d.getTimezoneOffset()-c.getTimezoneOffset()),x=I/36e5):(I=D-c-6e4*(D.getTimezoneOffset()-c.getTimezoneOffset()),x=I/36e5);var z,k=Math.floor(C),M=Math.ceil(x-.016),R=k%24,E=Math.floor(k/24),P=24*E;do{P+=24,z=P<=M?24:M%24;var T={event:y,startIndex:R,endIndex:z};e=g[R][E].events,e?e.push(T):(e=[],e.push(T),g[R][E].events=e),R=0,E+=1}while(P<M)}}if(p)for(n=0;n<7;n+=1){var F=[];for(i=0;i<24;i+=1)g[i][n].events&&(F=F.concat(g[i][n].events));F.length>0&&(g.hasEvent=!0,r.placeEvents(F))}if(m){var U=[];for(n=0;n<7;n+=1)f[n].events&&(U=U.concat(f[n].events));U.length>0&&(f.hasEvent=!0,r.placeAllDayEvents(U))}t(function(){o()})},r._refreshView=function(){var t,n,i=r.range.startTime,o=s(i,7);a.rows=l(i),a.dates=o,t=r.formatWeekTitle.indexOf("w"),n=e(i,r.formatWeekTitle),t!==-1&&(n=n.replace("w",c(i))),a.$parent.title=n},r._getRange=function(e){var t=e.getFullYear(),a=e.getMonth(),n=e.getDate(),i=e.getDay();return{startTime:new Date(t,a,n-i),endTime:new Date(t,a,n-i+7)}},r.refreshView()}}}]).directive("dayview",["dateFilter","$timeout",function(e,t){"use strict";return{restrict:"EA",replace:!0,templateUrl:"./build/html/day.html",require:"^calendar",link:function(a,n,i,r){function o(){var e=n.children(),t=e[0].children[1],i=t.offsetWidth-t.clientWidth,r=e[1],o=r.offsetWidth-r.clientWidth,s=i||o||0;s>0&&(a.allDayEventGutterWidth=i<=0?s:0,a.normalGutterWidth=o<=0?s:0)}function s(e){for(var t,a=[],n=e.getHours(),i=e.getDate(),r=0;r<24;r+=1)t=new Date(e.getTime()),t.setHours(n+r),t.setDate(i),a.push({time:t});return a}a.formatHourColumn=r.formatHourColumn,t(function(){o()}),r.mode={step:{days:1}},a.select=function(e){a.timeSelected&&a.timeSelected({selectedTime:e})},r._onDataLoaded=function(){var e,n,i=r.eventSource,s=i?i.length:0,l=r.range.startTime,c=r.range.endTime,d=new Date(Date.UTC(l.getFullYear(),l.getMonth(),l.getDate())),u=new Date(Date.UTC(c.getFullYear(),c.getMonth(),c.getDate())),h=a.rows,g=[],f=!1;if(h.hasEvent){for(n=0;n<24;n+=1)h[n].events&&(h[n].events=null);h.hasEvent=!1}for(var m=0;m<s;m+=1){var p=i[m],v=new Date(p.startTime),y=new Date(p.endTime);if(p.allDay){if(y<=d||v>=u)continue;g.push({event:p})}else{if(y<=l||v>=c)continue;f=!0;var w,D;v<=l?D=0:(w=v-l-6e4*(v.getTimezoneOffset()-l.getTimezoneOffset()),D=w/36e5);var S;y>=c?(w=c-l-6e4*(c.getTimezoneOffset()-l.getTimezoneOffset()),S=w/36e5):(w=y-l-6e4*(y.getTimezoneOffset()-l.getTimezoneOffset()),S=w/36e5);var _=Math.floor(D),b=Math.ceil(S-.016),I={event:p,startIndex:_,endIndex:b};e=h[_].events,e?e.push(I):(e=[],e.push(I),h[_].events=e)}}if(f){var C=[];for(n=0;n<24;n+=1)h[n].events&&(C=C.concat(h[n].events));C.length>0&&(h.hasEvent=!0,r.placeEvents(C))}a.allDayEvents=g,t(function(){o()})},r._refreshView=function(){var t=r.range.startTime;a.rows=s(t),a.allDayEvents=[],a.dates=[t],a.$parent.title=e(t,r.formatDayTitle)},r._getRange=function(e){var t=e.getFullYear(),a=e.getMonth(),n=e.getDate();return{startTime:new Date(t,a,n),endTime:new Date(t,a,n+1)}},r.refreshView()}}}]),angular.module("template/rcalendar/calendar.html",[]).run(["$templateCache",function(e){e.put("template/rcalendar/calendar.html",'<div ng-switch="calendarMode">\n    <div class="row calendar-navbar">\n        <div class="nav-left col-xs-2">\n            <button type="button" class="btn btn-default btn-sm" ng-click="move(-1)"><i\n                    class="glyphicon glyphicon-chevron-left"></i></button>\n        </div>\n        <div class="calendar-header col-xs-8">{{title}}</div>\n        <div class="nav-right col-xs-2">\n            <button type="button" class="btn btn-default btn-sm" ng-click="move(1)"><i\n                    class="glyphicon glyphicon-chevron-right"></i></button>\n        </div>\n    </div>\n    <dayview ng-switch-when="day"></dayview>\n    <monthview ng-switch-when="month"></monthview>\n    <weekview ng-switch-when="week"></weekview>\n</div>\n')}]),angular.module("template/rcalendar/day.html",[]).run(["$templateCache",function(e){e.put("template/rcalendar/day.html",'<div>\n    <div class="dayview-allday-table">\n        <div class="dayview-allday-label">\n            all day\n        </div>\n        <div class="dayview-allday-content-wrapper">\n            <table class="table table-bordered dayview-allday-content-table">\n                <tbody>\n                <tr>\n                    <td class="calendar-cell" ng-class="{\'calendar-event-wrap\':allDayEvents}"\n                        ng-style="{height: 25*allDayEvents.length+\'px\'}">\n                        <div ng-repeat="displayEvent in allDayEvents" class="calendar-event"\n                             ng-click="eventSelected({event:displayEvent.event})"\n                             ng-style="{top: 25*$index+\'px\',width: \'100%\',height:\'25px\'}">\n                            <div class="calendar-event-inner">{{displayEvent.event.title}}</div>\n                        </div>\n                    </td>\n                    <td ng-if="allDayEventGutterWidth>0" class="gutter-column"\n                        ng-style="{width:allDayEventGutterWidth+\'px\'}"></td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class="scrollable" style="height: 400px">\n        <table class="table table-bordered table-fixed">\n            <tbody>\n            <tr ng-repeat="tm in rows track by $index">\n                <td class="calendar-hour-column text-center">\n                    {{tm.time | date: formatHourColumn}}\n                </td>\n                <td class="calendar-cell" ng-click="select(tm.time)">\n                    <div ng-class="{\'calendar-event-wrap\': tm.events}" ng-if="tm.events">\n                        <div ng-repeat="displayEvent in tm.events" class="calendar-event"\n                             ng-click="eventSelected({event:displayEvent.event})"\n                             ng-style="{left: 100/displayEvent.overlapNumber*displayEvent.position+\'%\', width: 100/displayEvent.overlapNumber+\'%\', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+\'px\'}">\n                            <div class="calendar-event-inner">{{displayEvent.event.title}}</div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>')}]),angular.module("template/rcalendar/month.html",[]).run(["$templateCache",function(e){e.put("template/rcalendar/month.html",'<div>\n    <table class="table table-bordered table-fixed monthview-datetable monthview-datetable">\n        <thead>\n        <tr>\n            <th ng-show="showWeeks" class="calendar-week-column text-center">#</th>\n            <th ng-repeat="label in labels track by $index" class="text-center">\n                <small>{{label}}</small>\n            </th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr ng-repeat="row in rows track by $index">\n            <td ng-show="showWeeks" class="calendar-week-column text-center">\n                <small><em>{{ weekNumbers[$index] }}</em></small>\n            </td>\n            <td ng-repeat="dt in row track by dt.date" class="monthview-dateCell" ng-click="select(dt.date)"\n                ng-class="{\'text-center\':true, \'monthview-current\': dt.current&&!dt.selected&&!dt.hasEvent,\'monthview-secondary-with-event\': dt.secondary&&dt.hasEvent, \'monthview-primary-with-event\':!dt.secondary&&dt.hasEvent&&!dt.selected, \'monthview-selected\': dt.selected}">\n                <div ng-class="{\'text-muted\':dt.secondary}">\n                    {{dt.label}}\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <div ng-if="showEventDetail" class="event-detail-container">\n        <div class="scrollable" style="height: 200px">\n            <table class="table table-bordered table-striped table-fixed">\n                <tr ng-repeat="event in selectedDate.events" ng-if="selectedDate.events">\n                    <td ng-if="!event.allDay" class="monthview-eventdetail-timecolumn">{{event.startTime|date: \'HH:mm\'}}\n                        -\n                        {{event.endTime|date: \'HH:mm\'}}\n                    </td>\n                    <td ng-if="event.allDay" class="monthview-eventdetail-timecolumn">All day</td>\n                    <td class="event-detail" ng-click="eventSelected({event:event})">{{event.title}}</td>\n                </tr>\n                <tr ng-if="!selectedDate.events"><td class="no-event-label">No Events</td></tr>\n            </table>\n        </div>\n    </div>\n</div>')}]),angular.module("template/rcalendar/week.html",[]).run(["$templateCache",function(e){e.put("template/rcalendar/week.html",'<div>\n    <table class="table table-bordered table-fixed weekview-header">\n        <thead>\n        <tr>\n            <th class="calendar-hour-column"></th>\n            <th ng-repeat="dt in dates" class="text-center weekview-header-label">{{dt.date| date:\n                formatWeekViewDayHeader}}\n            </th>\n            <th ng-if="gutterWidth>0" class="gutter-column" ng-style="{width: gutterWidth+\'px\'}"></th>\n        </tr>\n        </thead>\n    </table>\n    <div class="weekview-allday-table">\n        <div class="weekview-allday-label">\n            all day\n        </div>\n        <div class="weekview-allday-content-wrapper">\n            <table class="table table-bordered table-fixed weekview-allday-content-table">\n                <tbody>\n                <tr>\n                    <td ng-repeat="day in dates track by day.date" class="calendar-cell">\n                        <div ng-class="{\'calendar-event-wrap\': day.events}" ng-if="day.events"\n                             ng-style="{height: 25*day.events.length+\'px\'}">\n                            <div ng-repeat="displayEvent in day.events" class="calendar-event"\n                                 ng-click="eventSelected({event:displayEvent.event})"\n                                 ng-style="{top: 25*displayEvent.position+\'px\', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+\'%\', height: \'25px\'}">\n                                <div class="calendar-event-inner">{{displayEvent.event.title}}</div>\n                            </div>\n                        </div>\n                    </td>\n                    <td ng-if="allDayEventGutterWidth>0" class="gutter-column"\n                        ng-style="{width: allDayEventGutterWidth+\'px\'}"></td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    <div class="scrollable" style="height: 400px">\n        <table class="table table-bordered table-fixed">\n            <tbody>\n            <tr ng-repeat="row in rows track by $index">\n                <td class="calendar-hour-column text-center">\n                    {{row[0].time | date: formatHourColumn}}\n                </td>\n                <td ng-repeat="tm in row track by tm.time" class="calendar-cell" ng-click="select(tm.time)">\n                    <div ng-class="{\'calendar-event-wrap\': tm.events}" ng-if="tm.events">\n                        <div ng-repeat="displayEvent in tm.events" class="calendar-event"\n                             ng-click="eventSelected({event:displayEvent.event})"\n                             ng-style="{left: 100/displayEvent.overlapNumber*displayEvent.position+\'%\', width: 100/displayEvent.overlapNumber+\'%\', height: 37*(displayEvent.endIndex-displayEvent.startIndex)+\'px\'}">\n                            <div class="calendar-event-inner">{{displayEvent.event.title}}</div>\n                        </div>\n                    </div>\n                </td>\n                <td ng-if="normalGutterWidth>0" class="gutter-column" ng-style="{width: normalGutterWidth+\'px\'}"></td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n</div>')}]),specialist.factory("dataService",["$http","$window","$state",function(e,t,a){function n(){document.getElementById("loader").style.display="block"}function i(){document.getElementById("loader").style.display="none"}var r="http://quickspecialist.com/specialistAPI/public/index.php";return serviceObj={getFullDoctorList:function(){return n(),e.get(r+"/doctor/list").then(function(e){if(i(),!e.data.error)return e.data;msg})},checkUserExistance:function(){},signUpUser:function(t){return n(),e.post(r+"/patient/add",t).then(function(e){if(i(),!e.data.error)return serviceObj.setUserSession(e.data),e;msg})},signUpDoctor:function(t){return n(),e.post(r+"/doctor/add",t).then(function(e){if(i(),!e.data.error)return serviceObj.setSession(e.data),e;msg})},updateDoctor:function(t){n();var a=serviceObj.getSession();return t.id=a,e.post(r+"/update/doctorProfile",t).then(function(e){if(i(),!e.data.error)return e;msg})},loginDoctor:function(t){return e.post(r+"/doctor/login",t).then(function(e){serviceObj.setSession(e.data.id),a.go("doctorProfile.profile")})},setUserSession:function(e){t.sessionStorage.setItem("patient",JSON.stringify(e))},getUserSession:function(){return JSON.parse(t.sessionStorage.getItem("patient"))},getCurrentDoctorData:function(){n();var t=serviceObj.getSession();return e.get(r+"/doctor/"+t).then(function(e){if(i(),!e.data.error)return e.data;msg})},setSession:function(e){console.log(e),t.sessionStorage.setItem("doc",JSON.stringify(e))},getSession:function(){var e=t.sessionStorage.getItem("doc");return JSON.parse(e)},getDoctorData:function(t){return n(),e.get(r+"/doctor/"+t).then(function(e){if(i(),!e.data.error)return e.data;msg})},checkUserName:function(t){return e.get(r+"/doctor/docUsername/"+t).then(function(e){if(i(),!e.data.error)return e;msg})},checkEmailId:function(t){return e.get(r+"/doctor/docEmail/"+t).then(function(e){if(!e.data.error)return e;msg})},uploadProfilePic:function(t){n();var a=serviceObj.getSession();return t.docId=a,e.post(r+"/upload/profilePic",t).then(function(e){if(i(),!e.data.error)return e;msg})}},serviceObj}]),specialist.controller("docBookingCtrl",["$scope","$stateParams","dataService",function(e,t,a){var n=t.id;e.bookDoctor,a.getDoctorData(n).then(function(t){e.bookDoctor=t[0]})}]),specialist.controller("docEditProfileCtrl",["$scope","dataService","$http",function(e,t,a){console.log(e.docJson),e.docData={},angular.extend(e.docData,e.docJson),e.saveDoctorData=function(){t.updateDoctor(e.docData).then(function(t){t&&(e.$parent.docJson=e.docData,$state.go("doctorProfile.dashboard"))})},e.selId=[],e.options={multiselect:"true",fieldAttr:{multiselect:!0,placeholder:"Enter your state"}},e.speciality=[{name:"Neck Specialist",id:"123"},{name:"Back Specialist",id:"124"},{name:"Shoulder Specialist",id:"125"},{name:"Elbow Specialist",id:"126"},{name:"Wrist Specialist",id:"127"},{name:"Hip Specialist",id:"128"},{name:"Knee Specialist",id:"129"},{name:"Ankle Specialist",id:"130"},{name:"Paralysis Specialist",id:"126"},{name:"Post Fracture Specialist",id:"126"},{name:"Post Surgical Specialist",id:"126"}]}]),specialist.controller("docLoginCtrl",["$scope","dataService","$state",function(e,t,a){t.getSession()&&a.go("doctorProfile.profile"),e.loginDoc=function(a,n){n.preventDefault();var i={};i.email=e.email,i.password=e.pass,a&&t.loginDoctor(i).then(function(e){console.log(e)})}}]),specialist.controller("docProfileCtrl",["$scope","dataService","$http",function(e,t,a){e.editProfile2=!0,e.editProfile=!0,e.cropper=!1;var n;e.myImage="",e.myCroppedImage="",e.fireUpload=function(){document.getElementById("fileInput").click()};var i=function(t){var a=t.currentTarget.files[0];n=a.name,console.log(a);var i=new FileReader;i.onload=function(t){e.$apply(function(e){e.myImage=t.target.result})},i.readAsDataURL(a),e.cropper=!0};angular.element(document.querySelector("#fileInput")).on("change",i),t.getCurrentDoctorData().then(function(t){e.docJson=t[0],console.log("doctor data",e.docJson)}),e.uploadPic=function(){t.uploadProfilePic({baseString:e.myCroppedImage}).then(function(t){e.cropper=!1})},e.showEditForm=function(e){for(var t=document.getElementsByClassName("profileInputs"),a=0;a<t.length;a++)t[a].disabled=!1},e.mode="week",e.eventSource=function(){for(var e=[],t=0;t<50;t+=1){var a,n,i=new Date,r=Math.floor(2*Math.random()),o=Math.floor(90*Math.random())-45,s=Math.floor(2*Math.random())+o;if(0===r)a=new Date(Date.UTC(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()+o)),s===o&&(s+=1),n=new Date(Date.UTC(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()+s)),e.push({title:"All Day - "+t,startTime:a,endTime:n,allDay:!0});else{var l=Math.floor(24*Math.random()*60),c=Math.floor(180*Math.random())+l;a=new Date(i.getFullYear(),i.getMonth(),i.getDate()+o,0,i.getMinutes()+l),n=new Date(i.getFullYear(),i.getMonth(),i.getDate()+s,0,i.getMinutes()+c),e.push({title:t+"Mr Nitin",startTime:a,endTime:n,allDay:!1})}}return e}(),e.selected=0,e.select=function(t){e.selected=t},e.navProfileList=[{sref:"dashboard",title:"Dashboard"},{sref:"faq",title:"FAQ"},{sref:"plans",title:"Pricing Plans"},{sref:"profile",title:"User Account"}]}]),specialist.controller("docSignupCtrl",["$scope","$state","dataService",function(e,t,a){e.secondForm=!1,e.firstForm=!0,e.email_err=!1,e.pwd_err=!1,e.err_msg=!1,e.mobileRegEx="/^[0-9]{10,10}$/;",e.pinCodeRegEx="/^[0-9]{6,6}$/;";var n={};e.checkusername=function(){a.checkUserName(e.username).then(function(t){1==t.data?e.usernameExist=!0:e.usernameExist=!1})},e.checkEmail=function(){a.checkEmailId(e.email).then(function(t){1==t.data?e.emailExist=!0:e.emailExist=!1})},e.checkEmailPwdValidity=function(t){"email"==t?e.email!==e.confEmail?(e.email_err=!0,e.email_err_msg="Email did not match"):(e.email_err=!1,e.email_err_msg=""):"pwd"==t&&(e.pass!==e.confPass?e.pass_err=!0:e.pass_err=!1)},e.bringSecondForm=function(t){t?(e.err_msg=!1,n.name=e.fname+" "+e.lname,e.email==e.confEmail?n.email=e.email:e.email_err=!0,e.pass==e.confPass?n.password=e.pass:e.pass_err=!0,e.pass_err||e.email_err||(e.secondForm=!0,e.firstForm=!1)):t||(e.err_msg=!0)},e.sendSignupDoc=function(i){i?(e.err_msg=!1,n.address=e.address1+" "+e.address2,n.pin=e.pinCode,n.city=e.city,n.state=e.state,n.mobile=e.mobileNo,n.clinic_name=e.clinicName,n.fee=e.clinicFee,n.hv_fee=e.homeVisit,n.username=e.username,n.password=e.pass,a.signUpDoctor(n).then(function(e){e&&t.go("doctorProfile.dashboard")})):i||(e.err_msg=!0)}}]),specialist.controller("doctorPortalCtrl",["$scope",function(e){e.$parent.doctorPatient="For Patient",e.$parent.doctorPatientUrl="/"}]),angular.module("naukri.tagit",[]).directive("tagIt",function(){return{restrict:"EA",scope:{tags:"=",remove:"&"},template:'<div><ul class="tags"><li  class="tagit" ng-repeat="tag in tags "><span class="tagText">{{::tag.name}}</span><a  ng-click="remove({idx:tag.id})" class="dCross" href="javascript:;">x</a></li></ul></div>',link:function(e,t,a,n){}}}),angular.module("naukri.listing",[]).directive("ngRepeatDoneNotification",function(){return function(e,t,a){e.$parent.multiSelect||e.selectedId&&0!=e.selectedId.length&&e.$last&&!e.$parent.firstReapet&&(e.$parent.firstReapet=1,e.callback({item:{id:e.selectedId[0],name:e.data[e.idHash.indexOf(e.selectedId[0])].name,allSelected:e.selectedId,checked:null,first:!0}}))}}).directive("listing",function(){return{restrict:"E",transclude:!0,replace:!0,scope:{data:"=",tupleCount:"@",selectedId:"=",maxHeight:"@",callback:"&listingCallback",multiSelect:"@",filterName:"=",active:"="},template:'<ul><li ng-repeat="item in data|filter:{name:filterName}|limitTo:tupleCount" ng-repeat-done-notification={{item.id}} ng-click="checkItem(this)" ng-class="{active:item.active, notSelectable:item.notSelectable}"><input ng-if="multiSelect == \'true\' && !item.notSelectable" type="checkbox" ng-model=item.checked>{{selectedName}}<div style="display:inline-block; width:auto;" ng-transclude></div></li></ul>',link:function(e,t,a,n){e.firstReapet=0,e.selObj={},e.idHash=[],e.data&&e.data.forEach(function(t){e.idHash.push(t.id)}),e.$on("select",function(t,a,n){var i;i=n?e.data[e.idHash.indexOf(n)]:e.data[e.active],e.checkItem({item:i})}),e.$on("deSelect",function(e,t){}),e.isActive=function(a){if(e.active<t.find("li").length)return e.active===a;e.active=0},e.checkItem=function(t){e.attr=a,t.item.notSelectable||(e.checkSelection(t),e.callback({item:{id:t.item.id,name:t.item.name,allSelected:e.selectedId,checked:t.item.checked}}))},e.checkSelection=function(t){var a=t.item.id;if(e.selectedId=e.selectedId||[],e.attr.multiSelect){var n=e.selectedId.indexOf(a);n==-1?(e.selectedId.push(a),e.selObj[a]=t.item.name,t.item.checked=!0):(e.selectedId.splice(n,1),delete e.selObj[a],t.item.checked=!1)}else e.selectedId=[],e.selectedId.push(a)}}}}),angular.module("naukri.droope",["naukri.listing","naukri.tagit"]).directive("droope",["$document",function(e){return{scope:{option:"=",callback:"&droopeCallback",data:"=",selectedId:"=",api:"="},restrict:"E",
template:'<div class="ddwn"><div class="DDwrap"><ul class="DDsearch"><li class="frst" style="float: none;"><div class="DDinputWrap"><span class="ddIcon srchTxt" ng-click="showDrop()"></span><input type="text" ng-click="showDrop()" id="" class="srchTxt" ng-placeholder="option.fieldAttr.placeholder" autocomplete="off" style="color: rgb(68, 68, 68);" ng-model="selectedName"></div></li></ul></div><div class="dd_dwn drop" ng-show="show"><listing tuplecount="10" multi-select="{{option.multiselect}}" active="activeIndex" selected-id ="selectedId" listing-callback="listingCallback(item)" data="data" filter-name="selectedName"><div><a>{{$parent.item.name}}</a></div></listing></div></div>',replace:!0,transclude:!0,compile:function(t,a){var n={fieldAttr:{placeholder:"Enter The Details",multiselect:"false"}};return function(t,a,r,o){t.activeIndex=0,a.find("input").on("keydown",function(e){switch(e.which){case 8:""==t.selectedName&&(t.show=!0),t.$digest();break;case 9:t.blurOut();break;case 13:e.stopPropagation(),t.$broadcast("select",this),t.$digest();break;case 38:t.data[t.activeIndex].active=!1,t.activeIndex--,t.data[t.activeIndex].active=!0,t.$digest();break;case 40:t.data[t.activeIndex].active=!1,console.log(t.activeIndex),t.activeIndex!=t.data.length-1?(t.activeIndex++,t.data[t.activeIndex].active=!0):t.activeIndex=0,t.data[t.activeIndex].active=!0,t.$digest()}}),t.options=angular.merge(n,t.option),console.log(t.options),t.tags=[],a.find("input").attr(t.options.fieldAttr),t.api={resetDroope:function(){t.selectedName="",t.selectedId=[]},selectItem:function(e){Object.prototype.toString.call(e),t.$broadcast("select",this,e)}},t.listingCallback=function(e){var a={id:e.id,name:e.name};t.tagUpdate(a,e.checked)},t.tagUpdate=function(e,a){if(t.option.multiselect)if(a)t.tags.push(e);else{var n=t.tags.indexOf(e);t.tags.splice(n,1)}else t.selectedName=e.name,t.show=!1,t.callback({item:e});event&&event.stopPropagation()},t.showDrop=function(){t.lastSelected=t.selectedName,t.selectedName="",t.show=!0},t.removeAllTags=function(){if(t.tags=[],t.option.multiselect)for(i=0;i<t.selectedId.length;i++){var e=t.data.indexOf(t.selectedId[i]);t.data[e].checked=!1}else t.selectedName=""},t.blurOut=function(){var e={id:"",name:t.selectedName,checked:"no"};t.listingCallback(e)},e.on("click",function(e){angular.element(e.target).hasClass("srchTxt")||(t.show=!1,""==t.selectedName&&(t.selectedName=t.lastSelected)),t.$apply()})}}}}]),specialist.controller("mainController",["$scope",function(e){var t=[{name:"Delhi"},{name:"Noida"},{name:"Gurgaon"}];e.options={},e.options={data:t,multiselect:!0,maxHeight:250},e.data=[{name:"Delhi"},{name:"Noida"},{name:"Gurgaon"}],e.selectedId=[],e.onClickFunc=function(e){console.log(e)},e.api={},e.$parent.doctorPatient="For Doctor",e.$parent.doctorPatientUrl="doctorPortal"}]),function(){"use strict";var e=angular.module("ngImgCrop",[]);e.factory("cropAreaCircle",["cropArea",function(e){var t=function(){e.apply(this,arguments),this._boxResizeBaseSize=20,this._boxResizeNormalRatio=.9,this._boxResizeHoverRatio=1.2,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._boxResizeNormalSize=this._boxResizeBaseSize*this._boxResizeNormalRatio,this._boxResizeHoverSize=this._boxResizeBaseSize*this._boxResizeHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._boxResizeIsHover=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcCirclePerimeterCoords=function(e){var t=this._size/2,a=e*(Math.PI/180);return[this._x+t*Math.cos(a),this._y+t*Math.sin(a)]},t.prototype._calcResizeIconCenterCoords=function(){return this._calcCirclePerimeterCoords(-45)},t.prototype._isCoordWithinArea=function(e){return Math.sqrt((e[0]-this._x)*(e[0]-this._x)+(e[1]-this._y)*(e[1]-this._y))<this._size/2},t.prototype._isCoordWithinBoxResize=function(e){var t=this._calcResizeIconCenterCoords(),a=this._boxResizeHoverSize/2;return e[0]>t[0]-a&&e[0]<t[0]+a&&e[1]>t[1]-a&&e[1]<t[1]+a},t.prototype._drawArea=function(e,t,a){e.arc(t[0],t[1],a/2,0,2*Math.PI)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio),this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(),this._boxResizeBaseSize,this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio)},t.prototype.processMouseMove=function(e,t){var a="default",n=!1;if(this._boxResizeIsHover=!1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,a="move",n=!0,this._events.trigger("area-move");else if(this._boxResizeIsDragging){a="nesw-resize";var i,r,o;r=e-this._posResizeStartX,o=this._posResizeStartY-t,i=r>o?this._posResizeStartSize+2*o:this._posResizeStartSize+2*r,this._size=Math.max(this._minSize,i),this._boxResizeIsHover=!0,n=!0,this._events.trigger("area-resize")}else this._isCoordWithinBoxResize([e,t])?(a="nesw-resize",this._areaIsHover=!1,this._boxResizeIsHover=!0,n=!0):this._isCoordWithinArea([e,t])&&(a="move",this._areaIsHover=!0,n=!0);return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:a}),n},t.prototype.processMouseDown=function(e,t){this._isCoordWithinBoxResize([e,t])?(this._areaIsDragging=!1,this._areaIsHover=!1,this._boxResizeIsDragging=!0,this._boxResizeIsHover=!0,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger("area-resize-start")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._boxResizeIsDragging=!1,this._boxResizeIsHover=!1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger("area-move-start"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger("area-move-end")),this._boxResizeIsDragging&&(this._boxResizeIsDragging=!1,this._events.trigger("area-resize-end")),this._areaIsHover=!1,this._boxResizeIsHover=!1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory("cropAreaSquare",["cropArea",function(e){var t=function(){e.apply(this,arguments),this._resizeCtrlBaseRadius=10,this._resizeCtrlNormalRatio=.75,this._resizeCtrlHoverRatio=1,this._iconMoveNormalRatio=.9,this._iconMoveHoverRatio=1.2,this._resizeCtrlNormalRadius=this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio,this._resizeCtrlHoverRadius=this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio,this._posDragStartX=0,this._posDragStartY=0,this._posResizeStartX=0,this._posResizeStartY=0,this._posResizeStartSize=0,this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._resizeCtrlIsDragging=-1,this._areaIsDragging=!1};return t.prototype=new e,t.prototype._calcSquareCorners=function(){var e=this._size/2;return[[this._x-e,this._y-e],[this._x+e,this._y-e],[this._x-e,this._y+e],[this._x+e,this._y+e]]},t.prototype._calcSquareDimensions=function(){var e=this._size/2;return{left:this._x-e,top:this._y-e,right:this._x+e,bottom:this._y+e}},t.prototype._isCoordWithinArea=function(e){var t=this._calcSquareDimensions();return e[0]>=t.left&&e[0]<=t.right&&e[1]>=t.top&&e[1]<=t.bottom},t.prototype._isCoordWithinResizeCtrl=function(e){for(var t=this._calcSquareCorners(),a=-1,n=0,i=t.length;i>n;n++){var r=t[n];if(e[0]>r[0]-this._resizeCtrlHoverRadius&&e[0]<r[0]+this._resizeCtrlHoverRadius&&e[1]>r[1]-this._resizeCtrlHoverRadius&&e[1]<r[1]+this._resizeCtrlHoverRadius){a=n;break}}return a},t.prototype._drawArea=function(e,t,a){var n=a/2;e.rect(t[0]-n,t[1]-n,a,a)},t.prototype.draw=function(){e.prototype.draw.apply(this,arguments),this._cropCanvas.drawIconMove([this._x,this._y],this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);for(var t=this._calcSquareCorners(),a=0,n=t.length;n>a;a++){var i=t[a];this._cropCanvas.drawIconResizeCircle(i,this._resizeCtrlBaseRadius,this._resizeCtrlIsHover===a?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio)}},t.prototype.processMouseMove=function(e,t){var a="default",n=!1;if(this._resizeCtrlIsHover=-1,this._areaIsHover=!1,this._areaIsDragging)this._x=e-this._posDragStartX,this._y=t-this._posDragStartY,this._areaIsHover=!0,a="move",n=!0,this._events.trigger("area-move");else if(this._resizeCtrlIsDragging>-1){var i,r;switch(this._resizeCtrlIsDragging){case 0:i=-1,r=-1,a="nwse-resize";break;case 1:i=1,r=-1,a="nesw-resize";break;case 2:i=-1,r=1,a="nesw-resize";break;case 3:i=1,r=1,a="nwse-resize"}var o,s=(e-this._posResizeStartX)*i,l=(t-this._posResizeStartY)*r;o=s>l?this._posResizeStartSize+l:this._posResizeStartSize+s;var c=this._size;this._size=Math.max(this._minSize,o);var d=(this._size-c)/2;this._x+=d*i,this._y+=d*r,this._resizeCtrlIsHover=this._resizeCtrlIsDragging,n=!0,this._events.trigger("area-resize")}else{var u=this._isCoordWithinResizeCtrl([e,t]);if(u>-1){switch(u){case 0:a="nwse-resize";break;case 1:a="nesw-resize";break;case 2:a="nesw-resize";break;case 3:a="nwse-resize"}this._areaIsHover=!1,this._resizeCtrlIsHover=u,n=!0}else this._isCoordWithinArea([e,t])&&(a="move",this._areaIsHover=!0,n=!0)}return this._dontDragOutside(),angular.element(this._ctx.canvas).css({cursor:a}),n},t.prototype.processMouseDown=function(e,t){var a=this._isCoordWithinResizeCtrl([e,t]);a>-1?(this._areaIsDragging=!1,this._areaIsHover=!1,this._resizeCtrlIsDragging=a,this._resizeCtrlIsHover=a,this._posResizeStartX=e,this._posResizeStartY=t,this._posResizeStartSize=this._size,this._events.trigger("area-resize-start")):this._isCoordWithinArea([e,t])&&(this._areaIsDragging=!0,this._areaIsHover=!0,this._resizeCtrlIsDragging=-1,this._resizeCtrlIsHover=-1,this._posDragStartX=e-this._x,this._posDragStartY=t-this._y,this._events.trigger("area-move-start"))},t.prototype.processMouseUp=function(){this._areaIsDragging&&(this._areaIsDragging=!1,this._events.trigger("area-move-end")),this._resizeCtrlIsDragging>-1&&(this._resizeCtrlIsDragging=-1,this._events.trigger("area-resize-end")),this._areaIsHover=!1,this._resizeCtrlIsHover=-1,this._posDragStartX=0,this._posDragStartY=0},t}]),e.factory("cropArea",["cropCanvas",function(e){var t=function(t,a){this._ctx=t,this._events=a,this._minSize=80,this._cropCanvas=new e(t),this._image=new Image,this._x=0,this._y=0,this._size=200};return t.prototype.getImage=function(){return this._image},t.prototype.setImage=function(e){this._image=e},t.prototype.getX=function(){return this._x},t.prototype.setX=function(e){this._x=e,this._dontDragOutside()},t.prototype.getY=function(){return this._y},t.prototype.setY=function(e){this._y=e,this._dontDragOutside()},t.prototype.getSize=function(){return this._size},t.prototype.setSize=function(e){this._size=Math.max(this._minSize,e),this._dontDragOutside()},t.prototype.getMinSize=function(){return this._minSize},t.prototype.setMinSize=function(e){this._minSize=e,this._size=Math.max(this._minSize,this._size),this._dontDragOutside()},t.prototype._dontDragOutside=function(){var e=this._ctx.canvas.height,t=this._ctx.canvas.width;this._size>t&&(this._size=t),this._size>e&&(this._size=e),this._x<this._size/2&&(this._x=this._size/2),this._x>t-this._size/2&&(this._x=t-this._size/2),this._y<this._size/2&&(this._y=this._size/2),this._y>e-this._size/2&&(this._y=e-this._size/2)},t.prototype._drawArea=function(){},t.prototype.draw=function(){this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea)},t.prototype.processMouseMove=function(){},t.prototype.processMouseDown=function(){},t.prototype.processMouseUp=function(){},t}]),e.factory("cropCanvas",[function(){var e=[[-.5,-2],[-3,-4.5],[-.5,-7],[-7,-7],[-7,-.5],[-4.5,-3],[-2,-.5]],t=[[.5,-2],[3,-4.5],[.5,-7],[7,-7],[7,-.5],[4.5,-3],[2,-.5]],a=[[-.5,2],[-3,4.5],[-.5,7],[-7,7],[-7,.5],[-4.5,3],[-2,.5]],n=[[.5,2],[3,4.5],[.5,7],[7,7],[7,.5],[4.5,3],[2,.5]],i=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]],r=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]],o=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]],s=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]],l={areaOutline:"#fff",resizeBoxStroke:"#fff",resizeBoxFill:"#444",resizeBoxArrowFill:"#fff",resizeCircleStroke:"#fff",resizeCircleFill:"#444",moveIconFill:"#fff"};return function(c){var d=function(e,t,a){return[a*e[0]+t[0],a*e[1]+t[1]]},u=function(e,t,a,n){c.save(),c.fillStyle=t,c.beginPath();var i,r=d(e[0],a,n);c.moveTo(r[0],r[1]);for(var o in e)o>0&&(i=d(e[o],a,n),c.lineTo(i[0],i[1]));c.lineTo(r[0],r[1]),c.fill(),c.closePath(),c.restore()};this.drawIconMove=function(e,t){u(i,l.moveIconFill,e,t),u(r,l.moveIconFill,e,t),u(o,l.moveIconFill,e,t),u(s,l.moveIconFill,e,t)},this.drawIconResizeCircle=function(e,t,a){var n=t*a;c.save(),c.strokeStyle=l.resizeCircleStroke,c.lineWidth=2,c.fillStyle=l.resizeCircleFill,c.beginPath(),c.arc(e[0],e[1],n,0,2*Math.PI),c.fill(),c.stroke(),c.closePath(),c.restore()},this.drawIconResizeBoxBase=function(e,t,a){var n=t*a;c.save(),c.strokeStyle=l.resizeBoxStroke,c.lineWidth=2,c.fillStyle=l.resizeBoxFill,c.fillRect(e[0]-n/2,e[1]-n/2,n,n),c.strokeRect(e[0]-n/2,e[1]-n/2,n,n),c.restore()},this.drawIconResizeBoxNESW=function(e,n,i){this.drawIconResizeBoxBase(e,n,i),u(t,l.resizeBoxArrowFill,e,i),u(a,l.resizeBoxArrowFill,e,i)},this.drawIconResizeBoxNWSE=function(t,a,i){this.drawIconResizeBoxBase(t,a,i),u(e,l.resizeBoxArrowFill,t,i),u(n,l.resizeBoxArrowFill,t,i)},this.drawCropArea=function(e,t,a,n){var i=e.width/c.canvas.width,r=e.height/c.canvas.height,o=t[0]-a/2,s=t[1]-a/2;c.save(),c.strokeStyle=l.areaOutline,c.lineWidth=2,c.beginPath(),n(c,t,a),c.stroke(),c.clip(),a>0&&c.drawImage(e,o*i,s*r,a*i,a*r,o,s,a,a),c.beginPath(),n(c,t,a),c.stroke(),c.clip(),c.restore()}}}]),e.service("cropEXIF",[function(){function e(e){return!!e.exifdata}function t(e,t){t=t||e.match(/^data\:([^\;]+)\;base64,/im)[1]||"",e=e.replace(/^data\:([^\;]+)\;base64,/gim,"");for(var a=atob(e),n=a.length,i=new ArrayBuffer(n),r=new Uint8Array(i),o=0;n>o;o++)r[o]=a.charCodeAt(o);return i}function a(e,t){var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="blob",a.onload=function(){(200==this.status||0===this.status)&&t(this.response)},a.send()}function n(e,n){function o(t){var a=i(t),o=r(t);e.exifdata=a||{},e.iptcdata=o||{},n&&n.call(e)}if(e.src)if(/^data\:/i.test(e.src)){var s=t(e.src);o(s)}else if(/^blob\:/i.test(e.src)){var l=new FileReader;l.onload=function(e){o(e.target.result)},a(e.src,function(e){l.readAsArrayBuffer(e)})}else{var c=new XMLHttpRequest;c.onload=function(){if(200!=this.status&&0!==this.status)throw"Could not load image";o(c.response),c=null},c.open("GET",e.src,!0),c.responseType="arraybuffer",c.send(null)}else if(window.FileReader&&(e instanceof window.Blob||e instanceof window.File)){var l=new FileReader;l.onload=function(e){u&&console.log("Got file of length "+e.target.result.byteLength),o(e.target.result)},l.readAsArrayBuffer(e)}}function i(e){var t=new DataView(e);if(u&&console.log("Got file of length "+e.byteLength),255!=t.getUint8(0)||216!=t.getUint8(1))return u&&console.log("Not a valid JPEG"),!1;for(var a,n=2,i=e.byteLength;i>n;){if(255!=t.getUint8(n))return u&&console.log("Not a valid marker at offset "+n+", found: "+t.getUint8(n)),!1;if(a=t.getUint8(n+1),u&&console.log(a),225==a)return u&&console.log("Found 0xFFE1 marker"),d(t,n+4,t.getUint16(n+2));n+=2+t.getUint16(n+2)}}function r(e){var t=new DataView(e);if(u&&console.log("Got file of length "+e.byteLength),255!=t.getUint8(0)||216!=t.getUint8(1))return u&&console.log("Not a valid JPEG"),!1;for(var a=2,n=e.byteLength;n>a;){if(function(e,t){return 56===e.getUint8(t)&&66===e.getUint8(t+1)&&73===e.getUint8(t+2)&&77===e.getUint8(t+3)&&4===e.getUint8(t+4)&&4===e.getUint8(t+5)}(t,a)){var i=t.getUint8(a+7);i%2!=0&&(i+=1),0===i&&(i=4);return o(e,a+8+i,t.getUint16(a+6+i))}a++}}function o(e,t,a){for(var n,i,r,o,s=new DataView(e),l={},d=t;t+a>d;)28===s.getUint8(d)&&2===s.getUint8(d+1)&&(o=s.getUint8(d+2))in p&&(r=s.getInt16(d+3),r+5,i=p[o],n=c(s,d+5,r),l.hasOwnProperty(i)?l[i]instanceof Array?l[i].push(n):l[i]=[l[i],n]:l[i]=n),d++;return l}function s(e,t,a,n,i){var r,o,s,c=e.getUint16(a,!i),d={};for(s=0;c>s;s++)r=a+12*s+2,o=n[e.getUint16(r,!i)],!o&&u&&console.log("Unknown tag: "+e.getUint16(r,!i)),d[o]=l(e,r,t,a,i);return d}function l(e,t,a,n,i){var r,o,s,l,d,u,h=e.getUint16(t+2,!i),g=e.getUint32(t+4,!i),f=e.getUint32(t+8,!i)+a;switch(h){case 1:case 7:if(1==g)return e.getUint8(t+8,!i);for(r=g>4?f:t+8,o=[],l=0;g>l;l++)o[l]=e.getUint8(r+l);return o;case 2:return r=g>4?f:t+8,c(e,r,g-1);case 3:if(1==g)return e.getUint16(t+8,!i);for(r=g>2?f:t+8,o=[],l=0;g>l;l++)o[l]=e.getUint16(r+2*l,!i);return o;case 4:if(1==g)return e.getUint32(t+8,!i);for(o=[],l=0;g>l;l++)o[l]=e.getUint32(f+4*l,!i);return o;case 5:if(1==g)return d=e.getUint32(f,!i),u=e.getUint32(f+4,!i),s=new Number(d/u),s.numerator=d,s.denominator=u,s;for(o=[],l=0;g>l;l++)d=e.getUint32(f+8*l,!i),u=e.getUint32(f+4+8*l,!i),o[l]=new Number(d/u),o[l].numerator=d,o[l].denominator=u;return o;case 9:if(1==g)return e.getInt32(t+8,!i);for(o=[],l=0;g>l;l++)o[l]=e.getInt32(f+4*l,!i);return o;case 10:if(1==g)return e.getInt32(f,!i)/e.getInt32(f+4,!i);for(o=[],l=0;g>l;l++)o[l]=e.getInt32(f+8*l,!i)/e.getInt32(f+4+8*l,!i);return o}}function c(e,t,a){for(var n="",i=t;t+a>i;i++)n+=String.fromCharCode(e.getUint8(i));return n}function d(e,t){if("Exif"!=c(e,t,4))return u&&console.log("Not valid EXIF data! "+c(e,t,4)),!1;var a,n,i,r,o,l=t+6;if(18761==e.getUint16(l))a=!1;else{if(19789!=e.getUint16(l))return u&&console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)"),!1;a=!0}if(42!=e.getUint16(l+2,!a))return u&&console.log("Not valid TIFF data! (no 0x002A)"),!1;var d=e.getUint32(l+4,!a);if(8>d)return u&&console.log("Not valid TIFF data! (First offset less than 8)",e.getUint32(l+4,!a)),!1;if(n=s(e,l,l+d,g,a),n.ExifIFDPointer){r=s(e,l,l+n.ExifIFDPointer,h,a);for(i in r){switch(i){case"LightSource":case"Flash":case"MeteringMode":case"ExposureProgram":case"SensingMethod":case"SceneCaptureType":case"SceneType":case"CustomRendered":case"WhiteBalance":case"GainControl":case"Contrast":case"Saturation":case"Sharpness":case"SubjectDistanceRange":case"FileSource":r[i]=m[i][r[i]];break;case"ExifVersion":case"FlashpixVersion":r[i]=String.fromCharCode(r[i][0],r[i][1],r[i][2],r[i][3]);break;case"ComponentsConfiguration":r[i]=m.Components[r[i][0]]+m.Components[r[i][1]]+m.Components[r[i][2]]+m.Components[r[i][3]]}n[i]=r[i]}}if(n.GPSInfoIFDPointer){o=s(e,l,l+n.GPSInfoIFDPointer,f,a);for(i in o){switch(i){case"GPSVersionID":o[i]=o[i][0]+"."+o[i][1]+"."+o[i][2]+"."+o[i][3]}n[i]=o[i]}}return n}var u=!1,h=this.Tags={36864:"ExifVersion",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37500:"MakerNote",37510:"UserComment",40964:"RelatedSoundFile",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBias",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37396:"SubjectArea",37386:"FocalLength",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRation",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",40965:"InteroperabilityIFDPointer",42016:"ImageUniqueID"},g=this.TiffTags={256:"ImageWidth",257:"ImageHeight",34665:"ExifIFDPointer",34853:"GPSInfoIFDPointer",40965:"InteroperabilityIFDPointer",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",274:"Orientation",277:"SamplesPerPixel",284:"PlanarConfiguration",530:"YCbCrSubSampling",531:"YCbCrPositioning",282:"XResolution",283:"YResolution",296:"ResolutionUnit",273:"StripOffsets",278:"RowsPerStrip",279:"StripByteCounts",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",301:"TransferFunction",318:"WhitePoint",319:"PrimaryChromaticities",529:"YCbCrCoefficients",532:"ReferenceBlackWhite",306:"DateTime",270:"ImageDescription",271:"Make",272:"Model",305:"Software",315:"Artist",33432:"Copyright"},f=this.GPSTags={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential"},m=this.StringValues={ExposureProgram:{0:"Not defined",1:"Manual",2:"Normal program",3:"Aperture priority",4:"Shutter priority",5:"Creative program",6:"Action program",7:"Portrait mode",8:"Landscape mode"},MeteringMode:{0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},LightSource:{0:"Unknown",1:"Daylight",2:"Fluorescent",3:"Tungsten (incandescent light)",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 - 5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},Flash:{0:"Flash did not fire",1:"Flash fired",5:"Strobe return light not detected",7:"Strobe return light detected",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},SensingMethod:{1:"Not defined",2:"One-chip color area sensor",3:"Two-chip color area sensor",4:"Three-chip color area sensor",5:"Color sequential area sensor",7:"Trilinear sensor",8:"Color sequential linear sensor"},SceneCaptureType:{0:"Standard",1:"Landscape",2:"Portrait",3:"Night scene"},SceneType:{1:"Directly photographed"},CustomRendered:{0:"Normal process",1:"Custom process"},WhiteBalance:{0:"Auto white balance",1:"Manual white balance"},GainControl:{0:"None",1:"Low gain up",2:"High gain up",3:"Low gain down",4:"High gain down"},Contrast:{0:"Normal",1:"Soft",2:"Hard"},Saturation:{0:"Normal",1:"Low saturation",2:"High saturation"},Sharpness:{0:"Normal",1:"Soft",2:"Hard"},SubjectDistanceRange:{0:"Unknown",1:"Macro",2:"Close view",3:"Distant view"},FileSource:{3:"DSC"},Components:{0:"",1:"Y",2:"Cb",3:"Cr",4:"R",5:"G",6:"B"}},p={120:"caption",110:"credit",25:"keywords",55:"dateCreated",80:"byline",85:"bylineTitle",122:"captionWriter",105:"headline",116:"copyright",15:"category"};this.getData=function(t,a){return!((t instanceof Image||t instanceof HTMLImageElement)&&!t.complete)&&(e(t)?a&&a.call(t):n(t,a),!0)},this.getTag=function(t,a){return e(t)?t.exifdata[a]:void 0},this.getAllTags=function(t){if(!e(t))return{};var a,n=t.exifdata,i={};for(a in n)n.hasOwnProperty(a)&&(i[a]=n[a]);return i},this.pretty=function(t){if(!e(t))return"";var a,n=t.exifdata,i="";for(a in n)n.hasOwnProperty(a)&&(i+="object"==typeof n[a]?n[a]instanceof Number?a+" : "+n[a]+" ["+n[a].numerator+"/"+n[a].denominator+"]\r\n":a+" : ["+n[a].length+" values]\r\n":a+" : "+n[a]+"\r\n");return i},this.readFromBinaryFile=function(e){return i(e)}}]),e.factory("cropHost",["$document","cropAreaCircle","cropAreaSquare","cropEXIF",function(e,t,a,n){var i=function(e){var t=e.getBoundingClientRect(),a=document.body,n=document.documentElement,i=window.pageYOffset||n.scrollTop||a.scrollTop,r=window.pageXOffset||n.scrollLeft||a.scrollLeft,o=n.clientTop||a.clientTop||0,s=n.clientLeft||a.clientLeft||0,l=t.top+i-o,c=t.left+r-s;return{top:Math.round(l),left:Math.round(c)}};return function(r,o,s){function l(){c.clearRect(0,0,c.canvas.width,c.canvas.height),null!==d&&(c.drawImage(d,0,0,c.canvas.width,c.canvas.height),c.save(),c.fillStyle="rgba(0, 0, 0, 0.65)",c.fillRect(0,0,c.canvas.width,c.canvas.height),c.restore(),u.draw())}var c=null,d=null,u=null,h=[100,100],g=[300,300],f=200,m="image/png",p=null,v=function(){if(null!==d){u.setImage(d);var e=[d.width,d.height],t=d.width/d.height,a=e;a[0]>g[0]?(a[0]=g[0],a[1]=a[0]/t):a[0]<h[0]&&(a[0]=h[0],a[1]=a[0]/t),a[1]>g[1]?(a[1]=g[1],a[0]=a[1]*t):a[1]<h[1]&&(a[1]=h[1],a[0]=a[1]*t),r.prop("width",a[0]).prop("height",a[1]).css({"margin-left":-a[0]/2+"px","margin-top":-a[1]/2+"px"}),u.setX(c.canvas.width/2),u.setY(c.canvas.height/2),u.setSize(Math.min(200,c.canvas.width/2,c.canvas.height/2))}else r.prop("width",0).prop("height",0).css({"margin-top":0});l()},y=function(e){return angular.isDefined(e.changedTouches)?e.changedTouches:e.originalEvent.changedTouches},w=function(e){if(null!==d){var t,a,n=i(c.canvas);"touchmove"===e.type?(t=y(e)[0].pageX,a=y(e)[0].pageY):(t=e.pageX,a=e.pageY),u.processMouseMove(t-n.left,a-n.top),l()}},D=function(e){if(e.preventDefault(),e.stopPropagation(),null!==d){var t,a,n=i(c.canvas);"touchstart"===e.type?(t=y(e)[0].pageX,a=y(e)[0].pageY):(t=e.pageX,a=e.pageY),u.processMouseDown(t-n.left,a-n.top),l()}},S=function(e){if(null!==d){var t,a,n=i(c.canvas);"touchend"===e.type?(t=y(e)[0].pageX,a=y(e)[0].pageY):(t=e.pageX,a=e.pageY),u.processMouseUp(t-n.left,a-n.top),l()}};this.getResultImageDataURI=function(){var e,t;return t=angular.element("<canvas></canvas>")[0],e=t.getContext("2d"),t.width=f,t.height=f,null!==d&&e.drawImage(d,(u.getX()-u.getSize()/2)*(d.width/c.canvas.width),(u.getY()-u.getSize()/2)*(d.height/c.canvas.height),u.getSize()*(d.width/c.canvas.width),u.getSize()*(d.height/c.canvas.height),0,0,f,f),null!==p?t.toDataURL(m,p):t.toDataURL(m)},this.setNewImageSource=function(e){if(d=null,v(),s.trigger("image-updated"),e){var t=new Image;"http"===e.substring(0,4).toLowerCase()&&(t.crossOrigin="anonymous"),t.onload=function(){s.trigger("load-done"),n.getData(t,function(){var e=n.getTag(t,"Orientation");if([3,6,8].indexOf(e)>-1){var a=document.createElement("canvas"),i=a.getContext("2d"),r=t.width,o=t.height,l=0,c=0,u=0;switch(e){case 3:l=-t.width,c=-t.height,u=180;break;case 6:r=t.height,o=t.width,c=-t.height,u=90;break;case 8:r=t.height,o=t.width,l=-t.width,u=270}a.width=r,a.height=o,i.rotate(u*Math.PI/180),i.drawImage(t,l,c),d=new Image,d.src=a.toDataURL("image/png")}else d=t;v(),s.trigger("image-updated")})},t.onerror=function(){s.trigger("load-error")},s.trigger("load-start"),t.src=e}},this.setMaxDimensions=function(e,t){if(g=[e,t],null!==d){var a=c.canvas.width,n=c.canvas.height,i=[d.width,d.height],o=d.width/d.height,s=i;s[0]>g[0]?(s[0]=g[0],s[1]=s[0]/o):s[0]<h[0]&&(s[0]=h[0],s[1]=s[0]/o),s[1]>g[1]?(s[1]=g[1],s[0]=s[1]*o):s[1]<h[1]&&(s[1]=h[1],s[0]=s[1]*o),r.prop("width",s[0]).prop("height",s[1]).css({"margin-left":-s[0]/2+"px","margin-top":-s[1]/2+"px"});var f=c.canvas.width/a,m=c.canvas.height/n,p=Math.min(f,m);u.setX(u.getX()*f),u.setY(u.getY()*m),u.setSize(u.getSize()*p)}else r.prop("width",0).prop("height",0).css({"margin-top":0});l()},this.setAreaMinSize=function(e){e=parseInt(e,10),isNaN(e)||(u.setMinSize(e),l())},this.setResultImageSize=function(e){e=parseInt(e,10),isNaN(e)||(f=e)},this.setResultImageFormat=function(e){m=e},this.setResultImageQuality=function(e){e=parseFloat(e),!isNaN(e)&&e>=0&&1>=e&&(p=e)},this.setAreaType=function(e){var n=u.getSize(),i=u.getMinSize(),r=u.getX(),o=u.getY(),h=t;"square"===e&&(h=a),u=new h(c,s),u.setMinSize(i),u.setSize(n),u.setX(r),u.setY(o),null!==d&&u.setImage(d),l()},c=r[0].getContext("2d"),u=new t(c,s),e.on("mousemove",w),r.on("mousedown",D),e.on("mouseup",S),e.on("touchmove",w),r.on("touchstart",D),e.on("touchend",S),this.destroy=function(){e.off("mousemove",w),r.off("mousedown",D),e.off("mouseup",w),e.off("touchmove",w),r.off("touchstart",D),e.off("touchend",w),r.remove()}}}]),e.factory("cropPubSub",[function(){return function(){var e={};this.on=function(t,a){return t.split(" ").forEach(function(t){e[t]||(e[t]=[]),e[t].push(a)}),this},this.trigger=function(t,a){return angular.forEach(e[t],function(e){e.call(null,a)}),this}}}]),e.directive("imgCrop",["$timeout","cropHost","cropPubSub",function(e,t,a){return{restrict:"E",scope:{image:"=",resultImage:"=",changeOnFly:"=",areaType:"@",areaMinSize:"=",resultImageSize:"=",resultImageFormat:"@",resultImageQuality:"=",onChange:"&",onLoadBegin:"&",onLoadDone:"&",onLoadError:"&"},template:"<canvas></canvas>",controller:["$scope",function(e){e.events=new a}],link:function(a,n){var i,r=a.events,o=new t(n.find("canvas"),{},r),s=function(e){var t=o.getResultImageDataURI();i!==t&&(i=t,angular.isDefined(e.resultImage)&&(e.resultImage=t),e.onChange({$dataURI:e.resultImage}))},l=function(t){return function(){e(function(){a.$apply(function(e){t(e)})})}};r.on("load-start",l(function(e){e.onLoadBegin({})})).on("load-done",l(function(e){e.onLoadDone({})})).on("load-error",l(function(e){e.onLoadError({})})).on("area-move area-resize",l(function(e){e.changeOnFly&&s(e)})).on("area-move-end area-resize-end image-updated",l(function(e){s(e)})),a.$watch("image",function(){o.setNewImageSource(a.image)}),a.$watch("areaType",function(){o.setAreaType(a.areaType),s(a)}),a.$watch("areaMinSize",function(){o.setAreaMinSize(a.areaMinSize),s(a)}),a.$watch("resultImageSize",function(){o.setResultImageSize(a.resultImageSize),s(a)}),a.$watch("resultImageFormat",function(){o.setResultImageFormat(a.resultImageFormat),s(a)}),a.$watch("resultImageQuality",function(){o.setResultImageQuality(a.resultImageQuality),s(a)}),a.$watch(function(){return[n[0].clientWidth,n[0].clientHeight]},function(e){o.setMaxDimensions(e[0],e[1]),s(a)},!0),a.$on("$destroy",function(){o.destroy()})}}}])}(),specialist.controller("SearchCtrl",["$scope","$state","dataService",function(e,t,a){e.doctorId,e.showFilterDropDown=!1,a.getFullDoctorList().then(function(t){console.log(t),e.doctorList=t,e.doctorId=t.id}),e.data=[{name:"Neck Specialist",id:"123"},{name:"Back Specialist",id:"124"},{name:"Shoulder Specialist",id:"125"},{name:"Elbow Specialist",id:"126"},{name:"Wrist Specialist",id:"127"},{name:"Hip Specialist",id:"128"},{name:"Knee Specialist",id:"129"},{name:"Ankle Specialist",id:"130"},{name:"Paralysis Specialist",id:"126"},{name:"Post Fracture Specialist",id:"126"},{name:"Post Surgical Specialist",id:"126"}],e.locationData=[{name:"Delhi",id:"123"},{name:"Noida",id:"124"},{name:"Gurgaon",id:"123"}],e.subLocation=[{name:"Akshardham",id:"123"},{name:"Ashok Nagar",id:"123"},{name:"Shahdara",id:"123"},{name:"Dilshad Garden",id:"123"
},{name:"South Extension",id:"123"},{name:"Sarojini Nagar",id:"123"},{name:"Preet Vihar",id:"123"},{name:"Nirman Vihar",id:"124"},{name:"Mayur Vihar",id:"123"}],e.options={fieldAttr:{multiselect:!1,placeholder:"Enter your state"}},e.optionsSpec={fieldAttr:{multiselect:!1,placeholder:"Specialist you need"}},e.api={},e.onClickFunc=function(t){void 0!==t&&(document.getElementById("searchFilters").classList.remove("filterOpen"),document.getElementById("searchFilters").classList.add("filterOpen"),e.showFilterDropDown=!0)},e.onFocusLose=function(){e.showFilterDropDown=!1},e.doctorBook=function(e){t.go("doctor({id:})")}}]),specialist.controller("MainCtrl",["$scope","dataService","$state",function(e,t,a){e.email_err=!1,e.pwd_err=!1,e.loginStatusString="login",e.showLgtBox=!0,e.registrationLightBox=!1,e.loginform=!1,e.err_msg=!1,e.userTestname="sljdhfksjdb",e.mobileRegEx="/^[0-9]{10,10}$/;",e.signUpData={},e.closeLightbox=function(){e.lgtStyle={display:"none"},e.showLgtBox=!1,e.registrationLightBox=!1,e.loginform=!1},e.openLightbox=function(a){var n=t.getUserSession();n?e.loginStatusString=n.name:(e.lgtStyle={display:"block"},e.showLgtBox=!0,"registrationLightBox"==a?e.registrationLightBox=!0:e.loginform=!0)},e.checkusername=function(){1==t.checkUserName(e.username)?e.usernameExist=!0:e.usernameExist=!1},e.checkEmailPwdValidity=function(t){"email"==t?e.email!==e.confEmail?(e.email_err=!0,e.email_err_msg="Email did not match"):(e.email_err=!1,e.email_err_msg=""):"pwd"==t&&(e.pass!==e.confPass?e.pass_err=!0:e.pass_err=!1)},e.sendSignupUser=function(){e.signUpData.mobile=e.mobileNo,e.signUpData.username=e.username,e.signUpData.firstname=e.firstname,e.signUpData.lastname=e.lastname,e.signUpData.pass=e.pass,e.signUpData.email=e.email,t.signUpUser(e.signUpData).then(function(e){e&&a.go("/")})}}]);
//# sourceMappingURL=data:application/json;base64,
